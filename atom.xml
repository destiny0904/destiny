<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>destiny&#39;Note</title>
  
  <subtitle>best for the best!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://destinytaoer.cn/"/>
  <updated>2018-08-10T13:57:34.817Z</updated>
  <id>http://destinytaoer.cn/</id>
  
  <author>
    <name>destiny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DOM的映射机制</title>
    <link href="http://destinytaoer.cn//posts/c52c9c94/"/>
    <id>http://destinytaoer.cn//posts/c52c9c94/</id>
    <published>2018-08-10T13:15:24.000Z</published>
    <updated>2018-08-10T13:57:34.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这在我们平常操作 DOM 的时候司空见惯。就比如：我通过获取一个元素来改变其样式，自然而然的反映到 HTML 页面中。</p><p>但是，我们操作 JS 对象的时候，本质上操作的是 JS 堆内存，为什么会反映到页面中呢？就是因为浏览器存在这个 DOM 的映射机制。</p><a id="more"></a><h1 id="1-什么是-DOM-的映射机制？"><a href="#1-什么是-DOM-的映射机制？" class="headerlink" title="1. 什么是 DOM 的映射机制？"></a>1. 什么是 DOM 的映射机制？</h1><p>我们使用 JS 从页面获取到的元素对象，或者自己手动创建的已经插入页面的元素对象，与页面中的 HTML 元素是绑定在一起的。也就是说修改其中一个，另一个也会跟着自动修改。这就是 DOM 的映射机制。</p><h1 id="2-形成映射的几种情形"><a href="#2-形成映射的几种情形" class="headerlink" title="2. 形成映射的几种情形"></a>2. 形成映射的几种情形</h1><h2 id="改变元素对象的属性"><a href="#改变元素对象的属性" class="headerlink" title="改变元素对象的属性"></a>改变元素对象的属性</h2><p>这是我们最常用到的一种情形。当我们需要为元素添加自定义属性、或者修改属性等，就可以从页面中获取到元素对象，然后对其进行修改，就能够自动反映到 HTML 页面元素上。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=&gt; 修改从页面中获取的元素样式</span></span><br><span class="line">Div.style.color = <span class="string">'red'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt; 修改已经插入页面的元素的属性</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">box.appendChild(p);</span><br><span class="line">p.dataset.index = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>这两种方式得到的元素对象，修改其属性，都能够直接反映到页面中，不需要再次插入页面中。</p><h2 id="在元素内部继续添加元素"><a href="#在元素内部继续添加元素" class="headerlink" title="在元素内部继续添加元素"></a>在元素内部继续添加元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=&gt; 在其内部插入标签或文本</span></span><br><span class="line"><span class="keyword">var</span> list = Div.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// 空的元素集合</span></span><br><span class="line">Div.innerHTML(<span class="string">'&lt;li&gt;&lt;/li&gt;'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// 有一个元素集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt; 添加自己创建的元素对象，同样原理</span></span><br><span class="line">Div.appendChild(p);</span><br></pre></td></tr></table></figure><p>在容器中的数据绑定前，我们获取容器中元素，得到一个空的元素集合，容器数据绑定后，我们不需要重新获取，DOM 的映射机制会帮我们把新增加的元素映射到之前获取的空集合中，让其变为有元素的集合。</p><h2 id="在页面中追加已有元素"><a href="#在页面中追加已有元素" class="headerlink" title="在页面中追加已有元素"></a>在页面中追加已有元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list = Div.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>];</span><br><span class="line">Div.appendChild(list);</span><br></pre></td></tr></table></figure><p><code>appendChild</code> 在追加元素对象的时候，如果这个元素在容器中已经存在，此时<strong>并不是克隆一份新的追加到末尾，而是把原有的元素移动到末尾。</strong></p><blockquote><p>其根本原因在于，同一个元素在页面中，只能够有一个位置。把 JS 元素对象插入页面中某个位置，实际上就是把其绑定的 HTML 元素移动到那个位置上。</p></blockquote><p>这里的元素已经存在有两种情形：</p><ul><li>元素是从页面中获取到的</li><li>创建的元素已经添加过一次，再次添加时</li></ul><p>因此，就无需手动移除原先的元素，再进行添加。直接插入即可。</p><h1 id="3-特殊情况"><a href="#3-特殊情况" class="headerlink" title="3. 特殊情况"></a>3. 特殊情况</h1><p><code>querySelectAll</code> 获取的集合是静态集合（staticNodeList），不存在上述所谓的映射机制，基于这个方法，数据绑定完成后需要重新获取一次才可以。因此，千万不要使用这个方法。</p><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这在我们平常操作 DOM 的时候司空见惯。就比如：我通过获取一个元素来改变其样式，自然而然的反映到 HTML 页面中。&lt;/p&gt;
&lt;p&gt;但是，我们操作 JS 对象的时候，本质上操作的是 JS 堆内存，为什么会反映到页面中呢？就是因为浏览器存在这个 DOM 的映射机制。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://destinytaoer.cn/tags/JavaScript/"/>
    
      <category term="DOM" scheme="http://destinytaoer.cn/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>记第一次博客改版更新</title>
    <link href="http://destinytaoer.cn//posts/ce1c69ab/"/>
    <id>http://destinytaoer.cn//posts/ce1c69ab/</id>
    <published>2018-08-02T12:45:06.000Z</published>
    <updated>2018-08-06T09:39:47.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博客很久没有更新文章了，主要是自身处于就业、学习的双重焦虑状态。</p><p>另外一个原因，是我在捣鼓上一个主题 next 的过程中，由于电脑的恢复出厂和一系列失误的原因，丢失了自己更改很久的版本。后来想再去重新做一遍已经失去了耐心。</p><p>最近，也是在这一系列的压力之下，却是想通了，有种豁然开朗的感觉。于是又再一次的踏上征程。仅以此次改版纪念这一次重生。</p><p>感谢一直以来都在默默支持我的你们。<br><a id="more"></a></p><h1 id="主题变更"><a href="#主题变更" class="headerlink" title="主题变更"></a>主题变更</h1><p>没有太多的时间去研究模板引擎这类的东西，又不想花钱购买服务器。于是，还是选择了使用 hexo + GitHub page 帮我实现这个博客。</p><blockquote><p>next 主题是我最喜欢的一个主题之一，比较喜欢它的简约以及功能的齐全和可扩展性。<br>后来一想，其实没有必要，够用就行。花太多的时间捣鼓，还不如多写写文章。</p></blockquote><p>在 hexo 的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网主题</a>页，总共也不是很多，就一个个查看。</p><p>最终比较满意的只有三个：</p><ul><li><a href="https://www.haomwei.com/" target="_blank" rel="noopener">Maupassant</a></li><li><a href="https://tomotoes.com/blog/" target="_blank" rel="noopener">tomotoes</a></li><li><a href="http://staunchkai.com/" target="_blank" rel="noopener">staunch</a></li></ul><p>最终选定的是最花哨的 tomotoes。说实话，我看中的就是他的动画，以及布局。</p><h1 id="插件选用"><a href="#插件选用" class="headerlink" title="插件选用"></a>插件选用</h1><ul><li>abbrlink：用于生成页面的唯一码，有利于 SEO 优化</li><li>valine 评论</li><li>jsonContent 搜索</li><li>不蒜子访问量统计</li><li>leanclound 阅读量统计</li><li>wordcount：文章字数统计</li></ul><h1 id="记录一些坑"><a href="#记录一些坑" class="headerlink" title="记录一些坑"></a>记录一些坑</h1><p>valine：<br>主题作者把 appid 和 appkey 的名称，在模板和主题配置中不一致，导致了评论系统出不来。</p><p>index：<br>要实现文章的排序，插件 hexo-generator-index 的 JS 文件中，把 order_by 的值写死了，导致无法通过博客配置更改文章顺序。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//=&gt;在 node_modules/hexo-generator-index/index.js 进行修改</span></span><br><span class="line">order_by: <span class="keyword">typeof</span> hexo.config.order_by === <span class="string">'undefined'</span> ? <span class="string">'-date'</span> : hexo.config.order_by</span><br></pre></td></tr></table></figure></p><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;博客很久没有更新文章了，主要是自身处于就业、学习的双重焦虑状态。&lt;/p&gt;
&lt;p&gt;另外一个原因，是我在捣鼓上一个主题 next 的过程中，由于电脑的恢复出厂和一系列失误的原因，丢失了自己更改很久的版本。后来想再去重新做一遍已经失去了耐心。&lt;/p&gt;
&lt;p&gt;最近，也是在这一系列的压力之下，却是想通了，有种豁然开朗的感觉。于是又再一次的踏上征程。仅以此次改版纪念这一次重生。&lt;/p&gt;
&lt;p&gt;感谢一直以来都在默默支持我的你们。&lt;br&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://destinytaoer.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="博客前言" scheme="http://destinytaoer.cn/tags/%E5%8D%9A%E5%AE%A2%E5%89%8D%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>JS变量的创建机制</title>
    <link href="http://destinytaoer.cn//posts/31a465c1/"/>
    <id>http://destinytaoer.cn//posts/31a465c1/</id>
    <published>2018-07-04T02:44:57.000Z</published>
    <updated>2018-08-06T10:51:00.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JS 怎么创建变量？相信大家都会：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>那么它们具体存储在哪里，又是怎么运行的呢？</p><p>这次，就聊一聊 JS 的堆栈内存和变量的创建机制。（这里只介绍 ES5 的机制）</p><a id="more"></a><h1 id="1-堆栈内存"><a href="#1-堆栈内存" class="headerlink" title="1. 堆栈内存"></a>1. 堆栈内存</h1><p>在了解变量创建机制之前，先来了解一下变量的存储空间。</p><p>存储空间分为栈内存和堆内存。</p><p>栈内存：作用域</p><ul><li>提供一个供 JS 代码自上而下执行的环境（代码都是在栈内存中执行的）</li><li>存储基本类型值。由于基本类型比较简单，它们都是直接在栈内存中开辟一个位置，直接把值存储进去的</li></ul><p>堆内存：引用值对应的空间</p><ul><li>对象：键值对</li><li>函数：代码字符串</li></ul><p>由于引用类型的值可能过于复杂，所以需要另外开辟空间来存储，而变量中存储的只是指向这个空间的地址。</p><h1 id="2-变量的创建"><a href="#2-变量的创建" class="headerlink" title="2. 变量的创建"></a>2. 变量的创建</h1><p>（1）创建作用域<br>当浏览器（内核/引擎）渲染和解析 JS 代码的时候，会提供一个供 JS 代码运行的环境，这个环境称为“全局作用域”（global / window scope），是一个栈内存</p><p>（2）进行变量提升<br>将在作用域中使用 var / function 声明的变量进行提升。其中</p><ul><li>var 声明的变量只提升声明，不定义</li><li>function 声明的变量，既提升声明，也提升定义</li></ul><p>所以，函数在当前作用域的任何地方都可以使用。</p><p>（2）代码自上而下执行<br>基本数据类型的值会存储在当前作用域下，以 <code>var a = 12</code> 为例</p><ul><li>首先在当前作用域中声明一个变量 a（这一步会在变量提升阶段完成，执行时会忽略这个声明）</li><li>然后开辟一个空间存储值 12</li><li>最后让声明的变量与存储的值进行关联（就是赋值操作，也叫做定义）</li></ul><p>基本数据类型（也叫做值类型），是按照值来操作的：把原有的值赋值一份放到新的空间或者位置上，和原来的值没有关系</p><p>引用数据类型的值，我们需要开辟一个新的空间（理解为仓库），把内容存储到这个空间中</p><ul><li>首先声明一个变量（同样，这一步是在变量提升阶段完成，执行时会忽略这个声明）</li><li>然后开辟一个新的内存空间，把对象中的键值对依次存储起来（此空间有个 16 进制的地址）</li><li>让变量与空间地址关联起来（把空间地址赋值给变量）</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  n: <span class="number">10</span>,</span><br><span class="line">  m: obj.n * <span class="number">10</span></span><br><span class="line">  <span class="comment">//=&gt; Uncaught TypeError: Cannot read property 'n' of undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.m);</span><br></pre></td></tr></table></figure><p>原因分析</p><ol><li>形成一个全局作用域（栈内存）</li><li>代码自上而下执行<ul><li>首先开辟一个新的堆内存，把键值对存储到对内存中 <code>n: 10</code>, <code>m: obj.n * 10</code></li><li>此时堆内存信息还没有存储完成，空间地址还没有与变量 <code>obj</code> 关联，此时的 <code>obj</code> 是 <code>undefined</code>，<code>obj.n &lt;=&gt; undefined.n</code>，所以报错</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  n: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.m = obj.n * <span class="number">10</span>; <span class="comment">// 此时的 obj 已经有值了</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.m); <span class="comment">//=&gt; 100</span></span><br></pre></td></tr></table></figure><p>引用类型不是按照值来操作，它操作的是空间的地址：把原有空间地址赋值给新的变量，但是原来的空间没有被克隆，还是同一个空间，这样就会出现多个变量关联的是相同的空间，相互之间就会存在影响。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1, arr2); <span class="comment">//=&gt; 1, 0, 4, 2</span></span><br></pre></td></tr></table></figure><p>原因分析：</p><ol><li>数组也是对象，属于引用类型，会开辟一个新的堆内存保存 <code>[3,4]</code></li><li>往下，<code>arr2 = arr1</code>，此时两个变量同时保存一个堆内存的地址</li><li>改变 arr2 会反映到 arr1，此时 arr1: <code>[1,4]</code> arr2: <code>[1,4]</code></li><li>新开辟一个堆内存，保存 <code>[4,5]</code>，然后再把地址赋值给 arr2</li><li>此时两个变量关联的内存不再一样，对其的操作不再相互影响，此时 arr1: <code>[1,4]</code> arr2:<code>[4,5]</code></li><li>再次赋值后，arr1: <code>[1,0]</code> arr2: <code>[4,2]</code></li></ol><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;JS 怎么创建变量？相信大家都会：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么它们具体存储在哪里，又是怎么运行的呢？&lt;/p&gt;
&lt;p&gt;这次，就聊一聊 JS 的堆栈内存和变量的创建机制。（这里只介绍 ES5 的机制）&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://destinytaoer.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Markdown添加Latex数学公式</title>
    <link href="http://destinytaoer.cn//posts/97ae8199/"/>
    <id>http://destinytaoer.cn//posts/97ae8199/</id>
    <published>2017-12-09T13:05:22.000Z</published>
    <updated>2018-08-06T09:45:02.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在编辑文章的时候，经常都会有使用数学公式的需求。我查找到一篇文章，总结的比较好，在这里跟你们分享。</p><blockquote><p>需要注意的是，想要在 Markdown 中使用这些数学公式，需要你的编辑器支持这个功能。这里介绍的就是其中一种：Latex。<br>我的博客对数学公式的支持也不是很好，跟 Markdown 的编译插件有所冲突，大家可以查看我的 CSDN 上的文章：<br><a href="https://blog.csdn.net/destinytaoer/article/details/78761520" target="_blank" rel="noopener"><br>Markdown 添加 Latex 数学公式</a></p></blockquote><a id="more"></a><h1 id="Markdown-中添加公式"><a href="#Markdown-中添加公式" class="headerlink" title="Markdown 中添加公式"></a>Markdown 中添加公式</h1><p>行内公式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$行内公式$</span><br></pre></td></tr></table></figure></p><p>行间公式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">行间公式</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><h1 id="Latex-数学公式语法"><a href="#Latex-数学公式语法" class="headerlink" title="Latex 数学公式语法"></a>Latex 数学公式语法</h1><h2 id="角标（上下标）"><a href="#角标（上下标）" class="headerlink" title="角标（上下标）"></a>角标（上下标）</h2><p><strong>上标</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>下标</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>上下标命令用来放在需要插入上下标的地方，花括弧内为上下标的内容，当角标为单个字符时候，可以不使用花括号；如果角标为多字符或者多层次的时候，必须要使用花括号。</p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x^2, x_1^2, x^&#123;(n)&#125;_&#123;22&#125;, ^&#123;16&#125;O^&#123;2-&#125;_&#123;32&#125;, x^&#123;y^&#123;z^a&#125;&#125;, x^&#123;y_z&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>x^2, x_1^2, x^{(n)}<em>{22}, ^{16}O^{2-}</em>{32}, x^{y^{z^a}}, x^{y_z}<br>$$</p><p><strong>使用文字作为角标</strong></p><p><strong>文字模式</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\mbox&#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>改变文字大小的命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\tiny</span><br></pre></td></tr></table></figure></p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\partial f_&#123;\mbox&#123;\tiny 极大值&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>\partial f_{\mbox{\tiny 极大值}}<br>$$</p><p><strong>强制改变角标大小或层次命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\scriptstyle</span><br></pre></td></tr></table></figure></p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y_N, y_&#123;_N&#125;, y_&#123;_&#123;\scriptstyle N&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>y_N, y_{<em>N}, y</em>{_{\scriptstyle  N}}<br>$$</p><p>第一种输出为正常输出，但输出效果不明显；第二种是将一级角标改为二级角标，字体也自动变为二级角标字体；第三种将一级角标改为二级角标，但是强制字体改为一级角标字体。</p><h2 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h2><p><strong>分式命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\frac&#123;分子&#125;&#123;分母&#125;</span><br></pre></td></tr></table></figure></p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\frac&#123;x+y&#125;&#123;y+z&#125;</span><br></pre></td></tr></table></figure></p><p>行内分式：$\frac{x+y}{y+z}$<br>行间分式：$$\frac{x+y}{y+z}$$</p><p>表明<strong>行内分式字体比行间字体小</strong>，因为行内分式使用的是角标字体<br>可以人工改变行内分式的字体大小，<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\displaystyle\frac&#123;x+y&#125;&#123;y+z&#125;</span><br></pre></td></tr></table></figure></p><p>$\displaystyle\frac{x+y}{y+z}$ </p><p><strong>连分式</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x_0+\frac&#123;1&#125;&#123;x_1+\frac&#123;1&#125;&#123;x_2+\frac&#123;1&#125;&#123;x_3+\frac&#123;1&#125;&#123;x_4&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>x_0+\frac{1}{x_1+\frac{1}{x_2+\frac{1}{x_3+\frac{1}{x_4}}}}<br>$$</p><p>可以通过强制改变字体大小使得分子分母字体大小一致：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\newcommand&#123;\FS&#125;[2]&#123;\displaystyle\frac&#123;#1&#125;&#123;#2&#125;&#125;x0+\FS&#123;1&#125;&#123;X_1+\FS&#123;1&#125;&#123;X_2+\FS&#123;1&#125;&#123;X_3+\FS&#123;1&#125;&#123;X_4&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>第一行命令定义了一个新的分式命令，规定每个调用该命令的分式都按 <code>\displaystyle</code> 的格式显示分式</p><p>分数线长度值是预设为分子分母的最大长度，如果想要使分数线再长一点，可以在分子或分母两端添加一些间隔<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\frac&#123;1&#125;&#123;2&#125;,\frac&#123;\;1\;&#125;&#123;\;2\;&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>\frac{1}{2},\frac{\;1\;}{\;2\;}<br>$$</p><p>其中第一个显示是正常的显示，第二个显示是分子分母前后都放入一个间隔命令 <code>\;</code> 中</p><h2 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h2><p><strong>二次根式命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sqrt&#123;表达式&#125;</span><br></pre></td></tr></table></figure></p><p>如果表达式是个单个字符，则不需要花括号，但需要在字符和 <code>sqrt</code> 之间加入一个空格</p><p><strong>$n$ 次根式命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sqrt[n]&#123;表达式&#125;</span><br></pre></td></tr></table></figure></p><p>被开方表达式字符高度不一致时，根号上面的横线可能不是在同一条直线上</p><p>为了使横线在同一条直线上，可以在被开方表达式插入一个只有高度没有宽度的数学支柱 <code>\mathstut</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sqrt&#123;a&#125;+\sqrt&#123;b&#125;+\sqrt&#123;c&#125;,\qquad \sqrt&#123;\mathstrut a&#125;+\sqrt&#123;\mathstrut b&#125;+\sqrt&#123;\mathstrut c&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>\sqrt{a}+\sqrt{b}+\sqrt{c},\qquad \sqrt{\mathstrut a}+\sqrt{\mathstrut b}+\sqrt{\mathstrut c}<br>$$</p><p>当被开方表达式高时，开方次数的位置显得略低，解决方法为：将开方此时改为上标，并拉近与根式的水平距离，即显示将命令中的 <code>[n]</code> 改为 <code>[^n\!]</code>,其中 <code>^</code> 表示是上标，<code>\!</code> 表示缩小间隔<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sqrt&#123;1+\sqrt[^p\!]&#123;1+\sqrt[^q\!]&#123;1+a&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>注意比较两个根式开方次数的显示位置</p><h2 id="求和与积分"><a href="#求和与积分" class="headerlink" title="求和与积分"></a>求和与积分</h2><p><strong>求和命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sum_&#123;k=1&#125;^n表达式（求和项紧随其后,下同）</span><br></pre></td></tr></table></figure></p><p><strong>积分命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\int_a^b表达式</span><br></pre></td></tr></table></figure></p><p>比如：</p><p>无穷级数 $\sum_{k=1}^\infty\frac{x^n}{n!}$ 可以化为积分 $\int_0^\infty e^x$ 也即是：$\sum_{k=1}^\infty\frac{x^n}{n!} = \int_0^\infty e^x$</p><p><strong>改变上下限位置的命令</strong>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\limits(强制上下限在上下侧) </span><br><span class="line">\nolimits(强制上下限在左右侧)</span><br></pre></td></tr></table></figure></p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sum\limits_&#123;k=1&#125;^n</span><br><span class="line">\sum\nolimits_&#123;k=1&#125;^n</span><br></pre></td></tr></table></figure></p><p> $\sum\limits_{k=1}^n$ 和 $\sum\nolimits_{k=1}^n$</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\int\limits_0^\infty e^x</span><br><span class="line">\int\nolimits_0^\infty e^x</span><br></pre></td></tr></table></figure><p>$\int\limits_0^\infty e^x$ 和 $\int\nolimits_0^\infty e^x$</p><h2 id="上、下划线"><a href="#上、下划线" class="headerlink" title="上、下划线"></a>上、下划线</h2><p><strong>上划线命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\overline&#123;公式&#125;</span><br></pre></td></tr></table></figure></p><p><strong>下划线命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\underline&#123;公式&#125;</span><br></pre></td></tr></table></figure></p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\overline&#123;\overline&#123;a^2&#125;+\underline&#123;ab&#125;+\bar&#123;a&#125;^3&#125;</span><br></pre></td></tr></table></figure></p><p>$$\overline{\overline{a^2}+\underline{ab}+\bar{a}^3}$$</p><h2 id="上、下括弧"><a href="#上、下括弧" class="headerlink" title="上、下括弧"></a>上、下括弧</h2><p><strong>上花括弧命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\overbrace&#123;公式&#125;&#123;说明&#125;</span><br></pre></td></tr></table></figure></p><p><strong>下花括弧命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\underbrace&#123;公式&#125;_&#123;说明&#125;</span><br></pre></td></tr></table></figure></p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\underbrace&#123;a+\overbrace&#123;b+\dots+b&#125;^&#123;m\mbox&#123;\tiny 个&#125;&#125;&#125;_&#123;20\mbox&#123;\scriptsize 个&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>$$\underbrace{a+\overbrace{b+\dots+b}^{m\mbox{\tiny 个}}}_{20\mbox{\scriptsize 个}}$$</p><h2 id="数学重音符号"><a href="#数学重音符号" class="headerlink" title="数学重音符号"></a>数学重音符号</h2><p>这里以 <code>a</code> 为例，如果是字母 <code>i</code> 或 <code>j</code> 带有重音，应该替换为<code>\imath</code>、<code>\jmath</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\hat&#123;a&#125;</span><br><span class="line">\check&#123;a&#125;</span><br><span class="line">\breve&#123;a&#125;</span><br><span class="line">\tilde&#123;a&#125;</span><br><span class="line">\bar&#123;a&#125;</span><br><span class="line">\vec&#123;a&#125;</span><br><span class="line">\acute&#123;a&#125;</span><br><span class="line">\grave&#123;a&#125;</span><br><span class="line">\mathring&#123;a&#125;</span><br><span class="line">\dot&#123;a&#125;</span><br><span class="line">\ddot&#123;a&#125;</span><br></pre></td></tr></table></figure><p>$$<br>\hat{a}<br>\check{a}<br>\breve{a}<br>\tilde{a}<br>\bar{a}<br>\vec{a}<br>\acute{a}<br>\grave{a}<br>\mathring{a}<br>\dot{a}<br>\ddot{a}<br>$$</p><h2 id="堆积符号"><a href="#堆积符号" class="headerlink" title="堆积符号"></a>堆积符号</h2><ul><li><code>\stacrel{上位符号}{基位符号}</code> 基位符号大，上位符号小</li><li><code>{上位公式\atop 下位公式}</code> 上下符号一样大</li><li><code>{上位公式\choose 下位公式}</code> 上下符号一样大；上下符号被包括在圆弧内</li></ul><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\vec&#123;x&#125;\stackrel&#123;\mathrm&#123;def&#125;&#125;&#123;=&#125;&#123;x_1,\dots,x_n&#125;\\ &#123;n+1 \choose k&#125;=&#123;n \choose k&#125;+&#123;n \choose k-1&#125;\\ \sum_&#123;k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n&#125;A_&#123;k_0&#125;A_&#123;k_1&#125;\cdots</span><br></pre></td></tr></table></figure></p><p>$$<br> \vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}\ {n+1 \choose k}={n \choose k}+{n \choose k-1}\ \sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots<br>$$</p><h2 id="定界符"><a href="#定界符" class="headerlink" title="定界符"></a>定界符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">()\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</span><br><span class="line">\big(\Big) \bigg(\Bigg)</span><br></pre></td></tr></table></figure><p>$$<br>()\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)<br>\big(\Big) \bigg(\Bigg)<br>$$</p><p><strong>自适应放大命令</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\left</span><br><span class="line">\right</span><br></pre></td></tr></table></figure></p><p>放在左右定界符前，自动随着公式内容大小调整符号大小</p><p>比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(x)\left(x^&#123;y^z&#125;\right)</span><br></pre></td></tr></table></figure></p><p>$$<br>(x)\left(x^{y^z}\right)<br>$$</p><h2 id="占位宽度"><a href="#占位宽度" class="headerlink" title="占位宽度"></a>占位宽度</h2><ul><li>两个 quad 空格 <code>\qquad</code>， 两个 m 的宽度：$a \qquad b$</li><li>一个 quad 空格 <code>\quad</code>， 一个m的宽度：$a \quad b$</li><li>大空格 <code>\</code>， 1/3m 宽度：$a\ b$</li><li>中等空格 <code>\;</code> 2/7m 宽度：$a\;b$</li><li>小空格 <code>\,</code> 1/6m 宽度：$a\,b$</li><li>没有空格：$ab$</li><li>紧贴 <code>\!</code> ，缩进1/6m宽度：$a!b$</li></ul><p><code>\quad</code> 代表当前字体下接近字符‘M’的宽度（approximately the width of an “M” in the current font）</p><h2 id="集合相关的运算命令"><a href="#集合相关的运算命令" class="headerlink" title="集合相关的运算命令"></a>集合相关的运算命令</h2><p><strong>集合的大括号</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#123; ...\&#125;</span><br></pre></td></tr></table></figure></p><p>$${ …}$$</p><p><strong>属于</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\in</span><br></pre></td></tr></table></figure></p><p>$$\in$$</p><p><strong>不属于</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\not\in</span><br></pre></td></tr></table></figure></p><p>$$<br>\not\in<br>$$</p><p><strong>包含于</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A\subset B</span><br></pre></td></tr></table></figure></p><p>$$<br>A\subset B<br>$$</p><p><strong>真包含于</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A \subsetneqq B</span><br></pre></td></tr></table></figure></p><p>$$<br>A \subsetneqq B<br>$$</p><p><strong>包含</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A \supset B</span><br></pre></td></tr></table></figure></p><p>$$<br>A \supset B<br>$$</p><p><strong>真包含</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A \supsetneqq B</span><br></pre></td></tr></table></figure></p><p>$$<br>A \supsetneqq B<br>$$</p><p><strong>A不包含于B</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A \not \subset B</span><br></pre></td></tr></table></figure></p><p>$$<br>A \not \subset B<br>$$</p><p><strong>A交B</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A \cap B</span><br></pre></td></tr></table></figure></p><p> $$<br> A \cap B<br> $$</p><p><strong>A并B</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A \cup B</span><br></pre></td></tr></table></figure></p><p>$$<br>A \cup B<br>$$</p><p><strong>A的闭包</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\overline&#123;A&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>\overline{A}<br>$$</p><p><strong>A减去B</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A\setminus B</span><br></pre></td></tr></table></figure></p><p>$$<br>A\setminus B<br>$$</p><p><strong>实数集合</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\mathbb&#123;R&#125;</span><br></pre></td></tr></table></figure></p><p>$$<br>\mathbb{R}<br>$$</p><p><strong>空集</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\emptyset</span><br></pre></td></tr></table></figure></p><p>$$<br>\emptyset<br>$$</p><h1 id="引自"><a href="#引自" class="headerlink" title="引自"></a>引自</h1><blockquote><p>引自：<a href="https://www.cnblogs.com/peaceWang/p/Markdown-tian-jia-Latex-shu-xue-gong-shi.html#toc_1" target="_blank" rel="noopener">Markdown 添加 Latex 数学公式</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在编辑文章的时候，经常都会有使用数学公式的需求。我查找到一篇文章，总结的比较好，在这里跟你们分享。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，想要在 Markdown 中使用这些数学公式，需要你的编辑器支持这个功能。这里介绍的就是其中一种：Latex。&lt;br&gt;我的博客对数学公式的支持也不是很好，跟 Markdown 的编译插件有所冲突，大家可以查看我的 CSDN 上的文章：&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/destinytaoer/article/details/78761520&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;br&gt;Markdown 添加 Latex 数学公式&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="markdown" scheme="http://destinytaoer.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>前端学习历程</title>
    <link href="http://destinytaoer.cn//posts/711a3dcc/"/>
    <id>http://destinytaoer.cn//posts/711a3dcc/</id>
    <published>2017-12-01T05:31:47.000Z</published>
    <updated>2018-08-06T09:37:33.925Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1512117101258&di=7b80a70a82946071324486b1f5e7664c&imgtype=0&src=http%3A%2F%2Ftxt22262.book118.com%2F2017%2F0302%2Fbook94113%2F94112182.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单介绍自己自 2016 年 11 月起至今，从定下学习前端目标，开始对前端进行学习的历程。</p><p>包含：</p><ul><li>基础知识</li><li>书籍阅读</li><li>项目实战</li><li>工作经历</li></ul><a id="more"></a><h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><p><strong>2016</strong></p><ul><li>HTML、CSS 入门</li></ul><p><strong>2017</strong></p><ul><li>JavaScript DOM、GitHub 入门</li><li>jQuery 入门</li><li>HTML5、CSS3 入门</li><li>Sass 入门</li><li>Bootstrap 了解</li><li>AJAX 入门</li><li>响应式布局</li><li>vue 入门</li><li>ElementUI 和 MintUI 了解</li><li>学习面向对象程序设计课程（C++）</li><li>掌握 HTML、CSS，深入了解 CSS 的部分机制与属性的特性</li><li>熟悉 HTML5，掌握 HTML5 的新标签与功能</li><li>深入学习 JavaScript 内置对象的属性、方法</li><li>了解闭包、原型等概念</li><li>学习数据结构课程（C语言描述）</li></ul><p><strong>2018</strong></p><ul><li>vue 加深学习</li><li>ES6 语法入门</li><li>小程序的入门</li><li>深入了解 JavaScript 内部机制，类型转换、变量提升、堆栈内存、闭包、原型等</li><li>面向对象编程思想、设计模式</li></ul><h2 id="拓展学习"><a href="#拓展学习" class="headerlink" title="拓展学习"></a>拓展学习</h2><p><strong>2016</strong></p><ul><li>GitHub 和 githubpage 上传项目</li></ul><p><strong>2017</strong></p><ul><li>gulp 学习</li><li>git 了解</li><li>npm 了解，下载各种包和运行服务器</li><li>hexo 搭建博客</li><li>ESLint 了解</li><li>学习计算机网络课程，了解 HTTP 协议</li></ul><p><strong>2018</strong></p><ul><li>GitBook 的入门 =&gt; 做参考笔记</li><li>学习 webpack 的基础配置</li></ul><h1 id="二、书籍阅读"><a href="#二、书籍阅读" class="headerlink" title="二、书籍阅读"></a>二、书籍阅读</h1><p><strong>2016</strong></p><ul><li>Web前端设计与开发：HTML+CSS+JavaScript+HTML 5+jQuery</li><li>Web前端开发精品课：HTML与CSS进阶教程</li></ul><p><strong>2017</strong></p><ul><li>javascript DOM 编程艺术</li><li>锋利的 JQuery</li><li>响应式网页设计、响应式网页设计实战</li><li>vue.js 前端开发快速入门与专业应用</li><li>HTML5 揭秘</li><li>CSS 权威指南</li></ul><p><strong>2018</strong></p><ul><li>CSS 揭秘</li><li>javascript 高级程序设计</li><li>ECMAScript 6 入门</li><li>数据结构与算法 JavaScript 描述</li></ul><h1 id="三、项目实战"><a href="#三、项目实战" class="headerlink" title="三、项目实战"></a>三、项目实战</h1><p><strong>2017</strong></p><ul><li><p><a href="https://destinytaoer.github.io/xiaomi" target="_blank" rel="noopener">仿小米官网</a>，静态主页</p></li><li><p>仿深大内部网，静态主页</p></li><li><p><a href="https://destinytaoer.github.io/Responsive/" target="_blank" rel="noopener">理财网站</a>，响应式页面</p></li><li><p><a href="http://destinytaoer.cn/">destiny’Note</a>，个人博客</p></li></ul><p><strong>2018</strong></p><ul><li><p><a href="https://github.com/destinytaoer/elmsell" target="_blank" rel="noopener">仿饿了么外卖</a>，vue 项目实战</p></li><li><p><a href="https://destinytaoer.github.io/resume/" target="_blank" rel="noopener">个人响应式简历</a></p></li><li><p>H5 交互简历</p></li></ul><h1 id="四、工作经历"><a href="#四、工作经历" class="headerlink" title="四、工作经历"></a>四、工作经历</h1><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">地点</th><th style="text-align:center">工作</th></tr></thead><tbody><tr><td style="text-align:center">2018.3.8 - 2018.3.26</td><td style="text-align:center">伟博思</td><td style="text-align:center">小程序页面开发</td></tr></tbody></table><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1512117101258&amp;di=7b80a70a82946071324486b1f5e7664c&amp;imgtype=0&amp;src=http%3A%2F%2Ftxt22262.book118.com%2F2017%2F0302%2Fbook94113%2F94112182.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单介绍自己自 2016 年 11 月起至今，从定下学习前端目标，开始对前端进行学习的历程。&lt;/p&gt;
&lt;p&gt;包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础知识&lt;/li&gt;
&lt;li&gt;书籍阅读&lt;/li&gt;
&lt;li&gt;项目实战&lt;/li&gt;
&lt;li&gt;工作经历&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://destinytaoer.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="人生历程" scheme="http://destinytaoer.cn/tags/%E4%BA%BA%E7%94%9F%E5%8E%86%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ESLint （二）配置文件</title>
    <link href="http://destinytaoer.cn//posts/b0fbee66/"/>
    <id>http://destinytaoer.cn//posts/b0fbee66/</id>
    <published>2017-11-30T14:28:10.000Z</published>
    <updated>2018-08-06T10:43:14.212Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-fc178e0811917b85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="一、配置方式"><a href="#一、配置方式" class="headerlink" title="一、配置方式"></a>一、配置方式</h2><ul><li>注释形式：使用 JavaScript 注释将配置信息直接嵌入到文件中</li><li>文件形式<ul><li><code>.eslintrc.js</code></li><li><code>.eslintrc.yaml</code> 或者 <code>.eslintrc.yml</code></li><li><code>.eslintrc.json</code> </li><li><code>package.json</code> 文件中创建 <code>eslintConfig</code> 属性</li></ul></li></ul><a id="more"></a><p><code>.eslintrc.js</code> 文件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: <span class="string">'standard'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">'rules'</span>: &#123;</span><br><span class="line">    <span class="comment">// allow paren-less arrow functions</span></span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'semi'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow async-await</span></span><br><span class="line">    <span class="string">'generator-star-spacing'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// allow debugger during development</span></span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="number">2</span> : <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>.eslintrc.json</code> 文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;parserOptions&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;globals&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>.eslintrc.yml</code> 文件<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line">  <span class="string">parserOptions：</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">  env:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">  globals:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure></p><p><code>package.json</code> 文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;mypackage&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">    &quot;eslintConfig&quot;: &#123;</span><br><span class="line">        &quot;plugins&quot;: [&quot;example&quot;],</span><br><span class="line">        &quot;env&quot;: &#123;</span><br><span class="line">            &quot;example/custom&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：配置文件如果在主目录下，那么会先使用与文件就近的配置文件，找不到其他的配置文件，最后才使用主目录下的配置文件。</p></blockquote><p>主要配置信息有：</p><ul><li>环境（Environments）：脚本设计运行的环境。每个环境都带有一组预定义的全局变量。</li><li>全局变量（Globals） ：脚本在执行期间访问的其他全局变量。</li><li>规则（Rules）：启用了哪些规则以及错误级别。</li></ul><h2 id="二、解析器"><a href="#二、解析器" class="headerlink" title="二、解析器"></a>二、解析器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>, <span class="comment">//解析器</span></span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125; <span class="comment">//解析器选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认解析器：Espree</p><h2 id="三、环境"><a href="#三、环境" class="headerlink" title="三、环境"></a>三、环境</h2><p>环境有浏览器 bower，Node 环境 node 等等<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在<a href="https://eslint.org/docs/user-guide/configuring#specifying-environments" target="_blank" rel="noopener">官网</a>上查找所有环境</p></blockquote><h2 id="四、全局变量"><a href="#四、全局变量" class="headerlink" title="四、全局变量"></a>四、全局变量</h2><p>在 JavaScript 文件中使用注释来指定全局变量，请使用以下格式：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global var1, var2 */</span></span><br></pre></td></tr></table></figure></p><p>这定义了两个全局变量，<code>var1</code> 和 <code>var2</code>。如果你想有选择地指定这些全局变量不应该被写入（只读），那么你可以设置每个 <code>false</code> 标志：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global var1:false, var2:false */</span></span><br></pre></td></tr></table></figure></p><p>在配置文件中配置全局变量，请使用 <code>globals</code> 键并指示要使用的全局变量。将每个全局变量名称设置为等于 <code>true</code> （允许覆盖变量）或 <code>false</code> （禁止覆盖）。例如：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  globals: &#123;</span><br><span class="line">    <span class="string">"var1"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"var2"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：启用 <code>no-global-assign</code> 规则禁止修改代码中的只读全局变量。</p><h2 id="五、插件"><a href="#五、插件" class="headerlink" title="五、插件"></a>五、插件</h2><p>ESLint 支持使用第三方插件。在使用插件之前，您必须使用 npm 来安装它。</p><p>要在配置文件中配置插件，使用 <code>plugins</code> 包含插件名称，两种写法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">"plugin1"</span>,</span><br><span class="line">    <span class="string">"eslint-plugin-plugin2"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：由于 Node 的 require 功能，全局安装的 ESLint 实例只能使用全局安装的 ESLint 插件，本地安装的版本只能使用本地安装的插件。不支持混合本地和全局插件。</p></blockquote><h2 id="六、规则"><a href="#六、规则" class="headerlink" title="六、规则"></a>六、规则</h2><p>要更改规则设置，您必须将规则 ID 设置为以下值之一：</p><ul><li><code>off</code> 或者 <code>0</code>: 关闭该规则</li><li><code>warn</code> 或者 <code>1</code>: 将规则打开为警告（不影响退出代码）</li><li><code>error</code> 或者 <code>2</code>: 将规则打开为错误（触发时退出代码为 <code>1</code>）</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">"eqeqeq"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="string">"curly"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"quotes"</span>: [<span class="string">"error"</span>, <span class="string">"double"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://destinytaoer.cn/posts/4e5d3138/">ESLint （一）简介与安装</a><br><a href="https://eslint.org/docs/user-guide/configuring" target="_blank" rel="noopener">配置ESLint</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-fc178e0811917b85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;h2 id=&quot;一、配置方式&quot;&gt;&lt;a href=&quot;#一、配置方式&quot; class=&quot;headerlink&quot; title=&quot;一、配置方式&quot;&gt;&lt;/a&gt;一、配置方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注释形式：使用 JavaScript 注释将配置信息直接嵌入到文件中&lt;/li&gt;
&lt;li&gt;文件形式&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.eslintrc.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.eslintrc.yaml&lt;/code&gt; 或者 &lt;code&gt;.eslintrc.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.eslintrc.json&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; 文件中创建 &lt;code&gt;eslintConfig&lt;/code&gt; 属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://destinytaoer.cn/tags/javascript/"/>
    
      <category term="编码规范" scheme="http://destinytaoer.cn/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>ESLint （一）简介与安装</title>
    <link href="http://destinytaoer.cn//posts/4e5d3138/"/>
    <id>http://destinytaoer.cn//posts/4e5d3138/</id>
    <published>2017-11-30T14:25:05.000Z</published>
    <updated>2018-08-06T10:43:14.284Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-fc178e0811917b85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="一、关于"><a href="#一、关于" class="headerlink" title="一、关于"></a>一、关于</h2><p>ESLint 是一个由 Nicholas C. Zakas 于 2013 年 6 月创建的开源 JavaScript linting 实用程序。codelinting 是一种静态分析，常用于查找不符合某些样式指南的有问题的模式或代码。</p><p>JavaScript是一种动态和松散类型的语言，特别容易出现开发人员错误。如果没有编译过程的好处，通常会执行 JavaScript 代码以查找语法或其他错误。像 ESLint 这样的 Linting 工具允许开发人员在不执行 JavaScript 代码的情况下发现问题。</p><p>ESLint 创建的主要原因是允许开发人员创建自己的 LINTING 规则。ESLint 旨在使所有规则完全可自定义。默认的规则可以改变。他们都可以遵循相同的模式，无论是规则本身还是测试。虽然 ESLint 将附带一些内置的规则，使其从一开始就非常有用，但您可以随时动态加载规则。</p><p>ESLint 是使用 Node.js 编写的，通过 npm 提供了一个快速的运行环境和简单的安装。</p><blockquote><p><a href="https://eslint.org/docs/about/" target="_blank" rel="noopener">关于ESLint</a></p></blockquote><a id="more"></a><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><p>全局与局部安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br><span class="line">npm install -g eslint</span><br></pre></td></tr></table></figure></p><p>创建配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure></p><p>对某个文件运行 ESLint<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/eslint yourfile.js</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://destinytaoer.cn/b0fbee66">ESLint（二）配置文件</a><br><a href="https://eslint.org/docs/user-guide/getting-started" target="_blank" rel="noopener">起步</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-fc178e0811917b85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;h2 id=&quot;一、关于&quot;&gt;&lt;a href=&quot;#一、关于&quot; class=&quot;headerlink&quot; title=&quot;一、关于&quot;&gt;&lt;/a&gt;一、关于&lt;/h2&gt;&lt;p&gt;ESLint 是一个由 Nicholas C. Zakas 于 2013 年 6 月创建的开源 JavaScript linting 实用程序。codelinting 是一种静态分析，常用于查找不符合某些样式指南的有问题的模式或代码。&lt;/p&gt;
&lt;p&gt;JavaScript是一种动态和松散类型的语言，特别容易出现开发人员错误。如果没有编译过程的好处，通常会执行 JavaScript 代码以查找语法或其他错误。像 ESLint 这样的 Linting 工具允许开发人员在不执行 JavaScript 代码的情况下发现问题。&lt;/p&gt;
&lt;p&gt;ESLint 创建的主要原因是允许开发人员创建自己的 LINTING 规则。ESLint 旨在使所有规则完全可自定义。默认的规则可以改变。他们都可以遵循相同的模式，无论是规则本身还是测试。虽然 ESLint 将附带一些内置的规则，使其从一开始就非常有用，但您可以随时动态加载规则。&lt;/p&gt;
&lt;p&gt;ESLint 是使用 Node.js 编写的，通过 npm 提供了一个快速的运行环境和简单的安装。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://eslint.org/docs/about/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;关于ESLint&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://destinytaoer.cn/tags/javascript/"/>
    
      <category term="编码规范" scheme="http://destinytaoer.cn/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>JS类型转换总结</title>
    <link href="http://destinytaoer.cn//posts/dc5d25aa/"/>
    <id>http://destinytaoer.cn//posts/dc5d25aa/</id>
    <published>2017-11-10T05:31:47.000Z</published>
    <updated>2018-08-06T05:50:15.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JS 令人头疼的一点就是它属于弱类型语言，一个变量存储的值可以是字符串、数值、布尔值或者对象等，可以随时变更。获取一个变量，你不会知道其存储的值是什么类型的，所以很多时候都需要进行类型检测。</p><p>除了手动变更类型之外，有些情况下，JS 内部也会自动进行类型转换，以满足部分操作符以及语句等的执行。</p><p>下面就是我对 JS 类型转换的一些总结，其中大部分来自《JavaScript 高级程序设计》这本书。</p><a id="more"></a><h1 id="1-Boolean-转换"><a href="#1-Boolean-转换" class="headerlink" title="1. Boolean 转换"></a>1. Boolean 转换</h1><h2 id="转换情况"><a href="#转换情况" class="headerlink" title="转换情况"></a>转换情况</h2><ul><li>调用 <code>Boolean()</code></li><li>在 <code>if</code> 或 <code>while</code> 流程控制中，内部执行相应的 <code>Boolean()</code> 转换</li><li>逻辑运算符，主要是 <code>!</code> 和 <code>!!</code>，内部执行 <code>Boolean()</code> 转换</li></ul><h2 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h2><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">转换为 <code>true</code> 的值</th><th style="text-align:center">转换为 <code>false</code> 的值</th></tr></thead><tbody><tr><td style="text-align:center">String</td><td style="text-align:center">任何非空字符串</td><td style="text-align:center">空字符串<code>&quot;&quot;</code></td></tr><tr><td style="text-align:center">Number</td><td style="text-align:center">任何非零数字值（包括无穷大）</td><td style="text-align:center"><code>0</code> 和 <code>NaN</code></td></tr><tr><td style="text-align:center">Object</td><td style="text-align:center">任何对象</td><td style="text-align:center"><code>null</code></td></tr><tr><td style="text-align:center">Undefined</td><td style="text-align:center">不适用</td><td style="text-align:center"><code>undefined</code></td></tr></tbody></table><p>也就是说，只有 <code>0 / NaN / &quot;&quot; / null / undefined</code> 才会转换为 <code>false</code>，其余都是 <code>true</code></p><p>所以在 <code>if</code> 判断中，直接写变量有时候是不够严谨的。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!a)&#123;</span><br><span class="line">  <span class="comment">//=&gt; 想要在 a 不存在或没定义的时候执行</span></span><br><span class="line">  <span class="comment">//=&gt; 实际上存储的值是 0 或者 '' 等也会执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt; 应该使用 typeof</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="comment">//=&gt; a 不存在或没定义的时候执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=&gt; 或者使用全等</span></span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="comment">//=&gt; 使用 == 也不够严谨，因为 null == undefined</span></span><br><span class="line">  <span class="comment">//=&gt; 需要区分 null 或 undefined 的 情况较少</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在真实的项目中还是会经常用到第一种写法，因为其较为简单，而且能满足需求。因为默认情况下，判断的值只有两种情况：第一种是不存在或者未定义、第二种就是约定的值。很少会出现约定的值是转换为 false 的情况，但是使用的时候也要特别的注意。</p><h1 id="2-Number-转换"><a href="#2-Number-转换" class="headerlink" title="2. Number 转换"></a>2. Number 转换</h1><h2 id="转换情况-1"><a href="#转换情况-1" class="headerlink" title="转换情况"></a>转换情况</h2><ul><li>调用 <code>Number()</code>、<code>parseInt()</code>、<code>parseFloat()</code></li><li>其他情况都是使用 <code>Number()</code> 的转换机制<ul><li><code>isNaN()</code> </li><li>一元加或减操作符，注意：这里是一元的，如 <code>s = + s</code>，区别于加法和拼接</li><li>递增或递减，以及加法（除了拼接）、减法、乘法、除法、求模等操作符</li><li>关系操作符</li></ul></li></ul><h2 id="转换规则-1"><a href="#转换规则-1" class="headerlink" title="转换规则"></a>转换规则</h2><p><code>Number()</code>：</p><ul><li><p>Boolean 值</p><ul><li><code>true</code> =&gt; <code>1</code></li><li><code>false</code> =&gt; <code>0</code></li></ul></li><li><p><code>null</code> =&gt; <code>0</code></p></li><li><p><code>undefined</code> =&gt; <code>NaN</code></p></li><li><p>String 值</p><ul><li>只包含数字（包含正负号），将其<strong>转换为十进制数值</strong>，忽略前导零 </li><li>包含有效的浮点格式，将其转换为对应的浮点数值，忽略前导零</li><li>包含有效的十六进制格式，将其转换为相同大小的十进制数值</li><li>空字符串 <code>&quot;&quot;</code>，空格 <code>&#39; &#39;</code>，换行符<code>&#39;\n&#39;</code>，制表符<code>&#39;\t&#39;</code> =&gt; <code>&#39;0&#39;</code></li><li>包含其他格式的字符串，则将其转换为 <code>NaN</code></li></ul></li><li><p>Object 值</p><ul><li>调用对象的 <code>toString()</code> 方法，然后依照上面的规则转换返回的字符串</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [普通对象]</span></span><br><span class="line">(&#123;&#125;).toString() =&gt; <span class="string">'[object Object]'</span> =&gt; <span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [数组]</span></span><br><span class="line">[<span class="number">12</span>,<span class="number">23</span>].toString() =&gt; <span class="string">'12, 23'</span> =&gt; <span class="literal">NaN</span></span><br><span class="line">[<span class="number">12</span>].toString() =&gt; <span class="string">'12'</span> =&gt; <span class="number">12</span></span><br><span class="line">[].toString() =&gt; <span class="string">''</span> =&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [正则]</span></span><br><span class="line">/^$/.toString() =&gt; <span class="string">'/^$/'</span> =&gt; <span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [函数]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">a.toString() =&gt; <span class="string">"function a()&#123;&#125;"</span> =&gt; <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><p><code>parseInt()</code>：</p><ul><li>第一个参数必须是字符串，如果不是则转换为字符串，使用 <code>toString()</code> 方法转换为字符串</li><li>忽略前面的空格，直至找到第一个非空字符</li><li>第一个非空字符不是数字字符或者负号，则返回 <code>NaN</code></li><li>空字符串返回 <code>NaN</code></li><li>第一个是数字字符，会继续解析下一个字符，直至遇到非数字字符，返回前面的数字字符</li><li>遇到非数字字符后，后面的字符都是无效的了</li><li>传入第二个参数：转换时使用的基数，即多少进制，就可以解析二进制、八进制、十六进制的字符串。指定了第二个参数的，字符串中甚至不用带前面的前缀，如 <code>parseInt(&quot;AF&quot;, 16);//175</code></li><li>为了避免解析错误，任何情况下都应该明确指定基数，十进制也不例外</li></ul><p><code>parseFloat()</code>：</p><ul><li>第一个参数必须是字符串，如果不是则转换为字符串，使用 <code>String()</code> 方法</li><li>字符串中第一个小数点有效，第二个无效</li><li>空字符串返回 <code>NaN</code></li><li>始终忽略前导零</li><li>只要遇到非浮点字符或者第二个小数点，后面的字符串都无效</li><li>字符串解析为整数，那么返回整数</li></ul><h1 id="3-String-转换"><a href="#3-String-转换" class="headerlink" title="3. String 转换"></a>3. String 转换</h1><h2 id="转换情况-2"><a href="#转换情况-2" class="headerlink" title="转换情况"></a>转换情况</h2><ul><li>基于 <code>alert / confirm / prompt / document.write</code> 等方法输出内容</li><li>调用 <code>toString()</code> 、<code>String()</code></li><li>加号操作符，有一个是字符串时，内部调用 <code>toString()</code></li><li>对象转换成 Number 类型时，内部调用 <code>toString()</code></li></ul><h2 id="转换规则-2"><a href="#转换规则-2" class="headerlink" title="转换规则"></a>转换规则</h2><p><code>toString()</code> 方法</p><ul><li>返回相应值的字符串表现</li><li>数值、布尔值、对象和字符串值都有一个 <code>toString()</code> 方法</li><li>字符串的 <code>toString()</code> 方法返回字符串的一个副本</li><li><code>null</code> =&gt; <code>&quot;null&quot;</code></li><li><code>undefined</code> =&gt; <code>&quot;undefined&quot;</code></li><li><code>NaN</code> =&gt; <code>&#39;NaN&#39;</code></li><li><code>true</code> =&gt; <code>&#39;true&#39;</code>，<code>false</code> =&gt; <code>&#39;false&#39;</code></li><li>普通对象只能返回 <code>[object Object]</code>，不能返回字符串形式</li><li>数组 <code>[]</code> =&gt; <code>&#39;&#39;</code>，<code>[12, 23]</code> =&gt; <code>&#39;12,23&#39;</code></li><li>正则、日期等对象都返回其字符串表现</li></ul><p><code>String()</code> 转型函数，你可以认为 <code>String</code> 和 <code>toString</code> 转换机制是一样的。</p><h1 id="4-特殊转换"><a href="#4-特殊转换" class="headerlink" title="4. 特殊转换"></a>4. 特殊转换</h1><p><strong>+ 号操作的特殊情况</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虽然没有看到字符串，但是引用类型转换为数字时，会先转换为字符串，这样就变成了字符串拼接</span></span><br><span class="line">[<span class="number">12</span>] + <span class="number">10</span> <span class="comment">//=&gt; "1210"</span></span><br><span class="line">(&#123;&#125;) + <span class="number">10</span> <span class="comment">//=&gt; '[object Object]10'</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; + <span class="number">10</span> <span class="comment">//=&gt; 10</span></span><br><span class="line"><span class="comment">//=&gt; 原因是 &#123;&#125; 会被解析为代码块，最后只是操作了 +10 </span></span><br><span class="line"></span><br><span class="line">&#123;&#125; + &#123;&#125; <span class="comment">//=&gt; '[object Object][object Object]'</span></span><br><span class="line"><span class="comment">//=&gt; 非常特殊，不同浏览器解析有差异</span></span><br><span class="line"></span><br><span class="line">(&#123;&#125;)+&#123;&#125; <span class="comment">//=&gt; '[object Object][object Object]'</span></span><br><span class="line">&#123;&#125; + (&#123;&#125;) <span class="comment">//=&gt; NaN</span></span><br><span class="line"><span class="comment">//=&gt; 一行中开头的 &#123;&#125; 才会被解析为代码块，所以用 () 包裹后可以避免被解析为代码块，一行后面的 &#123;&#125; 不会被解析为代码块，而是空对象。</span></span><br></pre></td></tr></table></figure></p><p><strong>== 进行比较时</strong><br>对象 == 对象：地址相等才相等<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#125; == &#123;&#125; <span class="comment">//=&gt; false</span></span><br><span class="line">[] == [] <span class="comment">//=&gt;false</span></span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">'xxx'</span>&#125; == &#123;<span class="attr">name</span>: <span class="string">'xxx'</span>&#125; <span class="comment">//=&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1 == obj2 <span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure></p><p>对象 == 数字：把对象转换为数字<br>对象 == 布尔：都转化为数字<br>字符串 == 数字：把字符串转换为数字<br>字符串 == 布尔：都转化为数字<br>布尔 == 数字：把布尔转换为数字<br>对象 == 字符串：把对象转换为字符串之后再比较</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>==<span class="literal">true</span> <span class="comment">//=&gt; true</span></span><br><span class="line"><span class="number">1</span>==<span class="literal">false</span> <span class="comment">//=&gt; false</span></span><br><span class="line"><span class="number">2</span>==<span class="literal">true</span> <span class="comment">//=&gt; false，都转化为数字</span></span><br><span class="line"></span><br><span class="line">[]==<span class="literal">false</span> <span class="comment">//=&gt; true，都转换为数字</span></span><br><span class="line">[]==<span class="literal">true</span> <span class="comment">//=&gt; false，都转换为数字</span></span><br><span class="line">![]==<span class="literal">false</span> <span class="comment">//=&gt; true，先算 ![] 为 false，再比较</span></span><br><span class="line">![]==<span class="literal">true</span> <span class="comment">//=&gt; false，先算 ![] 为 false，再比较</span></span><br><span class="line">[]==![] <span class="comment">//=&gt; true，先算 ![] 为 false，然后都转换为数字再比较</span></span><br></pre></td></tr></table></figure><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;JS 令人头疼的一点就是它属于弱类型语言，一个变量存储的值可以是字符串、数值、布尔值或者对象等，可以随时变更。获取一个变量，你不会知道其存储的值是什么类型的，所以很多时候都需要进行类型检测。&lt;/p&gt;
&lt;p&gt;除了手动变更类型之外，有些情况下，JS 内部也会自动进行类型转换，以满足部分操作符以及语句等的执行。&lt;/p&gt;
&lt;p&gt;下面就是我对 JS 类型转换的一些总结，其中大部分来自《JavaScript 高级程序设计》这本书。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://destinytaoer.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>编码规范（二）CSS</title>
    <link href="http://destinytaoer.cn//posts/cc36fdab/"/>
    <id>http://destinytaoer.cn//posts/cc36fdab/</id>
    <published>2017-10-26T01:34:18.000Z</published>
    <updated>2018-08-06T09:37:34.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>统一的编码规范，有助于编写高质量、可读性强、易于维护的代码。</p><p>CSS 代码的编写，应该尽量简洁、高性能、高可维护性，达到三者的一个最佳平衡。不能为了简洁牺牲可维护性。</p><blockquote><p>本文引自：<a href="http://codeguide.bootcss.com/#html-syntax" target="_blank" rel="noopener">编码规范 by @mdo</a></p><p><strong>黄金定律</strong><br>不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。</p></blockquote><a id="more"></a><h2 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h2><ul><li>用两个空格来代替 tab</li><li>单独的选择器单独放在一行</li><li>左花括号前添加一个空格</li><li>声明块的右花括号应当单独成行</li><li><code>:</code> 后插入一个空格</li><li>每条声明都应该独占一行</li><li>所有声明语句都应当以分号结尾</li><li>以逗号分隔的属性值，逗号后面插入一个空格</li><li>不要在 <code>rgb()</code>、<code>rgba()</code>、<code>hsl()</code>、<code>hsla()</code> 或 <code>rect()</code> 值的内部的逗号后面插入空格。这样利于从多个属性值（既加逗号也加空格）中区分多个颜色值（只加逗号，不加空格）。</li><li><code>.5</code> 代替 <code>0.5</code>；<code>-.5px</code> 代替 <code>-0.5px</code></li><li>十六进制值应该全部小写</li><li>尽量使用简写形式的十六进制值</li><li>为选择器中的属性添加双引号</li><li>避免为 0 值指定单位</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>, <span class="selector-class">.selector-secondary</span>, <span class="selector-class">.selector</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#CCC</span>,inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#FFFFFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good CSS */</span></span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.selector-secondary</span>,</span><br><span class="line"><span class="selector-class">.selector</span><span class="selector-attr">[type="text"]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#ccc</span>, inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、属性声明"><a href="#二、属性声明" class="headerlink" title="二、属性声明"></a>二、属性声明</h3><h3 id="2-1-顺序"><a href="#2-1-顺序" class="headerlink" title="2.1 顺序"></a>2.1 顺序</h3><p>相关的属性声明应当归为一组，并按照下面的顺序排列：</p><ul><li>定位</li><li>盒模型</li><li>版式</li><li>视觉</li></ul><p>由于定位可以从正常的文档流中移除元素，并且还能覆盖盒模型相关的样式，因此排在首位。盒模型排在第二位，因为它决定了组件的尺寸和位置。</p><p>其他属性只是影响组件的内部或者是不影响前两组属性，因此排在后面。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line">  <span class="comment">/* 定位 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 盒模型 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 版式 */</span></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">"Helvetica Neue"</span>, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 视觉 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#000</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 杂项 */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-简写形式的属性声明"><a href="#2-2-简写形式的属性声明" class="headerlink" title="2.2 简写形式的属性声明"></a>2.2 简写形式的属性声明</h3><p>在需要显示地设置所有值的情况下，应当<strong>尽量限制</strong>使用简写形式的属性声明。</p><ul><li>padding</li><li>margin</li><li>font</li><li>background</li><li>border</li><li>border-radius</li></ul><p>大部分情况下，我们不需要为简写形式的属性声明指定所有值。例如 <code>header</code> 元素只需要设置上、下边距的值，因此，在必要的时候，只需覆盖这两个值就可以。</p><p>过度使用简写形式的属性声明</p><ul><li>导致代码混乱</li><li>对属性值带来不必要的覆盖从而引起意外的副作用</li><li>重新的渲染造成浏览器资源的消耗</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"image.jpg"</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"image.jpg"</span>);</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-带前缀的属性"><a href="#2-3-带前缀的属性" class="headerlink" title="2.3 带前缀的属性"></a>2.3 带前缀的属性</h3><p>当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Prefixed properties */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,0,0,.15);</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,0,0,.15);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-4-单行规则声明"><a href="#2-4-单行规则声明" class="headerlink" title="2.4 单行规则声明"></a>2.4 单行规则声明</h3><p>对于只包含一条声明的样式，为了易读性和便于快速编辑，建议将语句放在同一行。对于带有多条声明的样式，还是应当将声明分为多行。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Single declarations on one line */</span></span><br><span class="line"><span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple declarations, one per line */</span></span><br><span class="line"><span class="selector-class">.sprite</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../img/sprite.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-5-媒体查询（Media-query）的位置"><a href="#2-5-媒体查询（Media-query）的位置" class="headerlink" title="2.5 媒体查询（Media query）的位置"></a>2.5 媒体查询（Media query）的位置</h3><p>将媒体查询尽可能<strong>放在相关规则的附近</strong>。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。</p><h2 id="三、class-命名"><a href="#三、class-命名" class="headerlink" title="三、class 命名"></a>三、class 命名</h2><ul><li>class 名称中只能出现小写字符和破折号，破折号应当用于相关 class 的命名</li><li>避免过度任意的简写</li><li>class 名称应当尽可能短，并且意义明确</li><li>使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式的名称</li><li>基于最近的父 class 或基本 class 作为新 class 的前缀</li><li>使用 <code>.js-*</code> class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中</li></ul><h2 id="四、选择器"><a href="#四、选择器" class="headerlink" title="四、选择器"></a>四、选择器</h2><ul><li>对于通用元素使用 class ，这样利于渲染性能的优化。</li><li>对于经常出现的组件，避免使用属性选择器</li><li>选择器要尽可能短，并且尽量限制组成选择器的元素个数，建议不要超过 3 </li><li>只有在必要的时候才将 class 限制在最近的父元素内（也就是后代选择器）</li></ul><h2 id="五、代码组织"><a href="#五、代码组织" class="headerlink" title="五、代码组织"></a>五、代码组织</h2><ul><li>以组件为单位组织代码段</li><li>制定一致的注释规范</li><li>使用一致的空白符将代码分隔成块，这样利于扫描较大的文档</li><li>如果使用了多个 CSS 文件，将其按照组件而非页面的形式分拆，因为页面会被重组，而组件只会被移动</li></ul><h3 id="5-1-不要使用原生-import"><a href="#5-1-不要使用原生-import" class="headerlink" title="5.1 不要使用原生 @import"></a>5.1 不要使用原生 @import</h3><p>与 <code>&lt;link&gt;</code> 标签相比，<code>@import</code> 指令要慢很多，不光增加了额外的请求次数，还会导致不可预料的问题。</p><ul><li>使用 Sass 或 Less 等 CSS 预处理器的 <code>@import</code> 指令，将多个 CSS 文件编译为一个文件</li><li>通过 Rails、Jekyll 或其他系统中提供过 CSS 文件合并功能</li></ul><h2 id="六、注释"><a href="#六、注释" class="headerlink" title="六、注释"></a>六、注释</h2><p>确保你的代码能够自描述、注释良好并且易于他人理解，可以很大程度地提高可维护性。</p><p>好的代码注释能够传达<strong>上下文关系</strong>和<strong>代码目的</strong>。不要简单地重申组件或 class 名称。</p><p>对于较长的注释，务必书写完整的句子；对于一般性注解，可以书写简洁的短语。</p><h2 id="八、Less-和-Sass"><a href="#八、Less-和-Sass" class="headerlink" title="八、Less 和 Sass"></a>八、Less 和 Sass</h2><h3 id="8-1-操作符"><a href="#8-1-操作符" class="headerlink" title="8.1 操作符"></a>8.1 操作符</h3><p>为了提高可读性，在圆括号中的数学计算表达式的数值、变量和操作符之间均添加一个空格。</p><h3 id="8-2-嵌套"><a href="#8-2-嵌套" class="headerlink" title="8.2 嵌套"></a>8.2 嵌套</h3><p>避免不必要的嵌套。这是因为虽然你可以使用嵌套，但是并不意味着应该使用嵌套。只有在必须将样式限制在父元素内（也就是后代选择器），并且存在多个需要嵌套的元素时才使用嵌套。</p><h2 id="九、编辑器配置"><a href="#九、编辑器配置" class="headerlink" title="九、编辑器配置"></a>九、编辑器配置</h2><p>将你的编辑器按照下面的配置进行设置，以避免常见的代码不一致和差异：</p><ul><li>用两个空格代替制表符（soft-tab 即用空格代表 tab 符）。</li><li>保存文件时，删除尾部的空白符。</li><li>设置文件编码为 UTF-8。</li><li>在文件结尾添加一个空白行。</li></ul><p>将这些配置信息添加到项目的 <code>.editorconfig</code> 文件中</p><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;统一的编码规范，有助于编写高质量、可读性强、易于维护的代码。&lt;/p&gt;
&lt;p&gt;CSS 代码的编写，应该尽量简洁、高性能、高可维护性，达到三者的一个最佳平衡。不能为了简洁牺牲可维护性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文引自：&lt;a href=&quot;http://codeguide.bootcss.com/#html-syntax&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;编码规范 by @mdo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;黄金定律&lt;/strong&gt;&lt;br&gt;不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>编码规范 （一）HTML</title>
    <link href="http://destinytaoer.cn//posts/22d73100/"/>
    <id>http://destinytaoer.cn//posts/22d73100/</id>
    <published>2017-10-25T15:46:05.000Z</published>
    <updated>2018-08-06T09:37:34.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>统一的编码规范，有助于编写高质量、稳定、可维护的代码。</p><blockquote><p>本文引自：<a href="http://codeguide.bootcss.com/#html-syntax" target="_blank" rel="noopener">编码规范 by @mdo</a></p><p><strong>黄金定律</strong><br>不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。</p><p><strong>实用为王</strong><br>尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。</p></blockquote><a id="more"></a><h1 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h1><ul><li>使用两个空格来代替制表符</li><li>嵌套元素应当缩进一次（即两个空格）</li><li>对于属性的定义，确保全部使用双引号，绝不要使用单引号。</li><li>不要在自闭合元素的尾部添加斜线 </li><li>不要省略可选的结束标签</li></ul><h1 id="二、HTML5-doctype"><a href="#二、HTML5-doctype" class="headerlink" title="二、HTML5 doctype"></a>二、HTML5 doctype</h1><p>为每个 HTML 页面的第一行添加标准模式的声明，这样能够确保在每个浏览器中拥有一致的展现。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="三、语言属性"><a href="#三、语言属性" class="headerlink" title="三、语言属性"></a>三、语言属性</h1><p>强烈建议为 html 根元素指定 <code>lang</code> 属性，从而为文档设置正确的语言。这将有助于语音合成工具确定其所应该采用的发音，有助于翻译工具确定其翻译时所应遵守的规则等等。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-us"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="四、IE-兼容模式"><a href="#四、IE-兼容模式" class="headerlink" title="四、IE 兼容模式"></a>四、IE 兼容模式</h1><p>IE 支持通过特定的 <code>&lt;meta&gt;</code> 标签来确定绘制当前页面所应该采用的 IE 版本。除非有强烈的特殊需求，否则最好是设置为 <code>edge mode</code>，从而通知 IE 采用其所支持的最新的模式。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="五、字符编码"><a href="#五、字符编码" class="headerlink" title="五、字符编码"></a>五、字符编码</h1><p>通过明确声明字符编码，能够确保浏览器快速并容易的判断页面内容的渲染方式。这样做的好处是，可以避免在 HTML 中使用字符实体标记，从而全部与文档编码一致（一般采用 UTF-8 编码）。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="六、引入-CSS-和-JavaScript-文件"><a href="#六、引入-CSS-和-JavaScript-文件" class="headerlink" title="六、引入 CSS 和 JavaScript 文件"></a>六、引入 CSS 和 JavaScript 文件</h1><p>根据 HTML5 规范，在引入 CSS 和 JavaScript 文件时一般不需要指定 <code>type</code> 属性，因为 <code>text/css</code> 和 <code>text/javascript</code> 分别是它们的默认值。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- link --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"code-guide.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- script --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"code-guide.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="七、属性顺序"><a href="#七、属性顺序" class="headerlink" title="七、属性顺序"></a>七、属性顺序</h1><p>HTML 属性应当按照以下给出的顺序依次排列，确保代码的易读性。</p><ul><li>class</li><li>id, name</li><li>data-*</li><li>src, for, type, href, value</li><li>title, alt</li><li>role, aria-*</li></ul><p>class 用于标识高度可复用组件，因此应该排在首位。id 用于标识具体组件，应当谨慎使用，因此排在第二位。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"..."</span> <span class="attr">id</span>=<span class="string">"..."</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">![](...)</span><br></pre></td></tr></table></figure></p><h1 id="八、布尔型属性"><a href="#八、布尔型属性" class="headerlink" title="八、布尔型属性"></a>八、布尔型属性</h1><p>布尔型属性可以在声明时不赋值，直接写属性名认为是 <code>true</code>，不写认为是 <code>false</code>。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">selected</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="九、减少标签的数量"><a href="#九、减少标签的数量" class="headerlink" title="九、减少标签的数量"></a>九、减少标签的数量</h1><p>编写 HTML 代码时，尽量避免多余的父元素。很多时候，这需要迭代和重构来实现。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一般 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">  ![](...)</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 更好 --&gt;</span></span><br><span class="line">![](...)</span><br></pre></td></tr></table></figure></p><h1 id="十、尽量避免使用-JavaScript-生成的标签"><a href="#十、尽量避免使用-JavaScript-生成的标签" class="headerlink" title="十、尽量避免使用 JavaScript 生成的标签"></a>十、尽量避免使用 JavaScript 生成的标签</h1><p>通过 JavaScript 生成的标签让内容变得不易查找、编辑，对搜索引擎不友好，并且降低性能。能避免时尽量避免。</p><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;统一的编码规范，有助于编写高质量、稳定、可维护的代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文引自：&lt;a href=&quot;http://codeguide.bootcss.com/#html-syntax&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;编码规范 by @mdo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;黄金定律&lt;/strong&gt;&lt;br&gt;不管有多少人共同参与同一项目，一定要确保每一行代码都像是同一个人编写的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实用为王&lt;/strong&gt;&lt;br&gt;尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://destinytaoer.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>浅谈响应式</title>
    <link href="http://destinytaoer.cn//posts/80fe0eaf/"/>
    <id>http://destinytaoer.cn//posts/80fe0eaf/</id>
    <published>2017-10-23T04:53:32.000Z</published>
    <updated>2018-08-06T09:37:33.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-0bccc01773c0db29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由于移动设备的增多，携带便利，人们在移动设备上浏览网页的时间不断增加，甚至要超过PC端。但是PC端的网页放到移动端，就会出现各种问题，如字体太小、图片不清晰等。浏览体验变得很差。于是，就有了响应式网页的诞生。在多种设备的不同尺寸的屏幕上，精巧设计和制作出最佳视觉体验的网页。</p><p>下面，就跟大家分享一下如何做一个响应式的网页。</p><blockquote><p>我学习响应式时做的网页：<a href="https://destiny0904.github.io/Responsive" target="_blank" rel="noopener">理财网站</a></p></blockquote><a id="more"></a><h1 id="一、如何做响应式"><a href="#一、如何做响应式" class="headerlink" title="一、如何做响应式"></a>一、如何做响应式</h1><ol><li><p>网页元素的尺寸和字体大小在不同尺寸的屏幕显示<strong>不同大小</strong>，以达到最<strong>舒适</strong>的效果；</p></li><li><p>网页内容的信息内容在大尺寸屏幕中被全部显示出来，尽可能充实页面，而在小尺寸屏幕里则部分<strong>隐藏</strong>起来，通过用户的<strong>触控</strong>再把被隐藏的信息呈现出来；</p></li><li><p>网页信息在大屏幕中以多列形式展现，小屏幕中逐渐<strong>减少列数</strong>，直到变为满屏；</p></li><li><p>网页图片在不同屏幕下不失真，<strong>保持比例和清晰度</strong>。</p></li></ol><h1 id="二、设置viewport以及各种兼容设置"><a href="#二、设置viewport以及各种兼容设置" class="headerlink" title="二、设置viewport以及各种兼容设置"></a>二、设置viewport以及各种兼容设置</h1><h2 id="2-1-设置-viewport"><a href="#2-1-设置-viewport" class="headerlink" title="2.1 设置 viewport"></a>2.1 设置 viewport</h2><p>页面宽度设置为设备宽度，初始缩放比例为100%<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>页面宽度设置为设备宽度，初始缩放比例为100%，最大、最小缩放为100%，用户不允许缩放，只能滚动<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1,maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>一般设置第一种，还有其他情况应该根据需要设置</p></blockquote><h2 id="2-2-对IE浏览器的优化和兼容性"><a href="#2-2-对IE浏览器的优化和兼容性" class="headerlink" title="2.2 对IE浏览器的优化和兼容性"></a>2.2 对IE浏览器的优化和兼容性</h2><p>告诉IE浏览器以尽可能高的仿真版本显示该网页，建议使用<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag"><span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>下面两个插件用于在IE8以及以下版本浏览器支持HTML5元素和媒体查询，如果不需要用可以移除<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script</span></span><br><span class="line"><span class="comment">src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;script</span></span><br><span class="line"><span class="comment">src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><p>由于响应式网页面向的更多是移动设备，大多数不会使用低版本IE等浏览器，可以直接忽略这部分需求，不兼容IE低版本。设置一个条件注释，以提醒低版本用户。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;</span></span><br><span class="line"><span class="comment">    &lt;p class="browserupgrade"&gt;您的浏览器版本老的可笑，请到&lt;a href="http://browsehappy.com/"&gt;这里&lt;/a&gt;更新以获取最佳体验&lt;p&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="三、使用相对单位"><a href="#三、使用相对单位" class="headerlink" title="三、使用相对单位"></a>三、使用相对单位</h1><h2 id="3-1-em"><a href="#3-1-em" class="headerlink" title="3.1 em"></a>3.1 em</h2><p> rem 出现之前，很多人都使用 em 来实现响应式。但是 em 单位是相对父元素的字体大小而改变的，小的改动可能引起其所有子元素的样式改变，需要考虑的因素增多，难易把控。</p><blockquote><p>主要应用于与字体大小有一定关联的样式中，例如 button 按钮的内填充等，这样就可以只通过改变字体大小就得到不失真的按钮，可维护性增强</p></blockquote><h2 id="3-2-rem"><a href="#3-2-rem" class="headerlink" title="3.2 rem"></a>3.2 rem</h2><p>rem 的出现被很多人称为最好的相对单位。</p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>首先设置html的字体大小为 62.5%，在chrome浏览器下有最小字体限制，1rem = 12px，其他都为 10px。这样就很容易使用 rem 作为单位，不需要考虑太多的父子关系等。</p><p>一般情况下，<code>font-size</code> 不使用 rem 单位，还有一些固定大小的元素，适合使用 px</p><blockquote><p><strong>注意</strong>：rem 存在兼容性问题，也就是说，使用 rem 作为单位的话，就不再考虑向下兼容了。</p></blockquote><h3 id="通过-js-控制根字体大小"><a href="#通过-js-控制根字体大小" class="headerlink" title="通过 js 控制根字体大小"></a>通过 js 控制根字体大小</h3><p>一般情况在项目的最前面加载一段 js 来修改 html 的 <code>font-size</code>，针对不同分辨率计算 <code>font-size</code>，监听浏览器更改 html 的 <code>font-size</code>（根据实际情况通过设计稿与当前可视区的大小做一个比例关系，通过这个比例进行缩放处理）。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docEl.style.fontSize = <span class="number">20</span> * (docEl.clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure></p><p>给html设置fontSize大小，其实就是在DOMContentLoaded或者resize变化后调整fontSize的大小，从而调整rem的比值关系。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement,</span><br><span class="line"><span class="comment">//当设备的方向变化（设备横向持或纵向持）此事件被触发。绑定此事件时，</span></span><br><span class="line"><span class="comment">//注意现在当浏览器不支持orientationChange事件的时候我们绑定了resize 事件。</span></span><br><span class="line"><span class="comment">//总的来说就是监听当前窗口的变化，一旦有变化就需要重新设置根字体的值</span></span><br><span class="line"></span><br><span class="line">    resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> :<span class="string">'resize'</span>,</span><br><span class="line"></span><br><span class="line">    recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//设置根字体大小</span></span><br><span class="line">      docEl.style.fontSize = <span class="number">20</span> * (docEl.clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;   </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定浏览器缩放与加载时间</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(resizeEvt, recalc,</span><br><span class="line"><span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,</span><br><span class="line">recalc, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="3-3-百分比"><a href="#3-3-百分比" class="headerlink" title="3.3 百分比"></a>3.3 百分比</h2><p>百分比是响应式布局中最常使用的一个单位之一。因为它是通过比例来控制大小的，能够自适应屏幕宽度，在<strong>布局中最常使用</strong>，但不适合用于具体元素的大小</p><p><strong>总之，这些单位应该灵活的应用，而不是死板的只是用 rem 或者百分比等</strong></p><h1 id="四、媒体查询"><a href="#四、媒体查询" class="headerlink" title="四、媒体查询"></a>四、媒体查询</h1><p><strong>媒体查询是响应式网页的核心</strong>。媒体查询是一个将很多响应式概念和工具连接在一起的粘合剂。这些查询语句都是简单但是功能很强大的，它们允许我们检测设备属性，定义规则，并根据规则等的不同加载不同的CSS属性。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//宽度大于等于 60em</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">60em</span>) &#123;</span><br><span class="line">    <span class="selector-tag">aside</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//宽度小于等于 680px</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">60em</span>) &#123;</span><br><span class="line">    <span class="selector-tag">aside</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//横屏下</span><br><span class="line">@<span class="keyword">media</span> only screen and (orientation: landscape) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>em</code>或<code>rem</code>为单位都是一样的，但是<code>rem</code>有兼容问题，所以用<code>em</code>最为合适</p><p>其主要作用在于改变布局，以及字体大小、元素大小，部分元素的显示隐藏等</p><blockquote><p><strong>注意</strong>：<br>即使响应式网页可以轻松的由媒体查询实现，但是我们在应用中，也应该<strong>尽可能的实现元素自身的响应式</strong>，以减少媒体查询的使用，来减少代码，提高性能。</p><p><strong>参考</strong>：<br><a href="http://www.runoob.com/cssref/css3-pr-mediaquery.html" target="_blank" rel="noopener">CSS3 @media 查询</a><br><a href="https://zhuanlan.zhihu.com/p/26882107" target="_blank" rel="noopener">为响应式web设计创建媒体查询</a></p></blockquote><h1 id="五、弹性图片"><a href="#五、弹性图片" class="headerlink" title="五、弹性图片"></a>五、弹性图片</h1><h2 id="5-1-基本设置"><a href="#5-1-基本设置" class="headerlink" title="5.1 基本设置"></a>5.1 基本设置</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">   max-width：100%；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当有几张图片并排时，同样设置百分比</p><p>当你需要设置<code>px</code>间距时，使用<code>calc()</code>函数计算来合并相对单位和絶対単位以达到响应式</p><h2 id="5-2-背景图片"><a href="#5-2-背景图片" class="headerlink" title="5.2 背景图片"></a>5.2 背景图片</h2><p>背景图片可以<strong>响应调整大小或缩放</strong>。以下是三个不同的方法：</p><ol><li><p><code>background-size</code> 属性设置为 <code>contain</code>, 背景图片将按比例自适应内容区域。图片保持比例不变</p></li><li><p><code>background-size</code> 属性设置为 <code>100% 100%</code> ，背景图片将延展覆盖整个区域</p></li><li><p><code>background-size</code> 属性设置为 <code>cover</code>，则会把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。注意该属性保持了图片的比例因此 背景图像的某些部分无法显示在背景定位区域中</p></li><li><p>设置媒体查询，在不同的屏幕大小使用不同分辨率的图片做背景</p></li></ol><h2 id="5-3-响应式图片"><a href="#5-3-响应式图片" class="headerlink" title="5.3 响应式图片"></a>5.3 响应式图片</h2><p>   <strong>针对不同的分辨率屏幕加载不同分辨率的图片</strong></p><h3 id="1-javascript-或者-服务端的处理"><a href="#1-javascript-或者-服务端的处理" class="headerlink" title="1. javascript 或者 服务端的处理"></a>1. javascript 或者 服务端的处理</h3><p>命令式的实现，通过对屏幕的宽度的判断，来改变图片的地址<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">makeImageResponsive</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = $(<span class="built_in">window</span>).width();</span><br><span class="line">    <span class="keyword">var</span> img = $(<span class="string">'.content img'</span>);</span><br><span class="line">    <span class="keyword">if</span> (width &lt;= <span class="number">480</span>) &#123;</span><br><span class="line">      img.attr(<span class="string">'src'</span>,<span class="string">'img/480.png'</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (width &lt;= <span class="number">800</span>) &#123;</span><br><span class="line">      img.attr(<span class="string">'src'</span>, <span class="string">'img/800.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      img.attr(<span class="string">'src'</span>, <span class="string">'img/1600.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  $(<span class="built_in">window</span>).on(<span class="string">'resize load'</span>,makeImageResponsive);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="2-srcset-配合sizes"><a href="#2-srcset-配合sizes" class="headerlink" title="2. srcset 配合sizes"></a>2. srcset 配合sizes</h3><p>说明式的实现，把几个图片（缩放的图片）的地址声明在<code>img</code>标签中，<strong>让浏览器来决定如何加载</strong></p><p><strong>srcset属性</strong>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：srcset = “图片地址 图片宽度，图片地址 图片宽度”</span><br></pre></td></tr></table></figure></p><p>图片地址与图片宽度以空格隔开，图片宽度格式：<code>480w</code>即宽度<code>480</code>。把所有的图片地址都设置在<code>srcset</code>中。</p><blockquote><p><strong>注意</strong>：</p><p>在dpr为1的设备中，在小屏幕下，逐渐增大屏幕宽度，会加载出不同的图片，但是在加载了大分辨率的图片后，缩小屏幕不会改变图片，仍然使用大分辨率的图片  因为浏览器已经加载了大的图片在缓存中，再加载大的图片不再有网络消耗，浏览器会自行选择最优的处理.</p><p>在dpr为2的设备中，按原理应该在设定宽度除以2的地方加载不同的图片，但是浏览器会在比的临界值高一点的地方加载图片，浏览器会综合考虑来选择图片 </p></blockquote><p>设置 <code>srcset</code>，在图片容器变小时出现 bug，所以要设置 <code>sizes</code></p><p><strong>sizes属性</strong><br>告诉浏览器以什么样的比例来显示图片<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：sizes = “（min-width：800px）800px，100vw”</span><br></pre></td></tr></table></figure></p><ul><li><p>单位可以是<code>px</code>、<code>vw</code>、<code>vh</code>，<code>vw</code>表示视口宽度，<code>vh</code>表示视口高度，<code>100</code>表示百分比</p></li><li><p>前面的表示媒体查询，没有添加媒体查询的表示其他情况，空格隔开后的是在这种情况下图片的<strong>预估宽度</strong></p></li><li><p>图片宽度经常使用计算的形式：<code>calc（100vw – 3em）</code>，100vw是默认值，需要根据图片容器的宽度进行设置</p></li></ul><h3 id="3-picture标签"><a href="#3-picture标签" class="headerlink" title="3. picture标签"></a>3. picture标签</h3><p>夺回部分浏览器自行选择图片的控制权。<br>在需要在小屏幕加载裁剪图片，而在大屏幕中加载宽的图片<br><strong>记住要加入picture.js插件填平兼容性</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 针对媒体查询设置不同大小的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">"(max-width:36em)"</span> <span class="attr">srcset</span>=<span class="string">"img/tiananmen-s.jpg 768w"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 横屏的设置 --&gt;</span>      </span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"img/tiananmen-s.jpg 768w"</span> <span class="attr">media</span>=<span class="string">"(orientation:landscape)"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"img/tiananmen.jpg 1800w"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 针对媒体查询设置多组不同格式的图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span> <span class="attr">srcset</span>=<span class="string">"logo.svg 480w,logo.svg 800w,logo.svg 1600w"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">srcset</span>=<span class="string">"logo.webp 480w,logo-m.webp 800w,logo-l.webp 1600w"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在不兼容 picture 时加载的图片--&gt;</span></span><br><span class="line">![](img/tiananmen.jpg)</span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 浏览器会遍历 <code>picture</code> 里面的 <code>source</code>，找到满足当前环境的 <code>media</code>，把适合的<br> <code>source</code> 里面的 <code>srcset</code> 匹配到 <code>img</code> 里面的 <code>src</code> 中</p><h3 id="4-svg图片"><a href="#4-svg图片" class="headerlink" title="4. svg图片"></a>4. svg图片</h3><p>svg是可缩放的矢量图形，基于可扩展标记语言来生成，可以用任何的文本编辑器来创建。Svg图片怎么缩放都不会失真，因为它不是基于像素的，是基于一定的绘制规则</p><h1 id="六、网格系统"><a href="#六、网格系统" class="headerlink" title="六、网格系统"></a>六、网格系统</h1><h2 id="6-1-什么是网格系统"><a href="#6-1-什么是网格系统" class="headerlink" title="6.1 什么是网格系统?"></a>6.1 什么是网格系统?</h2><p><strong>基于网格设计，按列来布局。</strong>使用网格视图有助于我们设计网页。这让我们向网页添加元素变的更简单。</p><p>响应式网格视图通常是 12 列，宽度为100%，在浏览器窗口大小调整时会自动伸缩。</p><h2 id="6-2-创建响应式网格视图"><a href="#6-2-创建响应式网格视图" class="headerlink" title="6.2 创建响应式网格视图"></a>6.2 创建响应式网格视图</h2><p>首先确保所有的 HTML 元素 <code>box-sizing</code> 设置为 <code>border-box</code>，确保边距和边框包含在元素的宽度和高度间。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>计算每列的百分比: 100% / 12 列 = 8.33%。<br>在每列中指定<code>class=&quot;col-&quot;</code> ，用于定义每列所占的比例 ：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.col-1</span> &#123;<span class="attribute">width</span>: <span class="number">8.33%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-2</span> &#123;<span class="attribute">width</span>: <span class="number">16.66%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-3</span> &#123;<span class="attribute">width</span>: <span class="number">25%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-4</span> &#123;<span class="attribute">width</span>: <span class="number">33.33%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-5</span> &#123;<span class="attribute">width</span>: <span class="number">41.66%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-6</span> &#123;<span class="attribute">width</span>: <span class="number">50%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-7</span> &#123;<span class="attribute">width</span>: <span class="number">58.33%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-8</span> &#123;<span class="attribute">width</span>: <span class="number">66.66%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-9</span> &#123;<span class="attribute">width</span>: <span class="number">75%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-10</span> &#123;<span class="attribute">width</span>: <span class="number">83.33%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-11</span> &#123;<span class="attribute">width</span>: <span class="number">91.66%</span>;&#125;</span><br><span class="line"><span class="selector-class">.col-12</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>所有的列向左浮动，间距(padding) 为 15px：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[class*="col-"]</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加清除浮动：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加媒体查询，使其在不同尺寸的屏幕下，响应式安排列数<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="comment">/* For tablets: */</span></span><br><span class="line">    <span class="selector-class">.col-m-1</span> &#123;<span class="attribute">width</span>: <span class="number">8.33%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-2</span> &#123;<span class="attribute">width</span>: <span class="number">16.66%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-3</span> &#123;<span class="attribute">width</span>: <span class="number">25%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-4</span> &#123;<span class="attribute">width</span>: <span class="number">33.33%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-5</span> &#123;<span class="attribute">width</span>: <span class="number">41.66%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-6</span> &#123;<span class="attribute">width</span>: <span class="number">50%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-7</span> &#123;<span class="attribute">width</span>: <span class="number">58.33%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-8</span> &#123;<span class="attribute">width</span>: <span class="number">66.66%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-9</span> &#123;<span class="attribute">width</span>: <span class="number">75%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-10</span> &#123;<span class="attribute">width</span>: <span class="number">83.33%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-11</span> &#123;<span class="attribute">width</span>: <span class="number">91.66%</span>;&#125;</span><br><span class="line">    <span class="selector-class">.col-m-12</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3 col-m-12"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-9 col-m-12"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="七、Flex弹性布局"><a href="#七、Flex弹性布局" class="headerlink" title="七、Flex弹性布局"></a>七、Flex弹性布局</h1><p>Flex布局是W3C在2009年提出的新方案，可以简便、完整、<strong>响应式</strong>地实现各种页面布局。已经得到所有浏览器的支持。</p><blockquote><p>语法介绍请查看：<a href="http://destinytaoer.cn/2017/10/%E5%85%B3%E4%BA%8EFlex%E5%B8%83%E5%B1%80/">关于Flex布局</a><br><a href="https://github.com/destiny0904/useFlex-grid-system" target="_blank" rel="noopener">使用flex实现的简单网格系统</a></p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="http://web.jobbole.com/84938/" target="_blank" rel="noopener">移动端 h5开发相关内容总结</a><br><a href="https://zhuanlan.zhihu.com/p/26882107" target="_blank" rel="noopener">为响应式web设计创建媒体查询</a><br><a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html" target="_blank" rel="noopener">自适应网页设计</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-0bccc01773c0db29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;由于移动设备的增多，携带便利，人们在移动设备上浏览网页的时间不断增加，甚至要超过PC端。但是PC端的网页放到移动端，就会出现各种问题，如字体太小、图片不清晰等。浏览体验变得很差。于是，就有了响应式网页的诞生。在多种设备的不同尺寸的屏幕上，精巧设计和制作出最佳视觉体验的网页。&lt;/p&gt;
&lt;p&gt;下面，就跟大家分享一下如何做一个响应式的网页。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我学习响应式时做的网页：&lt;a href=&quot;https://destiny0904.github.io/Responsive&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理财网站&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
      <category term="响应式" scheme="http://destinytaoer.cn/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>像素与viewport概念</title>
    <link href="http://destinytaoer.cn//posts/4af0d4fa/"/>
    <id>http://destinytaoer.cn//posts/4af0d4fa/</id>
    <published>2017-10-22T15:00:15.000Z</published>
    <updated>2018-08-06T09:37:34.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习移动端、响应式，首先必须明白的就是像素和viewport的概念，才能搞清楚出现各种情况的原因。</p><p>本文主要介绍物理像素、逻辑像素的概念以及他们之间的关系，viewport的由来以及设置。下面与大家分享。</p><a id="more"></a><h1 id="一、像素的概念"><a href="#一、像素的概念" class="headerlink" title="一、像素的概念"></a>一、像素的概念</h1><ul><li><strong>px</strong> ：逻辑像素 ，浏览器使用的抽象单位</li><li><strong>dp、pt</strong>：物理像素</li><li><strong>dpr</strong>：设备像素缩放比</li><li><strong>ppi</strong>：屏幕每英寸的像素数量，即单位英寸内的像素密度</li></ul><table><thead><tr><th style="text-align:center">ppi</th><th style="text-align:center">120</th><th style="text-align:center">160</th><th style="text-align:center">240</th><th style="text-align:center">320</th></tr></thead><tbody><tr><td style="text-align:center"><strong>dpr</strong></td><td style="text-align:center"><strong>0.75</strong></td><td style="text-align:center"><strong>1.0</strong></td><td style="text-align:center"><strong>1.5</strong></td><td style="text-align:center"><strong>2.0</strong></td></tr></tbody></table><p><strong>ppi 越高，像素数越高，图像越清晰。</strong><br><strong>Retina屏即高清屏，dpr 大于等于 2。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-25570b746afcccd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="二、viewport"><a href="#二、viewport" class="headerlink" title="二、viewport"></a>二、viewport</h1><p>web初期，网页渲染在手机上，会只显示页面的其中一部分。用户需要通过滑动屏幕才能查看网页的全貌。由于用户体验太差，于是浏览器商就引入了 viewport 的概念。</p><h2 id="2-1-手机浏览器的默认行为"><a href="#2-1-手机浏览器的默认行为" class="headerlink" title="2.1 手机浏览器的默认行为"></a>2.1 手机浏览器的默认行为</h2><ul><li>页面默认先渲染在一个980px（ios）或其他的 viewport 里面</li><li>通过缩放，让用户能看到网页的全貌</li></ul><blockquote><p>为什么渲染时，要加入 viewport ？<br>直接渲染在小屏幕会<strong>导致排版布局等的混乱</strong></p></blockquote><h2 id="2-2-viewport-的概念"><a href="#2-2-viewport-的概念" class="headerlink" title="2.2 viewport 的概念"></a>2.2 viewport 的概念</h2><p>两个 viewport ：<strong>视口（visual） viewport </strong>和<strong>布局（layout） viewport</strong></p><ul><li>视口 viewport 就是<strong>用户查看网页的视口</strong>（可以理解为屏幕），可以通过<strong>缩放</strong>来改变其大小</li><li>布局 viewport 就是<strong>网页渲染</strong>的一个底层页面，ios 默认 viewport 为980 px 指的就是布局 viewport</li></ul><blockquote><p>通过调用<code>document.body.clientWidth</code>查看默认布局Viewport<br><code>window.innerWidth</code>查看度量Viewport</p></blockquote><h2 id="2-3-不使用默认布局-viewport-的原因"><a href="#2-3-不使用默认布局-viewport-的原因" class="headerlink" title="2.3 不使用默认布局 viewport 的原因"></a>2.3 不使用默认布局 viewport 的原因</h2><ul><li>不同设备的默认值不同，宽度<strong>不可控制</strong></li><li>缩放后连接可能因为太小不能准确触控，又有滚动，<strong>交互差</strong></li><li>font-size:40px=PC的12px，<strong>不规范</strong></li></ul><h2 id="2-4-设置-viewport"><a href="#2-4-设置-viewport" class="headerlink" title="2.4 设置 viewport"></a>2.4 设置 viewport</h2><p>在 html 中使用元标签<code>meta</code>设置 viewport：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">'viewport'</span> <span class="attr">content</span>=<span class="string">'width=device-width,initial-scale=1,user-scalabel=no'</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><ul><li>width：设置布局viewport的值</li><li>initial-scale：设置页面的初始缩放</li><li>minimum-scale：最少缩放</li><li>maximum-scale：最大缩放</li><li>user-scalable：用户能否缩放 </li></ul><h2 id="最佳设置"><a href="#最佳设置" class="headerlink" title="最佳设置"></a>最佳设置</h2><p>使视口 viewport = 设备宽度 = 布局 viewport</p><ul><li>width = device-width，让布局 viewport 等于设备宽度，也就是说，设置 320px 的元素会铺满 iphone5 的屏幕宽度。</li><li>initial-scale = 1，设置初始缩放比为1，使得缩放比因为网页的大小而改变，让视口 viewport = 布局 viewport</li><li>user-scalable = no，使得视口 viewport = 布局 viewport 保持不变</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>慕课网教程：<a href="http://www.imooc.com/learn/494" target="_blank" rel="noopener">Hello，移动WEB</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;学习移动端、响应式，首先必须明白的就是像素和viewport的概念，才能搞清楚出现各种情况的原因。&lt;/p&gt;
&lt;p&gt;本文主要介绍物理像素、逻辑像素的概念以及他们之间的关系，viewport的由来以及设置。下面与大家分享。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
      <category term="响应式" scheme="http://destinytaoer.cn/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
      <category term="移动端" scheme="http://destinytaoer.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>sass的使用</title>
    <link href="http://destinytaoer.cn//posts/1c539f20/"/>
    <id>http://destinytaoer.cn//posts/1c539f20/</id>
    <published>2017-10-19T13:07:22.000Z</published>
    <updated>2018-08-06T10:43:14.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在介绍之前，请大家先弄清楚下面的问题：</p><ul><li><p><strong>什么是 sass</strong><br>sass 是 css 的预处理器（css preprocessor）</p></li><li><p><strong>为什么使用 sass</strong><br>1、 它能够帮我们更快更高效的编写更好维护的 css 。<br>2、 它自带很多原生 css 没有的功能，如变量（现在 css 中已经实现）、条件语句等</p></li><li><p><strong>如何使用sass</strong><br>1、 <a href="http://www.sasschina.com/install/" target="_blank" rel="noopener">安装 sass</a> ：ruby环境、sass编译<br>2、 sass的语法</p></li></ul><p>下面要介绍的就是 sass 的基本用法。</p><a id="more"></a><h1 id="一、安装和使用"><a href="#一、安装和使用" class="headerlink" title="一、安装和使用"></a>一、安装和使用</h1><h2 id="1-1-安装Ruby"><a href="#1-1-安装Ruby" class="headerlink" title="1.1 安装Ruby"></a>1.1 安装Ruby</h2><p>SASS是 Ruby 语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先<a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">安装Ruby</a></p><h2 id="1-2-安装SASS"><a href="#1-2-安装SASS" class="headerlink" title="1.2 安装SASS"></a>1.2 安装SASS</h2><p>在命令行输入下面的命令（必须先安装Ruby）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　gem install sass</span><br></pre></td></tr></table></figure></p><h2 id="1-3-文件后缀"><a href="#1-3-文件后缀" class="headerlink" title="1.3 文件后缀"></a>1.3 文件后缀</h2><p>sass 有两种后缀名文件：</p><ul><li>一种后缀名为 sass，不使用大括号和分号；</li><li>另一种就是 scss 文件<br>和我们平时写的 css 文件格式差不多，使用大括号和分号。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//文件后缀名为sass的语法</span><br><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="selector-tag">background</span>: <span class="selector-id">#eee</span></span><br><span class="line">  <span class="selector-tag">font-size</span><span class="selector-pseudo">:12px</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">  <span class="selector-tag">background</span>: <span class="selector-id">#0982c1</span></span><br><span class="line"></span><br><span class="line">//文件后缀名为scss的语法  </span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0982c1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在此也建议使用后缀名为 scss 的文件，以避免 sass 后缀名的严格格式要求报错。后面使用的也都是 scss 文件。</p><h2 id="1-4-编译"><a href="#1-4-编译" class="headerlink" title="1.4 编译"></a>1.4 编译</h2><p>在屏幕上显示.scss文件转化的css代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　sass 文件名.scss</span><br></pre></td></tr></table></figure></p><p>编译到 css 文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　sass test.scss test.css</span><br></pre></td></tr></table></figure></p><p>SASS提供四个编译风格的选项：</p><ul><li>nested：嵌套缩进的css代码，它是默认值。</li><li>expanded：没有缩进的、扩展的css代码。</li><li>compact：简洁格式的css代码。</li><li>compressed：压缩后的css代码。</li></ul><p>生产环境当中，一般使用最后一个选项。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　sass --style compressed test.sass test.css</span><br></pre></td></tr></table></figure></p><p>监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　// watch a file</span><br><span class="line">　　sass --watch input.scss:output.css</span><br><span class="line">　　// watch a directory</span><br><span class="line">　　sass --watch app/sass:public/stylesheets</span><br></pre></td></tr></table></figure></p><p>如果你不喜欢用命令行，可以使用：</p><blockquote><p>GUI界面编译工具：<a href="http://koala-app.com/" target="_blank" rel="noopener">koala</a><br>教程：<a href="http://www.w3cplus.com/blog/777.html" target="_blank" rel="noopener">Less/Sass编译工具，koala使用指南</a></p></blockquote><h1 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h1><h2 id="2-1-嵌套规则"><a href="#2-1-嵌套规则" class="headerlink" title="2.1 嵌套规则"></a>2.1 嵌套规则</h2><ul><li><p>选择器嵌套。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//CSS代码</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">　<span class="attribute">color </span>: red;</span><br><span class="line">&#125;</span><br><span class="line">//SASS代码</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　hi &#123;</span><br><span class="line">　　<span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性嵌套</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">　<span class="attribute">border</span>: &#123;</span><br><span class="line">　　color: red;</span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>： <code>border</code>后面必须加上冒号。</p><ul><li>使用&amp;引用父元素<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">　&amp;:hover &#123; color: #ffb3ff; &#125;   //常用写法</span><br><span class="line">    .class &amp; &#123;color:  #fff;&#125;   //在前面加上特殊类或父元素的写法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><ul><li><p>以$开头声明变量</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$blue : #1875e7;　</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　color : $blue;//直接使用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量写在#{}中以镶嵌入字符串</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$side : left;</span><br><span class="line"><span class="selector-class">.rounded</span> &#123;</span><br><span class="line">　border-#&#123;$side&#125;-radius: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量名用中划线分隔<br>sass中变量名的分隔并没有要求，而且使用中划线或下划线，会指向同一个变量。<br>但是，尽量使用中划线来统一规范。</p></li><li><p>变量作用域<br>sass 中变量声明在某个规则块 { } 中，则只能在那个规则块内使用。定义在规则块外的，即此文件都可以使用。一般将变量声明放在文件最前面或者独立一个文件。</p></li><li><p>其他</p><blockquote><p>请参考：<a href="http://www.w3cplus.com/sassguide/syntax.html" target="_blank" rel="noopener">sass语法</a></p></blockquote></li></ul><h2 id="2-3-计算功能"><a href="#2-3-计算功能" class="headerlink" title="2.3 计算功能"></a>2.3 计算功能</h2><p>在代码中使用算式：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">　<span class="attribute">margin</span>: (<span class="number">14px</span>/<span class="number">2</span>);</span><br><span class="line">　<span class="attribute">top</span>: <span class="number">50px</span> + <span class="number">100px</span>;</span><br><span class="line">　<span class="attribute">right</span>: $var * <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>： 除了<code>/</code>之外，其他都应该在符号两边加上空格</p><h2 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h2><p>SASS共有两种注释风格。</p><ul><li>标准的CSS注释 /<em> comment </em>/ ，会保留到编译后的文件。</li><li>单行注释 // comment，只保留在SASS源文件中，编译后被省略。</li></ul><p>在 /* 后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以<strong>用于声明版权信息</strong>。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">　重要注释！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="2-5-导入文件"><a href="#2-5-导入文件" class="headerlink" title="2.5 导入文件"></a>2.5 导入文件</h2><p>@import命令，用来插入外部文件。</p><ul><li><p>scss文件，编译后会合并到同一个 css 文件中</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"path/filename.scss"</span>;</span><br></pre></td></tr></table></figure></li><li><p>css 文件，则等同于 css 的 import 命令，编译后依然是导入文件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"foo.css"</span>;</span><br></pre></td></tr></table></figure></li></ul><p>因为 css 中 import 会导致性能问题，所以一般不使用。</p><h2 id="2-6-继承"><a href="#2-6-继承" class="headerlink" title="2.6 继承"></a>2.6 继承</h2><p>SASS允许一个选择器，继承另一个选择器。使用@extend命令：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">　@extend .class1;</span><br><span class="line">　<span class="selector-tag">font-size</span><span class="selector-pseudo">:120</span>%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-7-mixin"><a href="#2-7-mixin" class="headerlink" title="2.7 mixin"></a>2.7 mixin</h2><p>mixin 有点像C语言的宏（macro），是可以重用的代码块。</p><ul><li><p>使用@mixin命令，定义一个代码块。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> left &#123;</span><br><span class="line">　<span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">　<span class="selector-tag">margin-left</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用@include命令，调用这个mixin。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　@include left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>mixin的强大之处，在于可以指定参数和缺省值。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> left($value: <span class="number">10px</span>) &#123;</span><br><span class="line">　<span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br><span class="line">　margin-right: $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用的时候，根据需要加入参数：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">　@include left(20px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mixin 里面不仅可以定义属性，还可以使用 css 规则，包含选择器等</p><p><strong>注意</strong>：mixin 不能滥用，会导致性能问题。详情请查看<a href="http://www.sasschina.com/" target="_blank" rel="noopener">Sass中文网</a></p><h2 id="2-8-颜色函数"><a href="#2-8-颜色函数" class="headerlink" title="2.8 颜色函数"></a>2.8 颜色函数</h2><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">lighten(#cc3, 10%) // #d6d65c</span><br><span class="line">darken(#cc3, 10%) // #a3a329</span><br><span class="line">grayscale(#cc3) // #808080</span><br><span class="line">complement(#cc3) // #33c</span><br></pre></td></tr></table></figure></p><h1 id="三、高级用法"><a href="#三、高级用法" class="headerlink" title="三、高级用法"></a>三、高级用法</h1><h2 id="3-1-条件语句"><a href="#3-1-条件语句" class="headerlink" title="3.1 条件语句"></a>3.1 条件语句</h2><p>@if可以用来判断：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">　@if 1 + 1 == 2 &#123; border: 1px solid; &#125;</span><br><span class="line">　@<span class="keyword">if</span> <span class="number">5</span> &lt; <span class="number">3</span> &#123; <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">dotted</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配套的还有@else命令：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">if</span> lightness($color) &gt; <span class="number">30%</span> &#123;</span><br><span class="line">　<span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span><br><span class="line">&#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">　<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-2-循环语句"><a href="#3-2-循环语句" class="headerlink" title="3.2 循环语句"></a>3.2 循环语句</h2><p>SASS支持for循环：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">for</span> $i from <span class="number">1</span> to <span class="number">10</span> &#123;</span><br><span class="line">　.border-#&#123;$i&#125; &#123;</span><br><span class="line">　　border: #&#123;$i&#125;px solid blue;</span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也支持while循环：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$i: 6;</span><br><span class="line">@<span class="keyword">while</span> $i &gt; <span class="number">0</span> &#123;</span><br><span class="line">　.item-#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span><br><span class="line">　$i: $i - 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>each命令，作用与for类似：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">each</span> $member in a, b, c, d &#123;</span><br><span class="line">　.#&#123;$member&#125; &#123;</span><br><span class="line">　　background-image: url("/image/#&#123;$member&#125;.jpg");</span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-自定义函数"><a href="#3-3-自定义函数" class="headerlink" title="3.3 自定义函数"></a>3.3 自定义函数</h2><p>SASS允许用户编写自己的函数。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">function</span> double($n) &#123;</span><br><span class="line">　@<span class="keyword">return</span> $n * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">　<span class="attribute">width</span>: <span class="built_in">double</span>(5px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="http://www.sasschina.com/" target="_blank" rel="noopener">Sass中文网</a><br><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">Sass用法指南</a><br><a href="http://www.w3cplus.com/sassguide/syntax.html" target="_blank" rel="noopener">Sass Guide</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在介绍之前，请大家先弄清楚下面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;什么是 sass&lt;/strong&gt;&lt;br&gt;sass 是 css 的预处理器（css preprocessor）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;为什么使用 sass&lt;/strong&gt;&lt;br&gt;1、 它能够帮我们更快更高效的编写更好维护的 css 。&lt;br&gt;2、 它自带很多原生 css 没有的功能，如变量（现在 css 中已经实现）、条件语句等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如何使用sass&lt;/strong&gt;&lt;br&gt;1、 &lt;a href=&quot;http://www.sasschina.com/install/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装 sass&lt;/a&gt; ：ruby环境、sass编译&lt;br&gt;2、 sass的语法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面要介绍的就是 sass 的基本用法。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="sass" scheme="http://destinytaoer.cn/tags/sass/"/>
    
      <category term="css预处理器" scheme="http://destinytaoer.cn/tags/css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>说说CSS学习中的瓶颈</title>
    <link href="http://destinytaoer.cn//posts/86591ac9/"/>
    <id>http://destinytaoer.cn//posts/86591ac9/</id>
    <published>2017-10-19T02:45:27.000Z</published>
    <updated>2018-08-06T09:37:34.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是在自己重新开始学习CSS的过程中看到的，与其说它是讲<strong>如何深入学习CSS</strong>，更多的是<strong>警醒的作用</strong>，看了文章之后，才真正认清自己的浮躁，也庆幸自己回头恶补。本文不涉及技术，但是希望大家都能看一看。</p><a id="more"></a><h1 id="0-写在前面"><a href="#0-写在前面" class="headerlink" title="0 写在前面"></a>0 写在前面</h1><p>虽已数年，但未就学习专门写过文章，这回破处了。苍蝇不叮没有缝隙的鸡蛋，领导不做没有跟拍的表演，同样，想到写CSS学习的文章也是有原因的（虽然我的不少行为没有原因）。</p><p>情景再现（尊重隐私，下面故事中人名均为化名，有加工）：</p><blockquote><p>如月姑娘（本届D2上微博中奖上台最漂亮的那位）的内部分享会——关于CSS3 background相关内容<br>……一顿巴拉巴拉……<br><strong>如月</strong>：假设背景图片500px<em>500px，则应用background-size:50%后，显示的背景图片大小就是250px</em>250px<br><strong>三晶</strong>：咔！不对吧！……CSS中的所有百分比都是相对于父级元素的，不会是自身……<br><strong>仁力</strong>：是啊，50%应该相对的是容器指定类型的box的尺寸<br>…………又巴拉巴拉百分比值相关东西……<br><strong>如月</strong>：哦，教我们网页的那个老师让我们line-height使用百分比形式，说这样更好，行高自适应~~<br><strong>三晶</strong>：咔！我信了你老师的邪！<strong>百分比行高并不具有自适应性</strong>，除非使用该死低效的*通配符……</p></blockquote><p>上面场景剧情可以总结为：“一个百分号认识所引发的讨论”，然后，引发的后续剧情就是：“一个百分号讨论所引发的写文章的冲动”。</p><p>“冲动”在何处？在于我似乎看到了很多人都正面对的，但同时自己并未意识到的学习瓶颈。当然，所谓瓶颈<strong>并不是你不能够</strong>搞明白line-height:150%和line-height:1.5的区别，而是你没有意识到要搞明白。</p><p>这就是我多次提到的：<strong>想法、意识远比技术本身更有传授的价值！</strong></p><h1 id="1-何为瓶颈？"><a href="#1-何为瓶颈？" class="headerlink" title="1 何为瓶颈？"></a>1 何为瓶颈？</h1><p>“瓶颈”指瓶子的颈部，相对狭窄。这是很传神的一个词。<br>因为狭窄，因此<strong>难以突破</strong>；</p><p>但是，<strong>一旦突破了</strong>，就是广阔天空（偌大瓶身）！</p><p>小弟不才，凑合画了个瓶颈示意图，如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-d35dc28ab525743f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图中，A → B → C → … 表示进阶，即相关技能的提升；<strong>①②③④则表示各个阶段要进入的瓶颈</strong>！这个适用于各行业，各学派。</p><p><strong>杨过的武功学习与瓶颈</strong></p><p>我们都看过《神雕侠侣》，为便于理解，我就以“神雕大侠”杨过的武功成长经历解释上图的含义：</p><p><strong>各进阶阶段</strong></p><ul><li><p>阶段A<br>武功杂：蛤蟆功，玉女剑，打狗棒，弹指神通</p></li><li><p>阶段B<br>武功一流：整天蛇胆嗑药，玄武重剑</p></li><li><p>阶段C<br>武功顶尖：勤学苦练，木剑之术；自创神功，黯然销魂掌</p></li></ul><p><strong>各阶段瓶颈</strong></p><ul><li><p>瓶颈①<br><strong>无压力</strong>：天资聪慧+主角光环，因此，一些杂七杂八功夫入门迅速</p></li><li><p>瓶颈②<br><strong>雕兄</strong>：该瓶颈突破全靠雕兄。蛇胆嗑药治伤增内力，武功引导与陪练</p></li><li><p>瓶颈③<br><strong>自身</strong>：海边多年苦练，内功积累。自身观点想法转变（武功都是人创造的，我也可以……），自创掌法</p></li><li><p>瓶颈④<br><strong>小龙女</strong>：野史外传，小龙女一起阴阳之类，神一般的存在……</p></li></ul><p>您可以对照您目前CSS或JS的学习，您觉得您目前突破的几个学习瓶颈，<strong>目前在第几阶段？</strong></p><h1 id="2-只缘身在此山中"><a href="#2-只缘身在此山中" class="headerlink" title="2 只缘身在此山中"></a>2 只缘身在此山中</h1><p>CSS的学习入门很容易。</p><p>也可以说CSS学习的第①个瓶颈很大（见上图①处瓶口），以至于不能称为“瓶颈”。可能只要1年甚至半年的时候，我们就能根据设计图迅速成型页面，能熟练使用些CSS hack，这个阶段我们的成长很快，只要有页面写或只要四处转转，我们每天都能汲取新知识。如果用二维曲线表示就是：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-9d78f6a6574702fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>满瓶不动半瓶摇，这个阶段实际上是CSS非常初级的阶段，也是广大页面仔们最为浮躁，最自以为是，最觉得CSS不过如此的阶段！所学越多越知所知甚少，那些成天叫嚣的人往往半吊子居多。</p><p>所以，我这里有必要提个醒，睡在冻床上不知冷热的“牛人”们，小看CSS的结果就是你丫直接在高速公路上被淹死！</p><p>不过，大多数这个阶段的同行们都清楚，自己还有很多东西要学的。但问题在于，每天也努力工作了，也去花时间学习了，<strong>只是似乎只是纯粹经验的积累，没有学到多少实质性的东西</strong>。这就是学习的瓶颈！</p><p>拿“如月”同学举例：工作是很认真的，页面也是能写的，前端书籍也买了很多，技术博客也会逛，前端技术论坛也参加。但是最后的效果呢？在我看来，还是那个层次，没有实质性的提高！<strong>为什么呢？</strong></p><p>泛泛的经验积累式学习，看不到自己技术的瓶颈所在，总在同一层次添砖加瓦。就跟杨过的A阶段一样，总是不停地学习新功夫，但都<strong>不是很深入很牛逼</strong>，结果，连对付霍都都吃力。</p><h2 id="广度与深度"><a href="#广度与深度" class="headerlink" title="广度与深度"></a>广度与深度</h2><p>任何一门学科都有其广度以及深度。在CSS的A级阶段，显然所学基本上是扩展自己知识面的广度：各个CSS属性熟悉，各个基本盒模型，各个声明在不同浏览器下的表现熟悉，兼容性问题如何修复熟悉等。</p><p>然而，CSS的属性就那么多，如果只从了解每个CSS属性名称、属性值上来看，肯定会有一天达到饱和的。</p><p>此时，我们就会觉得似乎没有什么新的东西可学了，CSS的那点东西我都知道了；<strong>似乎工作就成了每天的重复</strong>。这就是瓶颈期！</p><p>看看这张图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-8568025d96c11b26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们很自然想到，要从A到B阶段，只要向下，向深度发展就可以了。所以，如果您觉得现在CSS这块学到的东西不多了，试试<strong>向垂直方向学习</strong>。</p><p>补充：有时候，如果我们CSS的基础足够得扎实与强大，我们会自热而然进入到B阶段，但这种完全经验积累的进阶学习需要很长的时间周期。如果没有一定的CSS基础以及经验做支撑，我们是无法进入B阶段的。深度才是你的核心竞争力。深入的细节掌握，深入的机制理解等，这些都是要下苦功才能掌握的，这是你有别于其他千千万万自认为会写页面的CSSer们的地方！</p><h2 id="瓶口间的跳跃"><a href="#瓶口间的跳跃" class="headerlink" title="瓶口间的跳跃"></a>瓶口间的跳跃</h2><p>CSS3的出现似乎让一些CSSer们的学习有了新的方向：CSS2.1中的那些CSS代码我闭着眼睛都能敲出来，实在太无趣了，终于出来个小三 – CSS3来调剂生活！</p><p>然而，<strong>从CSS2到CSS3</strong>的学习增加的只是一点广度的知识，多点时间，谁都可以达到你这种程度（学习门槛低啊！）。在我看来，无非就是从一个瓶口跳到另外一个稍显时髦的瓶口而已。</p><h2 id="视角的局限"><a href="#视角的局限" class="headerlink" title="视角的局限"></a>视角的局限</h2><p>武侠中，主角们的进阶似乎都离不开所谓的“高人指点”；就算现实生活中，我们的人生也可能因为一句话而发生重大改变。那“指点”的是什么呢？</p><p>“改变”的又是什么呢？——<strong>看待问题的方式以及角度</strong>！据说阿里有个倒立文化，换个视角看问题，会得到不同的答案。</p><p>我们很多人找不到学习的突破口，可能就是由于视角的问题。</p><p>我们往往不是这样子看的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-49bf69602f15ba4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>而是从上往下，只看到瓶口</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-8769b391d971d940.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>看不出水有多深，看不到瓶颈在哪里！想起了一部美剧——《迷失》，想起了一句古话——“只缘身在此山中”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-33dab374bc715430.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="3-瓶颈在哪？"><a href="#3-瓶颈在哪？" class="headerlink" title="3 瓶颈在哪？"></a>3 瓶颈在哪？</h1><blockquote><p><strong>我先问几个问题，看看你是否能够回答上来？</strong></p></blockquote><ol><li><code>dl, dt, dd</code>三个标签浏览器默认margin值多少？是否有标签默认文字粗体？</li><li><code>line-height:150%</code>和<code>line-height:1.5</code>的区别是？</li><li><code>float</code>为何会让外部容器高度塌陷？这是bug？</li><li><code>vertical-align</code>的表现为何在IE7, IE8, IE9下表现不尽相同？其中的渲染机制是？</li></ol><p>以上问题可以大致判别你是A阶段还是B阶段。倒不是问题本身，而是问题所指的类别。</p><p>问题1, 2表示“<strong>深入的细节掌握</strong>”；3, 4表示“<strong>深入的机制理解</strong>”。再往后可能就是“网页大事，为我所控”，“天下页面，听我号令”，这要C阶段了，先不予讨论。</p><p>换句话说，您现在的瓶颈可能在于“细节掌握不够”、“机制等理解不够”。</p><h2 id="关于细节"><a href="#关于细节" class="headerlink" title="关于细节"></a>关于细节</h2><p>有人可能会反问：我为什么要知道dl, dd, dt标签默认的margin值大小？我一般都是直接在CSS reset中设置：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,... ,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,...,<span class="selector-tag">th</span>,<span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><p>你看，<strong>淘宝网首页就是这么干的</strong>(global-min.css)！从实际应用来看，我无需关心！<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-9e343304967950c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>这样的想法，类似于：我根本不需要知道我的前任、现任、后任女友是否是处女，因为我都直接让她们做处女膜修复！从实际应用来看，我无需关心</p><p>很多事情，如果你足够了解之，就能灵活掌控之！即所谓的<strong>驾驭能力</strong>。CSS细节了解，有助于你更好地驾驭CSS, 而不是被CSS调试，被浏览器劫持。</p><p>3~4两的大闸蟹虽然也有人要，但是，多啊，不值几个钱；但是半斤以上的大闸蟹的单价就要翻番。盲从CSS reset的人也有人要，但是，多啊，不值几个钱；但是，<strong>知根究底</strong>的人这身价就要翻番了。</p><p>如果你有自己想法，知根知底，你可能就是这样做reset的：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, ..., <span class="selector-tag">dl</span>, <span class="selector-tag">dd</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><p><code>dt</code>标签的reset只是白白浪费，增加页面渲染负荷；<code>padding</code>属性值仅极少标签(ol, ul)有，其他标签无需浪费渲染重新设置。<br>//zxx: 对于淘宝首页的渲染速度我就不说什么了</p><p>有不少人曾问我：“你的那个CSS架构我用了，很不错，使用很方便。但是，我经常CSS库的类名有5个甚至更多！而你写的页面很少会这样，为什么呢？”<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span class="db l h24 lh24 b"&gt;注意：&lt;/span&gt;我是……</span><br></pre></td></tr></table></figure></p><p>如果你对CSS细节足够掌握，可能您的使用就会是这样：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;strong class="l lh24"&gt;注意：&lt;/strong&gt;我是……</span><br></pre></td></tr></table></figure></p><p>这就是我说过的，如果页面开发工程师对CSS属性理解不够透彻，我的这种架构对其而言反而会略显吃力！</p><h2 id="关于理解"><a href="#关于理解" class="headerlink" title="关于理解"></a>关于理解</h2><p>你是否有这样的调试经历：尼玛IE(x)浏览器下出了个奇怪问题，哥哥我不知道原因啊原因啊原因，然后很苦逼地把觉得有可能的CSS属性一个一个试验——改一个刷一下，看看有没有变好。</p><p>唉，可怜的娃，宝贵的青春就这么蹉跎掉了，省下来和前台美女MM调调情也比这强多了~~</p><p>为什么我们需要深入理解CSS的一些表现？</p><ul><li><p>所谓“<strong>对症下药</strong>”，你要先知道这个症，这个根才可以。同样，当我们对CSS的底层表现有一定的理解与认识的时候，遇到一些看似奇怪的问题，我们可以一针见血，一语中的，分分钟搞定，然后，聊天，喝茶，把妹~~</p></li><li><p>所谓“<strong>发明创造</strong>”，你要先知道其基本原理，工作机制。同样，当我们面对CSS的一些特殊需求的时候，一些看似蛋疼的问题，我们可以发挥我们的创造性思维，创建一个属于你的首创新方法，然后卖萌，邀功，得瑟~~例如，我之前折腾过的inline-block两端对齐等。</p></li></ul><h2 id="理解的对与错"><a href="#理解的对与错" class="headerlink" title="理解的对与错"></a>理解的对与错</h2><p>每个人的成长经历不同，大脑擅长处理的东西也不同，导致其看待与理解事物的方式也不同。因此，对于同一CSS表现的差异，每个人的理解都不同。</p><p>一旦有所差异，就有所谓的“对错”之争。估计不少人会拿《CSS权威指南》上的东西说事：你那种理解是错误的，CSS权威指南上说……或W3C官方文档解释说……</p><p>我大学电路老师最后一节课专门讲了她的科学观：何为科学？<strong>能够自圆其说，自成体系即是科学</strong>。中医算科学吗？算！因其有一套自己解释畅通的理论体系。</p><p>同样，对于CSS的理解，我个人一直认为什么对错的争执等都是没有意义的。如果你的解释可以自圆其说，自成体系，且应用无误，哪怕你的解释与什么规范啊权威啊八竿子都打不着，别人压根理解不了，你都是对的，OK的！</p><p><strong>拘泥只会限制自身的创造力以及认知能力</strong>。火影的世界算是世界吗？是，自圆其说，自成体系！海贼王的世界算是世界吗？是自圆其说，自成体系。</p><p>因此，如果你是设计出身，或文学出身的。什么复杂逻辑，深奥解释理解不了，你大可摒弃之，用你自己的世界去解释其表现，你的感性思维以及艺术情怀只会让这个世界变得更精彩！那些自以为是，抱残守缺的杂碎们就不用鸟他们，让他们随着时间消逝去吧~~</p><p>好比面对“浮动元素会让外部高度塌陷的原因？”这个问题，你可以这样解释：</p><ul><li>浮动是敏感词</li><li>浮动是海市蜃楼</li><li>浮动是个不孝子，会让爸爸颜面无存，显得很矮小</li><li>浮动是个魔鬼，和绝对定位是兄弟，本都属于天上人</li><li>浮动是中国，讲究面子工程</li><li>浮动是中国股市，吸引屁民跟在左右，本身就是个泡沫</li><li>……</li></ul><p>只要这类解释能够把其他所有的CSS表现<strong>都解释地通，成为体系</strong>，都是正确且深入的理解。</p><h1 id="4-如何突破？"><a href="#4-如何突破？" class="headerlink" title="4 如何突破？"></a>4 如何突破？</h1><p>知道问题在哪里，其实已经解决了一大半。</p><blockquote><p><strong>下面的问题如何实践了！</strong></p></blockquote><p>杨过16年前就开始意识到要可以自创武功（类似于我们自创CSS实现），但是，最终实现确实N年以后，不断的感悟以及练习才得以成功。</p><p>即使你再天才（杨过够天才吧），机遇够神奇（杨过经历够神奇吧），也也是要会很多功夫和精力才能到达另外一个层次的。只是别人可能30年的，你只要20年而已（黄药师说过，杨过20岁的武功修为其30岁才达到）。</p><p>我想了想，关于突破瓶颈的建议我有三个：<br><strong>戒骄戒躁、分享讨论、打破重组。</strong></p><h2 id="关于戒骄戒躁"><a href="#关于戒骄戒躁" class="headerlink" title="关于戒骄戒躁"></a>关于戒骄戒躁</h2><p>如果有人当面说你：“旺财啊，你这个人有时候比较浮躁啊！”你可能心里或嘴上就嘀咕了：“有吗？我不觉得啊。我做事很认真的啊！”</p><p>究竟如何呢？人们常说当局者迷旁观者清。</p><p>假设你看到了一个用法：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vertical-align</span><span class="selector-pseudo">:-2px</span>;</span><br></pre></td></tr></table></figure></p><p><strong>你的反应以及做法会是？</strong><br>A. 我擦，原来vertical-align还支持数值啊，学习了！<br>B. 哟，vertical-align支持数值？我去查查<del>呀，果然</del><br>C. 切，大惊小怪，我早就知道vertical-align支持数值，包括负值了，百分比值~~<br>D. 阿拉，我要自己试验下，新建个HTML页面，做个简单demo，看看兼容性什么的~~<br>E. 啊，什么，我刚扫视了，没注意到~~</p><p>对应下表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-c4f241e5c119711d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>实际对比我会发现差异不大，但是我不会认为其没有差异，因为高中大学做实验很基本的一条就是多个条件的实践，于是，我会使用vertical-align:-200px;</p><p>与margin-bottom:-200px;再做一次验证（当然，会设置其他用来观察的条件——背景色，边框或其他元素），结果，差异非常明显地出来了（这里先忽略IE6/IE7下margin-bottom负值极限bug）：<br>如果是我，<strong>我会更近一步，对比思考</strong>：vertical-align:-2px;与margin-bottom:-2px;之间有什么差异，我会试验之~~</p><p>vertical-align会增加容器的高度，而margin-bottom负值则是减小！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-a1a90d51f074c758.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后，我可能会整理，然后……（接下面）</p><h2 id="关于分享讨论"><a href="#关于分享讨论" class="headerlink" title="关于分享讨论"></a>关于分享讨论</h2><p>分享看似把东西授予他人，自己做了吃力不讨好的事情。而实际上，<strong>准备分享内容以及在分享的过程中，你会提炼总结思考你要分享的东西</strong>，这对于学习而言是非常重要的，这个阶段好比模具成型，鱼入网袋，妹子推倒。</p><p>讨论的作用也很大，别人或中肯或傻逼的批评以及建议都会让你发现你知识上的不完善或不准确之处，群众的眼睛是雪亮的。</p><p>还是说我自己，接上面，如果是我，我可能就会把vertical-align负值与margin-bottom负值的差异<strong>整理成一篇文章</strong>发布出来（实际上是不会的，因为内容太少，质量档次不够，一般只会穿插在其他文章中，比如本文）。在发布书写制作demo的过程中，我肯定会有观点的提炼等，我就会发现一些新的东西，比方说IE6/IE7的margin-bottom负值数值超过一定限度时候的兼容性问题。</p><p>在写文章的时候，我可能会使用一些激烈的措辞，激发与他人的互动与讨论，从别人的评论中查漏补缺，获取新的知识。</p><p>当然，每个人分享的方式可能不一样。我因为嘴皮子的表达欠佳，因此，大多借助文章这个渠道分享与讨论。传播技术的同时自身也得到提高，如此一举两得的事情，何乐而不为呢！而你呢？如果你擅长交际组织什么的，分享会什么的，都是很赞的方式！</p><h2 id="关于打破重组"><a href="#关于打破重组" class="headerlink" title="关于打破重组"></a>关于打破重组</h2><p>华为貌似做过这样的事情，所有的老员工一律辞职，自己再重新去应聘。而且，好像类此的操作不只做了一次，“始作俑者”为任正非老先生。这种打破重组的效果如何呢？</p><p>据说奇效，当年华为业绩可见一斑。</p><p>在突破瓶颈的时候，我们也可以，而且建议这么尝试。限制于惯性思维中，是很难突破瓶颈的。<strong>我们可以将自己过往的一切全盘否定，然后重新再来</strong>，你可能就会看到另外一个自己。<br>举个例子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-a8d6e996c29bf3be.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果你一直都是固定布局的，自己在心里默念三遍：固定布局就是个屎，我要投奔流体布局！如果你一直都是流体布局的，自己心里也默念三遍：流体布局就是个屎，我要投奔固定布局！如果你固定/流体布局兼修，自己心里也默念三遍：什么固定/流体布局都是屎，我要投奔时髦的响应布局！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-bb54218fa278ddfd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>放开自己，拥抱未来，拥抱变化。舍弃过往，接受新颖的架构，思想，理念。</strong>你就会发现，很短的时候，自己有了质地提升。</p><p>其中玄奥我是很难道明，要看你自己能不能体会出来了！</p><h1 id="5-最后"><a href="#5-最后" class="headerlink" title="5 最后"></a>5 最后</h1><p>其实，广大页面屌丝们并不畏惧那些学习能力强的人，畏惧的是那些学习能力强，同时，尼玛学习又拼命的人。</p><p>页面仔们，扪心自问下：我每天几点下班？我每天下班后都干嘛了？我有专门花空余时间深入理解学习CSS的一些东西吗？我能够连续坚持数月吗？</p><p>最后，我只说一句话：</p><p><strong>吃得苦中苦，方为人上人</strong><br><strong>吃得苦中苦，方为人上人</strong><br><strong>吃得苦中苦，方为人上人</strong></p><h1 id="引自"><a href="#引自" class="headerlink" title="引自"></a>引自</h1><blockquote><p>本文转载自<a href="http://www.zhangxinxu.com/wordpress/2012/07/bottleneck-css-study/" target="_blank" rel="noopener">说说CSS学习中的瓶颈</a></p><p>关于作者<br><strong>张鑫旭</strong>，09年华中科技大学毕业，现上海，就职于阅文集团，专注web前端偏前领域，钓鱼爱好者。</p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文是在自己重新开始学习CSS的过程中看到的，与其说它是讲&lt;strong&gt;如何深入学习CSS&lt;/strong&gt;，更多的是&lt;strong&gt;警醒的作用&lt;/strong&gt;，看了文章之后，才真正认清自己的浮躁，也庆幸自己回头恶补。本文不涉及技术，但是希望大家都能看一看。&lt;/p&gt;
    
    </summary>
    
      <category term="前端视角" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E8%A7%86%E8%A7%92/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>给不了解前端的同学讲前端</title>
    <link href="http://destinytaoer.cn//posts/ca85f766/"/>
    <id>http://destinytaoer.cn//posts/ca85f766/</id>
    <published>2017-10-17T15:54:28.000Z</published>
    <updated>2018-08-06T09:37:34.065Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-a32431796217fe4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章，是在前几天逛知乎的时候看到的文章，觉得很棒，正好也有这个需求，想向不了解前端的人介绍何为“前端”。不然，自己所在的群体中好像很少人能明白我一天到晚钻研的东西是什么。下面与大家分享。</p><p>ps：本文为 PPT 演讲的形式所作的图文介绍，图片较多。</p><blockquote><p>本文转自知乎：<a href="https://zhuanlan.zhihu.com/p/29468137" target="_blank" rel="noopener">前端 101：给不了解前端的同学讲前端</a><br>本演讲原作者<strong>css魔法</strong>，文末有作者简介</p></blockquote><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>本文改编自魔法哥为 “百姓网暑期实习生训练营” 所作的前端入门讲座。此讲座面向在校大学生，内容比较初级，高手请飘过～</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-e1b62c7aaa0cf962.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>大家好，今天的分享主要分为以下三个部分：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-1e3cd46619cae95f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由于目前计算机专业还没有为 Web 前端技术设立专门的课程，每位同学对前端的了解程度也不一样，今天的讲座会以最浅显的方式来为大家介绍 “前端”，帮助大家建立一个基本的概念。</p><h1 id="前端是什么？"><a href="#前端是什么？" class="headerlink" title="前端是什么？"></a>前端是什么？</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-2e531aa775d58cda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在回答这个问题之前，我想到了一道面试题：</p><p>当我们在浏览器中输入网址并按回车之后，接下来会发生什么？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-74853a55246253ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们来简单地看一看 “网页展现” 的整个过程。</p><p>比如这里有一个用户，它需要访问<a href="">abc.com</a>这个网址。一般来说，当用户输入一个域名时，是在请求一个 HTML 资源。当他完成域名解析之后，他的浏览器会向<a href="">abc.com</a>这个域名所指向的 Web 服务器发出请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-6dd15a6bb60eaede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>有时候 Web 服务器直接就可以返回用户的请求了；有时候 Web 服务器还需要向数据库查询一些数据，然后才能把处理结果返回给用户。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-7d02305025990c0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当用户的浏览器拿到服务器返回的 HTML 资源之后，就开始解析并显示 HTML 的内容了。</p><p>一般来说，HTML 页面需要 CSS 资源来描述页面的样式。比如浏览器在解析 HTML 时发现了一个 CSS 外链 <a href="">abc.com/a.css</a>，它就会去请求这个资源。</p><p><img src="http://upload-images.jianshu.io/upload_images/7295449-863d6450ba3fdd2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>HTML 页面往往还需要加载外部的 JS 资源，比如 <a href="">abc.com/a.js</a>，此时浏览器同样会向服务器请求这个资源。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-0ce52d2f69355404.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当所需的资源都加载完成之后，这个页面就可以提供完整的外观和功能了。整个过程差不多就是这个样子了。</p><p>我们看一看这张流程图，可以在中间画一道竖线，把它分成左右两个部分。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-c2f676e873ca588c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们会发现，这道线左侧的事情发生在浏览器端，我们称之为 “前端”；右侧的事情发生在服务器端，称为 “后端”。（“前端” 之所以叫 “前端”，是因为它离用户更近一些。）</p><p>大家都学过后端开发的相关课程，对后端这一块应该都比较熟悉了。那问题来了：在上面这个过程中，后端有哪些局限？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-08673afef357683c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>服务器一旦把资源提供给浏览器之后，便失去对内容的影响。</li><li>服务器无法得知用户在浏览器里做了什么，无法与用户交互。</li></ul><p>这意味着，只有当用户下一次向服务器请求资源时，服务器才有机会再次决定用户看到的内容。那么，用户什么时候再向后端请求资源呢？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-6347610eb7e16e7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>第一种情况是 “导航动作”。比如用户刷新页面、点击链接、点击浏览器的前进/后退等等。</p></li><li><p>第二种情况是用户提交表单。表单是最传统的页面交互方式之一，提交表单时浏览器会向服务器发出新请求——这意味着浏览器会跳转到一个新的地址，服务器会在新页面中显示表单的处理结果。</p></li><li><p>还有一种特殊情况，就是服务器在给浏览器返回 HTML 资源时，在页面中插入一个特殊的标记，浏览器看到这个标记就会在一定的时间后自动刷新当前页面或跳转到其它页面，相当于服务器强制用户再次发出请求。可想而知，这种非用户意愿驱动的页面跳转行为并不讨人喜欢，因此已经不常用了。</p></li></ul><p>在传统网页中，上述几种用户与服务器之间的交互方式也算够用了。不过随着网页形态的不断演进，用户对网页体验提出了更高的要求，很多时候网页不仅仅是一篇静止的文档，而更像是一个应用程序，用户随时可能与之互动。这个时候，前端的价值就体现出来了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-589dafeec7103eb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>用户从停留在当前页面到发起新请求的这段时间内，前端可以<strong>控制页面内容</strong>。</li><li>当用户停留在当前页面时，前端有能力与用户交互。由于前端的 JS 可以<strong>监听用户在浏览器中的各种行为</strong>（比如鼠标点击、键盘输入、滚动页面等等），前端就可以针对这些行为作出相应的反馈。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-1dbd1eb36ca4d0b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p>在前端与用户的交互过程中，有些事情光靠前端就可以做出响应。比如我们在网页上做了一个计算器的功能，当用户输入算式之后，JS 就可以直接计算出结果并显示给用户。整个过程不需要服务器的参与就可以完成。</p></li><li><p>但有些事情，光有前端是无法完成的。此时前端就需要交给后端来处理，拿到处理结果之后再交给用户。在这个过程中，前端可以让用户一直停留在当前页面，交互过程具有良好的连续性。</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-0800b1697e6f776c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>那么，前端如何把任务交给后端并拿到后端处理的结果呢？主要有两种方式：<strong>Ajax</strong>和 <strong>Socket</strong>连接。</p><ul><li><p>Ajax 是最常见的前后端交互方式。它以 “请求→响应” 的方式来完成前后端的信息传递。传统的表单交互需求几乎都可以由 Ajax 改造为 “原地提交并获取反馈” 的交互方式，不需要跳转页面，从而有效提升用户体验。</p></li><li><p>而对于实时性比较高的场景，Socket 连接就是一个更好的选择。它的工作方式是前后端建立一个持续的连接，信息可以随时由前端发向后端，或由后端推送到前端。如果我们要建立一个实时对话的应用，通常就会用到 Socket 连接了。</p></li></ul><h1 id="前端需要用到哪些技术？"><a href="#前端需要用到哪些技术？" class="headerlink" title="前端需要用到哪些技术？"></a>前端需要用到哪些技术？</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-72d7b3bfd4914135.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>说到前端技术，我们通常都会说到 “三大块”：</p><ul><li><strong>HTML</strong></li><li><strong>CSS</strong></li><li><strong>JS</strong></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-c9e29dc04490fceb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是前端最核心的三项技术。</p><p>接下来，我们就会说到 “前端的分层架构”。这个架构的原则就是 “让合适的技术去做合适的事情”。一个网页从逻辑上可以视为这三层的有机结合体：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-2a2efacdf59d261d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p><strong>结构层</strong>：这一层的作用是表述一个页面中有哪些信息，以及这些信息之间的关系是什么。这一层在技术上是由 HTML 来实现的。</p></li><li><p><strong>表现层</strong>：这一层决定了页面中的信息会以什么样的外观呈现出来。这一层由 CSS 来实现。</p></li><li><p><strong>行为层</strong>：这一层控制了页面如何与用户进行交互。在传统的展示型网页中，可能只需要 “结构层” 和 “表现层” 就足以提供完整的功能；而现代网页承载了越来越多的交互，这就推动 “行为层” 的能力不断增强。这一层由 JS 来实现。<br>我们通过一个实例来理解这个分层架构。</p></li></ul><p>比如我是一个百姓网的用户，我打开了 “用户中心” 中的 “我发布的信息” 这个页面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-8ef78f51137fe1e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个页面的 HTML 描述了信息以及信息的结构。即使没有 CSS 和 JS 的辅助，这个页面仍然可以呈现出可理解的内容（参见上图）。页面顶部是一些导航元素，接下来的 “显示中的信息” 是一个标题，它又引出了一个列表。这个列表自然就是我在百姓网发布的所有信息了。（除了 “显示中的信息” 以外，页面后半段还有 “已删除的信息”，这里不再赘述。）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-75ce8bb7db024341.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>接下来，我们会在表现层下功夫，通过 CSS 来为页面中的各个元素设定外观。经过这一层的修饰之后，页面中的内容更加美观了；更重要的是，各元素的功能职责也更加直观易懂了（参见上图）。</p><p>这已经是一个挺不错的网页了，但接下来，我们还会通过 JS 来丰富它的功能，提升用户的使用效率。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-acdfd5c9b2d8792e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>作为信息的发布者，我可能需要修改某条信息的内容，或对它进行 “刷新” 之类的操作。在传统的交互中，我需要在这个列表中点击需要操作的信息，然后在信息的详情页选择合适的操作。</p><p>我们可以把这个流程简化一下：我们在这个列表中为每条信息添加一个操作按钮，当用户点击某条信息的操作按钮时，我们就在页面中弹出一个操作面板，用户可以直接选择想要的操作，减少了中间环节（参见上图）。</p><p>由此可见，结构层、表现层、行为层这三者各有所长，共同构造了一个功能完备、体验良好的网页出来。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-e12f34acf0573ec6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>除了基本的 “三大块” 之外，作为前端工程师，我们还需要掌握以下知识和技能：</p><ul><li><p><strong>HTTP 相关</strong>：由于前端资源都是浏览器通过网络下载的，因此我们有必要了解相关的网络协议。</p></li><li><p><strong>浏览器相关</strong>：前端代码运行在浏览器中，我们需要了解浏览器的各种特性，以及浏览器向我们提供的各种接口。</p></li><li><p><strong>前端性能优化</strong>：让网页更快，减少用户的等待，这也是前端工程师面临的重要课题。优化网页的前端性能，需要我们具备上面两项知识，并且掌握性能优化相关的工具和方法。</p></li><li><p><strong>图形图像</strong>：网页信息不仅包含文字，还包含图片、视频等多媒体信息。图片作为最常用媒体资源，需要我们掌握与其相关的技能。比如了解各种图片格式适用的场景、基本的图片处理方法等等。</p></li></ul><h1 id="前端的开发方式是怎样的？"><a href="#前端的开发方式是怎样的？" class="headerlink" title="前端的开发方式是怎样的？"></a>前端的开发方式是怎样的？</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-34b472450ec69e3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>前面我们已经介绍了前端技术 “三大块”，然而在如今，当我们在编写这三块的代码时，已经不再 “裸写” 了。这意味着我们在开发阶段编写的代码与实际在浏览器环境中运行的代码已经不一样了，详细来说：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-1ce0a5c2f93a5d9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>我们通过<strong>模板语言</strong>来生成 HTML。</li><li>通过 <strong>CSS 预处理器</strong>来生成 CSS 代码。</li><li>通过 <strong>ES6+</strong> 的语法和特性来编写 JS 代码。</li></ul><p>举例来看吧，以下三个例子展示了代码书写方式的演化。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-42d1b15fc47467ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>百姓网采用了 <strong>Jade</strong> 和 <strong>Jedi</strong> 这两种模板语言。在上图的代码中，我们仅仅使用了模板语言最基本的标记语法，还没有插入使用模板语言的任何逻辑能力。仅此一步，就可以看出模板语言带来的好处。</p><p>原先我们在写 HTML 代码时，会花费大量的精力在 &lt;、/、&gt; 这样的语法噪音上；同时，识别标签的嵌套关系也很费眼。幸运的是，Jade 和 Jedi 这样的现代模板语言把前端工程师解放了出来。它们通过缩进来表达嵌套关系，层级关系一目了然；语法更精练，表现力更强。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-561fd9483ef499af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在 CSS 预处理器方面：</p><ul><li>通过更简洁的语法减轻开发者的书写负担</li><li>通过内置的逻辑能力增强了代码的表现力。</li></ul><p>举个例子，在使用原生 CSS 来写代码时，不同元素采用的相同颜色只能分散在代码各处；而采用了 CSS 预处理器之后，我们可以把相同意义的颜色通过变量的形式抽象出来，然后在代码各处调用即可。这样不仅便于后期维护，在平时读代码时也更容易理解代码意图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-0d378b40785090f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在 JS 方面，我们开始享受 ES6+ 带来的新特征福利。ES（ECMAScript）是定义 JS 这门语言的标准规范，从第六版开始，ES 以每年一版的节奏持续快速地扩展着 JS 语言的能力。</p><p>在以往，如果我们要实现 “在数组中找出符合特定条件的成员” 的需求，往往需要借助 Underscore 这样的工具库，调用它的 <code>_.find()</code> 方法。而在 ES6 中，语言本身就扩展了数组的能力，我们只需要直接调用 <code>Array#find()</code> 接口即可。另外，像箭头函数这样的新语法也可以令代码进一步简化。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-85e63e473375b874.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在 HTML、CSS、JS 这三大块，我们放弃 “裸写”，采用 “更高级” 语言的目的在于：</p><ul><li>利用高级语言提供的 “逻辑能力” 来增强代码的表现力。</li><li>利用高级语言的 “语法糖” 和 “新特性” 来提升开发效率和舒适度。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-7af374273e337e9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当然，采用这些更高级的语言也不是完全没有成本的。我们在开发阶段所用的语言已经不是纯粹的 HTML、CSS、JS 了，浏览器无法直接识别和运行。因此，当我们放弃 “裸写”，也就意味着：</p><ul><li>在部署流程中需要设立构建环节，把源码编译到浏览器环境可以运行的目标代码。</li><li>在开发阶段，需要有工具来实时监视并编译有变动的源码，以确保页面上呈现的是我们修改过的最新效果。</li></ul><p>在百姓网，前端架构组已经搭建好了必要的开发环境，开发者们只需要关注开发本身就可以了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-ca20fd0b221269c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在企业级的前端开发中，我们还需要了解如下知识点：</p><ul><li><p><strong>模块化</strong>：模块化是最常见的编程实践之一，令我们的代码组织更加清晰、易维护。ES6 为 JS 增加了完善的模块化方案，我们的日常开发也已经迁移到了 ES6 模块规范之下。</p></li><li><p><strong>包管理</strong>：如何将开源社区中的优秀组件为我所用？这就不能不提 “npm” 这个最主流的 JS 包管理器。前端界优秀的开源项目几乎都发布到了 npm 的包仓库，我们日常开发中用到的第三方库也都是由 npm 来管理的。打包工具可以把我们写的模块化的源码和第三方包整合到一起，形成页面所需的完整 JS 资源。“包管理器”、“模块化”、“打包工具” 的相互结合，基本上就是日常的 JS 代码组织方式。</p></li><li><p><strong>组件化</strong>：在传统的前端开发中，HTML、CSS、JS 这三块的代码有各自独立的文件，这些文件往往也分散在不同的目录结构中。如果页面功能区块的划分足够清晰，开发者就可以用 “组件” 的概念来把页面拆分，整个页面会被视为多个组件的嵌套和组合；同时，开发者也倾向于把每个组件相关的 HTML、CSS、JS 代码整合到同一个目录（或同一个文件）中，便于管理和维护。这就是 “组件化” 的开发模式。要实现这样的开发模式，通常需要前端框架和构建工具的配合。</p></li><li><p><strong>单页应用</strong>：HTML5 的 History API 为前端提供了控制浏览器导航行为的能力，配合 Ajax 无刷新更新页面内容的特性，我们可以在一个页面内实现应用的多视图切换，避免页面的频繁跳转，提供类似桌面应用的体验。比如 Gmail 等产品就是典型的单页应用模式，百姓网的大多数后台系统也都是单页应用。</p></li></ul><p>其它实用的知识点，就留待大家在工作中慢慢发掘吧。</p><p>今天想跟大家分享的主要内容就是这些了，感谢阅读，再见！</p><h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><blockquote><p><strong>作者</strong>：CSS魔法@前端架构<br><strong>简介</strong>：百姓网前端架构 TL，<strong>《CSS 揭秘》</strong>译者，CSS Conf 讲师，自称 “披着工程师外衣的设计师”。</p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-a32431796217fe4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章，是在前几天逛知乎的时候看到的文章，觉得很棒，正好也有这个需求，想向不了解前端的人介绍何为“前端”。不然，自己所在的群体中好像很少人能明白我一天到晚钻研的东西是什么。下面与大家分享。&lt;/p&gt;
&lt;p&gt;ps：本文为 PPT 演讲的形式所作的图文介绍，图片较多。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文转自知乎：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29468137&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前端 101：给不了解前端的同学讲前端&lt;/a&gt;&lt;br&gt;本演讲原作者&lt;strong&gt;css魔法&lt;/strong&gt;，文末有作者简介&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端视角" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E8%A7%86%E8%A7%92/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现元素的居中显示</title>
    <link href="http://destinytaoer.cn//posts/36a501de/"/>
    <id>http://destinytaoer.cn//posts/36a501de/</id>
    <published>2017-10-17T15:26:12.000Z</published>
    <updated>2018-08-02T00:59:15.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>元素的水平及垂直居中是在写CSS样式中最常遇到的问题之一。相信会CSS的同学肯定都有自己的解决方法，但是并不一定都能熟练运用，并且知道其中原理。下面，我就将自己总结的实现方法分享给大家。<br>ps：重点是第四，疑惑在第三，第一、第二也较常用</p><blockquote><p>为本文制作的demo：<a href="https://codepen.io/destiny0904/pen/rGomoB" target="_blank" rel="noopener">元素居中显示</a><br><a id="more"></a></p></blockquote><h1 id="一、单行文本"><a href="#一、单行文本" class="headerlink" title="一、单行文本"></a>一、单行文本</h1><p>这里的单行文本不仅是指单行显示的文本以及<strong>行内元素</strong>（设置了<code>display: inline;</code>的也是行内元素），当然这些元素也只有包含文本才有意义，才能显示出来。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 父元素*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  text-align: center;//水平居中</span><br><span class="line">  light-height: heightValue;//垂直居中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>这里的<code>heightValue</code>指的是<code>height</code>属性值，即行高值 = 高度值，才能实现垂直居中。</li><li>另外一种常见的就是不设置高度，直接用行高来撑起高度，这样就不存在行高与高度一致的问题。</li></ul><blockquote><p>具体原因请参考文章：<a href="http://www.jianshu.com/p/dc324a36ba84" target="_blank" rel="noopener">对文字和行高的理解</a></p></blockquote><h1 id="二、多行文本"><a href="#二、多行文本" class="headerlink" title="二、多行文本"></a>二、多行文本</h1><p>这里的多行文本，实际上应该说是<strong>不定行</strong>，这个方法能自适应的居中。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 父元素*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里设置<code>table-cell</code>，创建类似表格单元的元素，就可以使用<code>vertical-align</code>设置垂直对齐方式。</p><blockquote><p><strong>注意</strong>：在一些文章中，我看到还需要设置其子元素的<code>vertical-align</code>，但是在实践中发现并不需要。与下面使用<code>table-cell</code>的方法有所区别</p></blockquote><h1 id="三、图片"><a href="#三、图片" class="headerlink" title="三、图片"></a>三、图片</h1><p>这里图片泛指<strong>行内块元素</strong></p><ul><li><h3 id="table-cell-vertical-align"><a href="#table-cell-vertical-align" class="headerlink" title="table-cell + vertical-align"></a>table-cell + vertical-align</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 父元素*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子元素img*/</span></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个方法与上面的有区分，子元素必须加上<code>vertical-align</code>，否则不同大小的图片显示效果不一样</p></li><li>不支持img的父元素浮动，因为这样<code>display</code>会自动变为<code>block</code>，所以当多图片显示时需要再在外面嵌套一层标签，不方便</li></ul><blockquote><p><strong>注意</strong>：在一些文章中，在父元素上还添加了<code>font-size</code>的大小控制，在我的实践中，不添加<code>font-size</code>可以实现效果。但是，当<code>font-size</code>达到一定程度的时候，会有影响。</p></blockquote><ul><li><h3 id="vertical-align-font-size"><a href="#vertical-align-font-size" class="headerlink" title="vertical-align + font-size"></a>vertical-align + font-size</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 父元素*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">128px</span>; </span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子元素img*/</span></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>font-size</code>达到一定大小就会影响行内元素的垂直位置，具体是什么原因不明确，但是感觉是跟<code>vertical-align</code>以及行高有关。</p><blockquote><p><strong>注意</strong>：这个方法的原本是在父元素上加<code>display: inline-block;</code>的，实践发现并不需要，只要里面的是行内块元素就可以了。使用这个方法特别注意的是父元素<code>font-size</code>与子元素<code>height</code>的比例关系，因为不可控，所以<strong>不推荐使用。</strong></p></blockquote><ul><li><h3 id="其他方法参照下面的块元素实现"><a href="#其他方法参照下面的块元素实现" class="headerlink" title="其他方法参照下面的块元素实现"></a>其他方法参照下面的块元素实现</h3></li></ul><h1 id="四、盒子"><a href="#四、盒子" class="headerlink" title="四、盒子"></a>四、盒子</h1><p>盒子主要指<strong>块元素</strong>和<strong>行内块</strong>，下面分享的是布局中主要用到的。<code>margin: 0 auto</code>就不做介绍了。</p><h2 id="1-position-负margin"><a href="#1-position-负margin" class="headerlink" title="1. position + 负margin"></a>1. position + 负margin</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子元素 */</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>; <span class="comment">/* img高度的一半*/</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;<span class="comment">/* img宽度的一半*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>position</code>移动父元素宽高的一半，再利用负<code>margin</code>往回移动子元素宽高的一半，刚好居中对齐。适合固定宽高的元素。</p><h2 id="2-position-translate"><a href="#2-position-translate" class="headerlink" title="2.position + translate"></a>2.position + translate</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 父元素 */</span></span><br><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 子元素 */</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate3d</span>(-50%,-50%,0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同上理，这里利用<code>translate3d</code>往回移动。子元素不固定宽高也适用。</p><h2 id="3-table-cell-vertical-align"><a href="#3-table-cell-vertical-align" class="headerlink" title="3. table-cell + vertical-align"></a>3. table-cell + vertical-align</h2><p>这就是前面图片提到的方法，只不过要设置子元素为<code>display: inline-block;</code></p><h2 id="4-flex"><a href="#4-flex" class="headerlink" title="4. flex"></a>4. flex</h2><p>这才是真正的布局神器。适用于所有，但也需要灵活应用。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简洁、高效，在低版本IE存在兼容问题，但是现在几乎不用考虑了。</p><blockquote><p>详细语法请查看我的博文：<a href="http://www.jianshu.com/p/90dbbbecdf3b" target="_blank" rel="noopener">关于Flex布局</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;元素的水平及垂直居中是在写CSS样式中最常遇到的问题之一。相信会CSS的同学肯定都有自己的解决方法，但是并不一定都能熟练运用，并且知道其中原理。下面，我就将自己总结的实现方法分享给大家。&lt;br&gt;ps：重点是第四，疑惑在第三，第一、第二也较常用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为本文制作的demo：&lt;a href=&quot;https://codepen.io/destiny0904/pen/rGomoB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;元素居中显示&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于Flex布局</title>
    <link href="http://destinytaoer.cn//posts/4716e729/"/>
    <id>http://destinytaoer.cn//posts/4716e729/</id>
    <published>2017-10-16T03:42:24.000Z</published>
    <updated>2018-08-06T09:37:34.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-38044c92f204f8f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>讲讲布局，传统的布局，是基于盒子模型，依赖 <code>display</code> + <code>position</code> + <code>float</code>属性。它对于特殊的布局非常不方便，如：垂直居中。</p><p>Flex 布局是 W3C 在 2009 年提出的新方案，可以简便、完整、响应式地实现各种页面布局。已经得到所有浏览器的支持。是未来布局的首选方案。下面就跟大家介绍Flex布局。</p><a id="more"></a><h1 id="一、Flex布局是什么"><a href="#一、Flex布局是什么" class="headerlink" title="一、Flex布局是什么"></a>一、Flex布局是什么</h1><p>Flex是Flexible Box的缩写，意为“弹性布局”，用来给盒子模型提供最大的灵活性。</p><p>任何一个容器都可以指定为Flex布局：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行内元素也可以使用Flex布局：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">   <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：设为Flex布局以后，其子元素的<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性将失效</p></blockquote><h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-b39f755f51fc1c12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><p><strong>设置flex的元素，称为Flex容器（flex container），它的所有子元素自动成为容器成员，称为Flex项目（flex item）</strong></p></li><li><p><strong>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）</strong><br>主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<strong>主轴和交叉轴必定垂直。</strong></p></li><li><p><strong>项目默认沿主轴排列</strong><br>单个项目所占据的主轴空间叫做<code>mian size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p></li></ul><h1 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h1><ul><li><strong>flex-direction</strong></li><li><strong>flex-wrap</strong></li><li><strong>flex-flow</strong></li><li><strong>justify-content</strong></li><li><strong>align-items</strong></li><li><strong>align-content</strong></li></ul><h2 id="1-flex-direction"><a href="#1-flex-direction" class="headerlink" title="1. flex-direction"></a>1. flex-direction</h2><p><code>flex-direction</code>属性决定项目的排列方向，即主轴的方向。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-c0e2ad4cc2a1f840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><h2 id="2-flex-wrap"><a href="#2-flex-wrap" class="headerlink" title="2. flex-wrap"></a>2. flex-wrap</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>nowrap</code>（默认）：不换行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-b4a678bc75ad110d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p><code>wrap</code>：换行，第一行在上方，正常顺序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-42d39422afd501b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li><li><p><code>wrap-reverse</code>：换行：第一行在下方，相反顺序</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-054925da3f14dcd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><blockquote><p><strong>注意</strong>：<code>wrap-reverse</code>会使交叉轴的方向改变</p></blockquote><h2 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3. flex-flow"></a>3. flex-flow</h2><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-justify-content"><a href="#4-justify-content" class="headerlink" title="4. justify-content"></a>4. justify-content</h2><p><code>justify-content</code>属性定义了项目在<strong>主轴</strong>上的对齐方式。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-3161e773beaa8a3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>它可能取5个值，<strong>具体对齐方式与轴的方向有关</strong>。下面假设主轴为从左到右。</p><ul><li><code>flex-start</code>（默认值）：左对齐，与主轴开始位置对齐</li><li><code>flex-end</code>：右对齐，与主轴结束位置对齐</li><li><code>center</code>： 居中，与主轴中心对齐</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 </li></ul><h2 id="5-align-items"><a href="#5-align-items" class="headerlink" title="5. align-items"></a>5. align-items</h2><p><code>align-items</code>属性定义项目在<strong>交叉轴</strong>上如何对齐。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-8e4cb62f3df11610.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>它可能取5个值。<strong>具体的对齐方式与交叉轴的方向有关</strong>，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h2 id="6-align-content"><a href="#6-align-content" class="headerlink" title="6. align-content"></a>6. align-content</h2><p><code>align-content</code>属性定义了多根轴线的对齐方式。<strong>如果项目只有一根轴线，就是只有一行，该属性不起作用</strong>。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-aaba23b87456a372.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>该属性可能取6个值。</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h1 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h1><ul><li><strong>order</strong></li><li><strong>flex-grow</strong></li><li><strong>flex-shrink</strong></li><li><strong>flex-basis</strong></li><li><strong>flex</strong></li><li><strong>align-self</strong></li></ul><h2 id="1-order"><a href="#1-order" class="headerlink" title="1. order"></a>1. order</h2><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-3e4caf2cc2056a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="2-flex-grow"><a href="#2-flex-grow" class="headerlink" title="2. flex-grow"></a>2. flex-grow</h2><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-2a4ee76e08936ddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h2 id="3-flex-shrink"><a href="#3-flex-shrink" class="headerlink" title="3. flex-shrink"></a>3. flex-shrink</h2><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-9b2f8f4fdff2f8bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。<strong>负值对该属性无效。</strong></p><h2 id="4-flex-basis"><a href="#4-flex-basis" class="headerlink" title="4. flex-basis"></a>4. flex-basis</h2><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><h2 id="5-flex"><a href="#5-flex" class="headerlink" title="5. flex"></a>5. flex</h2><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code>和<code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 <code>none</code> (<code>0 0 auto</code>)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h2 id="6-align-self"><a href="#6-align-self" class="headerlink" title="6. align-self"></a>6. align-self</h2><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-bced512271d25819.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>该属性可能取6个值，除了<code>auto</code>，其他都与<code>align-items</code>属性完全一致。</p><h1 id="引自"><a href="#引自" class="headerlink" title="引自"></a>引自</h1><blockquote><p>本文引自阮一峰的网络日志：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-38044c92f204f8f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;讲讲布局，传统的布局，是基于盒子模型，依赖 &lt;code&gt;display&lt;/code&gt; + &lt;code&gt;position&lt;/code&gt; + &lt;code&gt;float&lt;/code&gt;属性。它对于特殊的布局非常不方便，如：垂直居中。&lt;/p&gt;
&lt;p&gt;Flex 布局是 W3C 在 2009 年提出的新方案，可以简便、完整、响应式地实现各种页面布局。已经得到所有浏览器的支持。是未来布局的首选方案。下面就跟大家介绍Flex布局。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>深入理解层叠上下文和层叠顺序</title>
    <link href="http://destinytaoer.cn//posts/5ef1e80c/"/>
    <id>http://destinytaoer.cn//posts/5ef1e80c/</id>
    <published>2017-10-14T15:35:50.000Z</published>
    <updated>2018-08-06T09:37:34.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原文是在前面对<a href="http://destinytaoer.cn/2017/10/Transform-%E5%BC%95%E8%B5%B7%E7%9A%84-z-index-%E5%A4%B1%E6%95%88%E2%80%98/">transform引起的z-index“失效”</a>探究过程中找到的，非常棒，所以转载分享。本文大多摘自原文，进行了压缩，也加入了我自己的理解，希望对大家有帮助。</p><p>默认情况下，网页内容是没有偏移角的垂直视觉呈现，当内容发生层叠的时候，一定会有一个前后的层叠顺序产生。</p><p>我们大家可能都熟悉CSS中的z-index属性，需要跟大家讲的是，z-index实际上只是CSS层叠上下文和层叠顺序中的一叶小舟。</p><a id="more"></a><h1 id="一、什么是层叠上下文"><a href="#一、什么是层叠上下文" class="headerlink" title="一、什么是层叠上下文"></a>一、什么是层叠上下文</h1><p>层叠上下文，英文称作“stacking context”。是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上“高人一等”。</p><p><strong>z轴</strong><br>表示的是用户与屏幕的这条看不见的垂直线：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-a898aaf76a63dc5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>具象化</strong><br>拥有层叠上下文的元素相当于是一个容器，容器里装着其他元素。<br>不同容器内的元素的高低由容器决定。容器里面的元素，有高低之分，但不会突破容器。</p><h1 id="二、什么是层叠水平"><a href="#二、什么是层叠水平" class="headerlink" title="二、什么是层叠水平"></a>二、什么是层叠水平</h1><p>“层叠水平”英文称作”stacking level”，决定了同一个层叠上下文中元素在z轴上的显示顺序。</p><p>就跟人一样，网页中的元素虽然都是独立个体，但是总有一个类似的排名排序的情况存在。这个就是层叠水平。层叠上下文的层叠水平是优先级更高的层叠水平。</p><p><strong>普通元素的层叠水平优先由层叠上下文决定，因此，层叠水平的比较只有在当前层叠上下文元素中才有意义。</strong></p><blockquote><p><strong>注意</strong>：千万不要把层叠水平和z-index属性混为一谈。某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的子元素，而层叠水平所有的元素都存在。</p></blockquote><h1 id="三、什么是层叠顺序"><a href="#三、什么是层叠顺序" class="headerlink" title="三、什么是层叠顺序"></a>三、什么是层叠顺序</h1><p>“层叠顺序”英文称作”stacking order”，表示元素发生层叠时的垂直显示顺序。<strong>层叠上下文和层叠水平是概念，而这里的层叠顺序是规则。</strong></p><p>在CSS2.1的年代，在CSS3还没有出现的时候（注意这里的前提），层叠顺序规则遵循下面这张图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-ba5b01895cbecb35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>这样的设计是由元素的重要性出发的，内容优于布局，布局优于装饰</p><blockquote><p><strong>注意</strong>：</p><ol><li>这是css2的时候</li><li>这里的<code>z-index: 0</code> 只是表示一个0级别，对应的是<code>z-index: auto</code>，没有创建层叠上下文的级别</li></ol></blockquote><h1 id="四、层叠准则"><a href="#四、层叠准则" class="headerlink" title="四、层叠准则"></a>四、层叠准则</h1><p>层叠领域的黄金准则。当元素发生层叠的时候，其覆盖关系遵循下面2个准则：</p><ul><li><p><strong>谁大谁上</strong><br>当具有明显的层叠水平标示的时候，如识别的z-indx值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。</p></li><li><p><strong>后来居上</strong><br>当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</p></li></ul><h1 id="五、层叠上下文的特性"><a href="#五、层叠上下文的特性" class="headerlink" title="五、层叠上下文的特性"></a>五、层叠上下文的特性</h1><p>层叠上下文元素有如下特性：</p><ul><li>层叠上下文的层叠水平要比普通元素高；</li><li>层叠上下文可以阻断元素的混合模式；</li><li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文；</li><li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素；</li><li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</li></ul><h1 id="六、层叠上下文的创建"><a href="#六、层叠上下文的创建" class="headerlink" title="六、层叠上下文的创建"></a>六、层叠上下文的创建</h1><p>层叠上下文基本是由一些特定的css属性所创建，主要分为三种：</p><h2 id="1-根层叠上下文"><a href="#1-根层叠上下文" class="headerlink" title="1. 根层叠上下文"></a>1. 根层叠上下文</h2><p><strong>页面根元素</strong>，也就是滚动条的默认的始作俑者<html>元素。这就是为什么，绝对定位元素在left/top等值定位的时候，如果没有其他定位元素限制，会相对浏览器窗口定位的原因。</html></p><h2 id="2-定位元素与传统层叠上下文"><a href="#2-定位元素与传统层叠上下文" class="headerlink" title="2. 定位元素与传统层叠上下文"></a>2. 定位元素与传统层叠上下文</h2><ul><li><strong>设置<code>position:relative/position:absolute</code>，<code>z-index</code>值不是<code>auto</code>的定位元素</strong></li><li><strong>设置<code>position:fixed</code>的定位元素，<code>z-index</code>为任意</strong></li></ul><h2 id="3-CSS3与新时代的层叠上下文"><a href="#3-CSS3与新时代的层叠上下文" class="headerlink" title="3. CSS3与新时代的层叠上下文"></a>3. CSS3与新时代的层叠上下文</h2><ul><li><strong>设置了z-index，且不为auto的flex元素(父元素display:flex|inline-flex)</strong></li><li><strong>设置了opacity，且不为1的元素</strong></li><li><strong>设置了transform，且不为none的元素</strong></li><li><strong>设置了mix-blend-mode值，且不为normal的元素</strong></li><li>**设置了isolation，且为isolate的元素</li><li><strong>设置了filter值，且不是none的元素</strong></li><li><strong>will-change指定的属性值为上面任意一个</strong></li><li><strong>设置了-webkit-overflow-scrolling，且为touch的元素</strong></li></ul><h1 id="七、层叠上下文与层叠顺序"><a href="#七、层叠上下文与层叠顺序" class="headerlink" title="七、层叠上下文与层叠顺序"></a>七、层叠上下文与层叠顺序</h1><p>最终的层叠顺序分两种情况讨论：</p><ul><li><ol><li>层叠上下文不依赖<code>z-index</code>数值，其层叠顺序是<code>z-index: auto</code>，就是<code>z-index: 0</code>的级别，没有创建层叠上下文的元素的级别</li></ol></li><li><ol start="2"><li>层叠上下文依赖<code>z-index</code>数值，则由<code>z-index</code>决定<br>也就是两个层叠准则的详细解释，第一个：后来者居上，第二个：谁大谁上。</li></ol></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-52bb630f54165a8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="引自"><a href="#引自" class="headerlink" title="引自"></a>引自</h1><blockquote><p>引自：<a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">张鑫旭的博客</a><br>本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=5115" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/?p=5115</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;原文是在前面对&lt;a href=&quot;http://destinytaoer.cn/2017/10/Transform-%E5%BC%95%E8%B5%B7%E7%9A%84-z-index-%E5%A4%B1%E6%95%88%E2%80%98/&quot;&gt;transform引起的z-index“失效”&lt;/a&gt;探究过程中找到的，非常棒，所以转载分享。本文大多摘自原文，进行了压缩，也加入了我自己的理解，希望对大家有帮助。&lt;/p&gt;
&lt;p&gt;默认情况下，网页内容是没有偏移角的垂直视觉呈现，当内容发生层叠的时候，一定会有一个前后的层叠顺序产生。&lt;/p&gt;
&lt;p&gt;我们大家可能都熟悉CSS中的z-index属性，需要跟大家讲的是，z-index实际上只是CSS层叠上下文和层叠顺序中的一叶小舟。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Transform 引起的 z-index &quot;失效&quot;</title>
    <link href="http://destinytaoer.cn//posts/c1fd4e78/"/>
    <id>http://destinytaoer.cn//posts/c1fd4e78/</id>
    <published>2017-10-12T10:31:44.000Z</published>
    <updated>2018-08-06T10:43:38.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>重新学习CSS后的第三天，学习制作阴影的过程中，发现的问题：<br>设置了<code>box-shadow</code>后展现的阴影：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-470275eaf0d0295a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>添加<code>transform:rotate(10deg);</code>后的效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-4fc582a383857820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>查看CodePen例子：<a href="https://codepen.io/destiny0904/pen/mBjRmJ" target="_blank" rel="noopener">阴影效果</a></p></blockquote><p>一脸懵逼！再修改z-index完全没有效果。</p><p>百度之后，找到了问题的答案，也自己摸索着找到了这个问题的解决办法。下面与大家分享。</p><a id="more"></a><h2 id="一、原因"><a href="#一、原因" class="headerlink" title="一、原因"></a>一、原因</h2><ul><li>给元素设置transform属性会创建一个新的<code>stacking context</code>，译作<strong>层叠上下文</strong>的一个区域。</li><li>原本的层叠规则就会发生变化，导致了设置了transform的元素变成了一个层叠上下文容器，也就相当于最底层。</li><li>与其他兄弟元素或者外层元素依然保持原来的层叠规则，影响的只是其子元素。</li></ul><h2 id="二、什么是层叠上下文"><a href="#二、什么是层叠上下文" class="headerlink" title="二、什么是层叠上下文"></a>二、什么是层叠上下文</h2><p>相信大家都知道，css是层叠样式表，层叠上下文就是html文件渲染的时候，各个元素的堆叠规则，是css中非常重要的潜在规则。</p><blockquote><p>详细规则请点击：<a href="http://destinytaoer.cn/2017/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F/">深入理解CSS中的层叠上下文和层叠顺序</a></p></blockquote><h2 id="三、什么情况会创建新的区域"><a href="#三、什么情况会创建新的区域" class="headerlink" title="三、什么情况会创建新的区域"></a>三、什么情况会创建新的区域</h2><p>MDN上有相关的介绍：</p><blockquote><ul><li>根元素(HTML)</li><li>设置了position为absolute或relative，且z-index不是auto的元素</li><li>设置了z-index，且不为auto的流动元素</li><li>设置了opacity，且不为1的元素</li><li>设置了transform，且不为none的元素</li><li>设置了mix-blend-mode值，且不为normal的元素</li><li>设置了isolation 为 isolate的元素on mobile WebKit and Chrome 22+, </li><li>设置position为fixed的元素</li></ul></blockquote><h2 id="四、解决办法"><a href="#四、解决办法" class="headerlink" title="四、解决办法"></a>四、解决办法</h2><p>不使用<code>transform</code>是不可能的了，那么该如何解决呢？我想到的办法是再覆盖，覆盖掉不让看见的东西。</p><p><strong>1. 首先在元素里再创建一个标签</strong><br>因为元素的before、after伪类都被占用了，只能再创建标签覆盖。</p><p><strong>2. 应用新标签的before伪类</strong><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadow5</span> <span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">40px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.1) inset;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置定位，以原来的元素为基准，top、bottom、right、left为0，以充满整个容器<br><strong>注意</strong>：z-index的设置与原来元素的before、after中的z-index有关，必须比它的值大，不然after伪类又会显示在上面。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-90f36940b3b0480d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>张鑫旭博文：<a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">深入理解css中的层叠上下文和层叠顺序</a>Segmentfault回答：<a href="https://segmentfault.com/q/1010000002480824" target="_blank" rel="noopener">Transform 引起的 z-index “失效”</a><br>豆瓣文章：<a href="https://www.douban.com/note/343402554/" target="_blank" rel="noopener">小心 CSS3 Transform 引起的 z-index “失效”</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;重新学习CSS后的第三天，学习制作阴影的过程中，发现的问题：&lt;br&gt;设置了&lt;code&gt;box-shadow&lt;/code&gt;后展现的阴影：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-470275eaf0d0295a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;添加&lt;code&gt;transform:rotate(10deg);&lt;/code&gt;后的效果：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-4fc582a383857820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;查看CodePen例子：&lt;a href=&quot;https://codepen.io/destiny0904/pen/mBjRmJ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阴影效果&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一脸懵逼！再修改z-index完全没有效果。&lt;/p&gt;
&lt;p&gt;百度之后，找到了问题的答案，也自己摸索着找到了这个问题的解决办法。下面与大家分享。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于inline-block问题</title>
    <link href="http://destinytaoer.cn//posts/6b877873/"/>
    <id>http://destinytaoer.cn//posts/6b877873/</id>
    <published>2017-10-10T11:44:14.000Z</published>
    <updated>2018-08-06T09:37:34.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在重新学习css，做自己的学习demo时，设置一堆div在一行显示，呈现对比。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-645cd42dd9f41dea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>结果如图，设置了<code>display:inline-block</code>之后，出现了部分下沉现象。<br>改为<code>float</code>之后，又恢复正常对齐。</p><p>不过，很快就得到了解决。于是，就写了这篇关于inline-block问题的文章，包含了以前分享过的间距问题，在这里与大家分享。</p><a id="more"></a><h1 id="一、下沉问题"><a href="#一、下沉问题" class="headerlink" title="一、下沉问题"></a>一、下沉问题</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="1-行内元素有一个基线，所有在这一行中的元素都以这条基线为准对齐。"><a href="#1-行内元素有一个基线，所有在这一行中的元素都以这条基线为准对齐。" class="headerlink" title="1. 行内元素有一个基线，所有在这一行中的元素都以这条基线为准对齐。"></a>1. 行内元素有一个基线，所有在这一行中的元素都以这条基线为准对齐。</h3><p>如文字：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-4952b99592ab7302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>而行内块元素，如图片等，会以底部为准对齐：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-8ca4720b6246b9de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="2-文本在容器中默认是上对齐的，且不能设置其他垂直对齐方式"><a href="#2-文本在容器中默认是上对齐的，且不能设置其他垂直对齐方式" class="headerlink" title="2. 文本在容器中默认是上对齐的，且不能设置其他垂直对齐方式"></a>2. 文本在容器中默认是上对齐的，且不能设置其他垂直对齐方式</h3><p>要设置垂直居中之类的，只能用p标签或者其他标签包含之后，设置这些标签的对齐方式</p><h3 id="3-文本是老大，它不迁就别人，只有容器靠下来迁就它。"><a href="#3-文本是老大，它不迁就别人，只有容器靠下来迁就它。" class="headerlink" title="3. 文本是老大，它不迁就别人，只有容器靠下来迁就它。"></a>3. 文本是老大，它不迁就别人，只有容器靠下来迁就它。</h3><p>这是个很奇怪的现象，行内块元素的基线原本是底部，在有文本之后，该元素的基线就变成了文本的基线，为了与其他元素对齐，才导致下沉。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-设置vertical-align"><a href="#1-设置vertical-align" class="headerlink" title="1. 设置vertical-align"></a>1. 设置<code>vertical-align</code></h3><p>元素的默认<code>vertical-align</code>为<code>baseline</code>，也就是基线。把它的值设置为其他值，就能实现其他方式的对齐，如<code>top</code>、<code>bottom</code>、<code>text-bottom</code>、<code>text-top</code>、<code>middle</code>等，同高度下，效果相同。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line"><span class="selector-tag">verticla-align</span>: <span class="selector-tag">top</span>;</span><br></pre></td></tr></table></figure></p><blockquote><p><a href="http://www.w3school.com.cn/cssref/pr_pos_vertical-align.asp" target="_blank" rel="noopener">CSS vertical-align 属性</a></p></blockquote><h3 id="2-使用float等其他方法替换inline-block"><a href="#2-使用float等其他方法替换inline-block" class="headerlink" title="2. 使用float等其他方法替换inline-block"></a>2. 使用<code>float</code>等其他方法替换<code>inline-block</code></h3><p>当然，在这里说到用其他方法还有很多，已经与<code>inline-block</code>无关了，所以也不多说。</p><h1 id="二、间距问题"><a href="#二、间距问题" class="headerlink" title="二、间距问题"></a>二、间距问题</h1><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>行内块元素或者设置成<code>inline-block</code>的元素之间，会自动存在间距。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-0a1875e35ac9b536.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这种表现是符合规范的应该有的表现。但是，在某些情况却会对我们的布局造成影响。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-使用margin负值"><a href="#1-使用margin负值" class="headerlink" title="1. 使用margin负值"></a>1. 使用margin负值</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>margin负值的大小与上下文的字体和文字大小相关，其中，间距对应大小值可以参见“<a href="http://www.zhangxinxu.com/wordpress/?p=1194" target="_blank" rel="noopener">基于display:inline-block的列表布局</a>”一文part 6的统计表格：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-31a1fde60a029299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="inline-block元素间间隔大小与字体和文字大小之前的关系表截图" title="">                </div>                <div class="image-caption">inline-block元素间间隔大小与字体和文字大小之前的关系表截图</div>            </figure></p><p>例如，对于12像素大小的上下文，Arial字体的<code>margin</code>负值为<code>-3</code>像素，Tahoma和Verdana就是<code>-4</code>像素，而Geneva为<code>-6</code>像素。<br>由于外部环境的不确定性，以及最后一个元素多出的父margin值等问题，这个方法不适合大规模使用。</p><h3 id="2-使用font-size-0"><a href="#2-使用font-size-0" class="headerlink" title="2. 使用font-size:0"></a>2. 使用font-size:0</h3><p>类似下面的代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法，基本上可以解决大部分浏览器下inline-block元素之间的间距(IE7等浏览器有时候会有1像素的间距)。不过有个浏览器，就是Chrome, 其默认有<strong>最小字体大小限制</strong>，因为，考虑到兼容性，我们还需要添加：类似下面的代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>点击这里查看示例：<a href="http://www.zhangxinxu.com/study/201011/img-font-size-clear-blank.html" target="_blank" rel="noopener">font-size:0清除换行符间隙demo</a></p></blockquote><p><strong>补充：</strong>目前Chrome浏览器已经取消了最小字体限制。因此，上面的-webkit-text-size-adjust:none;代码估计时日不多了。</p><h3 id="3-使用letter-spacing"><a href="#3-使用letter-spacing" class="headerlink" title="3. 使用letter-spacing"></a>3. 使用letter-spacing</h3><p>类似下面的代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法可以搞定基本上所有浏览器，不过Opera浏览器下有蛋疼的问题：最小间距1像素，然后，<code>letter-spacing</code>再小就还原了。</p><h3 id="4-使用word-spacing"><a href="#4-使用word-spacing" class="headerlink" title="4. 使用word-spacing"></a>4. 使用word-spacing</h3><p>类似下面代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个是字符间距<code>letter-spacing</code>,一个是单词间距<code>word-spacing</code>，大同小异。据我测试，<code>word-spacing</code>的负值只要大到一定程度，其兼容性上的差异就可以被忽略。因为，貌似，word-spacing即使负值很大，也不会发生重叠。</p><blockquote><p>点击这里查看示例：<a href="http://www.zhangxinxu.com/study/201204/inline-block-space-word-spacing.html" target="_blank" rel="noopener">word-spacing与元素间距去除demo</a></p></blockquote><p>您使用Chrome浏览器，可能看到的是间距依旧存在。确实是有该问题，原因我是不清楚，不过我知道，可以添加<code>display: table;</code>或<code>display:inline-table;</code>让Chrome浏览器也变得乖巧。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-table;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-其他成品方法"><a href="#5-其他成品方法" class="headerlink" title="5. 其他成品方法"></a>5. 其他成品方法</h3><p>下面展示的是<a href="http://yuilibrary.com/yui/docs/cssgrids/" target="_blank" rel="noopener">YUI 3 CSS Grids </a>使用<code>letter-spacing</code>和<code>word-spacing</code>去除格栅单元见间隔方法（注意，其针对的是block水平的元素，因此对IE8-浏览器做了hack处理）：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.yui3-g</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">0.31em</span>;<span class="comment">/* webkit */</span></span><br><span class="line">    *letter-spacing: normal; /* IE &lt; 8 重置 */</span><br><span class="line">    <span class="selector-tag">word-spacing</span>: <span class="selector-tag">-0</span><span class="selector-class">.43em</span>; <span class="comment">/* IE &lt; 8 &amp;&amp; gecko */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.yui3-u</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">    *display: inline; /* IE &lt; 8: 伪造 inline-block */</span><br><span class="line">    <span class="selector-tag">letter-spacing</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">    <span class="selector-tag">word-spacing</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">    <span class="selector-tag">vertical-align</span>: <span class="selector-tag">top</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是一个名叫<a href="http://raym31.home.comcast.net/" target="_blank" rel="noopener">RayM</a>的人提供的方法：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>:table; <span class="comment">/* 调教webkit*/</span></span><br><span class="line">    <span class="attribute">word-spacing</span>:-<span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    *display:inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是上面一系列CSS方法的组组合合。</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><blockquote><p><a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="noopener">去除inline-block元素间间距的N种方法</a><br><a href="http://blog.csdn.net/qq_27545151/article/details/48598397" target="_blank" rel="noopener">inline-block之后意外发现块下沉</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在重新学习css，做自己的学习demo时，设置一堆div在一行显示，呈现对比。&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://upload-images.jianshu.io/upload_images/7295449-645cd42dd9f41dea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结果如图，设置了&lt;code&gt;display:inline-block&lt;/code&gt;之后，出现了部分下沉现象。&lt;br&gt;改为&lt;code&gt;float&lt;/code&gt;之后，又恢复正常对齐。&lt;/p&gt;
&lt;p&gt;不过，很快就得到了解决。于是，就写了这篇关于inline-block问题的文章，包含了以前分享过的间距问题，在这里与大家分享。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 实用插件介绍</title>
    <link href="http://destinytaoer.cn//posts/855f23c8/"/>
    <id>http://destinytaoer.cn//posts/855f23c8/</id>
    <published>2017-09-23T11:09:24.000Z</published>
    <updated>2018-08-02T00:59:16.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一款个人特别喜欢的编辑器，用来写前端代码。特别棒的是最新版本的文件栏中，中文不再出现乱码</p><p>本文主要是为自己做笔记以及备份的，介绍自己使用的sublime text插件。希望对大家也有所帮助。</p><blockquote><p>官网地址：<a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a></p></blockquote><a id="more"></a><blockquote><p>插件官网：<a href="https://packagecontrol.io/" target="_blank" rel="noopener">packageControl</a><br>大神文章：<a href="https://github.com/jikeytang/sublime-text" target="_blank" rel="noopener">详细插件介绍</a></p></blockquote><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><ul><li><h3 id="packageControl"><a href="#packageControl" class="headerlink" title="packageControl"></a>packageControl</h3><p>最新版本的sublimetext不再需要复制代码到控制台下载packagecontrol了。而是直接打开命令面板，快捷键<code>ctrl+shift+p</code>，输入<code>ipc</code>选中<code>install packagecontrol</code>，就会自行安装。</p></li><li><h3 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h3><p>快速生成HTML代码段的插件，强大到无与伦比，必备。</p></li><li><h3 id="ConvertToUTF8"><a href="#ConvertToUTF8" class="headerlink" title="ConvertToUTF8"></a>ConvertToUTF8</h3><p>支持 GBK, BIG5, EUC-KR, EUC-JP, Shift_JIS 等编码的插件，解决编辑中文乱码。</p></li><li><h3 id="SideBar-Enhancements"><a href="#SideBar-Enhancements" class="headerlink" title="SideBar Enhancements"></a>SideBar Enhancements</h3><p>这个插件改进了侧边栏，增加了许多功能</p></li><li><h3 id="ChineseLocalizations"><a href="#ChineseLocalizations" class="headerlink" title="ChineseLocalizations"></a>ChineseLocalizations</h3><p>使菜单栏等支持中文</p></li><li><h3 id="DocBlockr"><a href="#DocBlockr" class="headerlink" title="DocBlockr"></a><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="noopener">DocBlockr</a></h3><p>自动生成PHPDoc风格的注释，用于增强注释功能</p></li><li><h3 id="Bracket-Highlighte"><a href="#Bracket-Highlighte" class="headerlink" title="Bracket Highlighte"></a>Bracket Highlighte</h3><p>用于匹配括号，引号和html标签。</p></li><li><h3 id="Vue-Syntax-Highlight"><a href="#Vue-Syntax-Highlight" class="headerlink" title="Vue Syntax Highlight"></a>Vue Syntax Highlight</h3><p>vue的高亮显示</p></li><li><h3 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a>AutoFileName</h3><p>文件路径自动提示</p></li><li><h3 id="AdvancedNewFile"><a href="#AdvancedNewFile" class="headerlink" title="AdvancedNewFile"></a><a href="https://github.com/skuroda/Sublime-AdvancedNewFile" target="_blank" rel="noopener">AdvancedNewFile</a></h3><p>允许在项目中更快的创建文件</p></li><li><h3 id="FileDiffs"><a href="#FileDiffs" class="headerlink" title="FileDiffs"></a>FileDiffs</h3><p>用来比较文件差异</p></li><li><h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>等号对齐 <code>Ctrl+Alt+A</code><br><strong>添加冒号对齐</strong><br>在<code>Preferences -&gt; package settings -&gt; Alignment -&gt; Settings User</code>中添加下面代码：</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"align_indent"</span>: <span class="literal">false</span>,</span><br><span class="line"> <span class="attr">"alignment_chars"</span>: [<span class="string">"="</span>, <span class="string">":"</span>],</span><br><span class="line"> <span class="attr">"alignment_space_chars"</span>: [<span class="string">"="</span>, <span class="string">":"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="SublimeTmpl"><a href="#SublimeTmpl" class="headerlink" title="SublimeTmpl"></a><a href="https://github.com/kairyou/SublimeTmpl" target="_blank" rel="noopener">SublimeTmpl</a></h3>新建文件的模版插件</li></ul><blockquote><p>详情请见：<a href="https://github.com/kairyou/SublimeTmpl" target="_blank" rel="noopener">SublimeTmpl</a></p></blockquote><ul><li><h3 id="markdown-preview"><a href="#markdown-preview" class="headerlink" title="markdown preview"></a><a href="https://github.com/revolunet/sublimetext-markdown-preview" target="_blank" rel="noopener">markdown preview</a></h3><p>markdown编辑</p></li><li><h3 id="AllAutocomplete"><a href="#AllAutocomplete" class="headerlink" title="AllAutocomplete"></a><a href="https://github.com/alienhard/SublimeAllAutocomplete" target="_blank" rel="noopener">AllAutocomplete</a></h3><p>SublimeText默认的Autocomplete功能只考虑当前的文件，而AllAutocomplete插件会搜索所有打开的文件来寻找匹配的提示词。</p></li><li><h3 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h3><p>颜色选择器<code>Ctrl+Shift+C</code></p></li><li><h3 id="sublimeLint"><a href="#sublimeLint" class="headerlink" title="sublimeLint"></a>sublimeLint</h3><p>代码错误提示</p></li><li><h3 id="cssComb"><a href="#cssComb" class="headerlink" title="cssComb"></a>cssComb</h3><p>css属性排序</p></li><li><h3 id="jsformat"><a href="#jsformat" class="headerlink" title="jsformat"></a>jsformat</h3><p>js格式化 <code>Ctrl+Alt+F</code></p></li><li><h3 id="SublimeCodeIntel"><a href="#SublimeCodeIntel" class="headerlink" title="SublimeCodeIntel"></a>SublimeCodeIntel</h3><p>代码提示插件，支持多种编程语言</p></li><li><h3 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h3><p>css3代码提示</p></li><li><h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><p>sass语法编译高亮、代码提示</p></li></ul><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是一款个人特别喜欢的编辑器，用来写前端代码。特别棒的是最新版本的文件栏中，中文不再出现乱码&lt;/p&gt;
&lt;p&gt;本文主要是为自己做笔记以及备份的，介绍自己使用的sublime text插件。希望对大家也有所帮助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sublime Text&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="资源分享" scheme="http://destinytaoer.cn/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="sublimetext" scheme="http://destinytaoer.cn/tags/sublimetext/"/>
    
      <category term="编辑器" scheme="http://destinytaoer.cn/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo + next主题高级配置</title>
    <link href="http://destinytaoer.cn//posts/e1d994bf/"/>
    <id>http://destinytaoer.cn//posts/e1d994bf/</id>
    <published>2017-09-20T10:20:55.000Z</published>
    <updated>2018-08-03T13:39:56.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>配置完yilia后，发现缺少一些东西，百度之下，找到了特别喜欢的主题——next。跟大家分享配置经验。</p><ul><li>首先，本文是根据我自己的博客配置而写的，并不全面，其他美化配置在文末提供了相应的参考链接。欢迎浏览我的博客：<a href="http://destinytaoer.cn">destiny’Note</a></li><li>其次，本文中有部分自己的改进方案，并非全部摘自他文，所以转载请注明版权</li><li>最后，有不懂的或者有其他方案，欢迎联系本人</li></ul><a id="more"></a><h2 id="一、主题下载"><a href="#一、主题下载" class="headerlink" title="一、主题下载"></a>一、主题下载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>在<span id="inline-yellow">根目录</span><code>_config.yml</code>文件中：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：所有配置文件内，每一项配置的冒号后面都要加上空格</p></blockquote><h2 id="二、综合设置"><a href="#二、综合设置" class="headerlink" title="二、综合设置"></a>二、综合设置</h2><h3 id="1-语言设置"><a href="#1-语言设置" class="headerlink" title="1. 语言设置"></a>1. 语言设置</h3><p>在根目录<code>_config.yml</code>文件中：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></figure><p>编辑主题目录下<code>language/zh-Hans.yml</code>中英文的对应关系</p><h3 id="2-修改字体大小、样式"><a href="#2-修改字体大小、样式" class="headerlink" title="2. 修改字体大小、样式"></a>2. 修改字体大小、样式</h3><p>在主题目录配置文件下，查找<code>font</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default).</span></span><br><span class="line"><span class="attr">  host:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># body元素的字体设置</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="string">Lato</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 标题的基础字体设置</span></span><br><span class="line"><span class="attr">  headings:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 文章字体设置</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># logo字体设置</span></span><br><span class="line"><span class="attr">  logo:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 代码块字体设置</span></span><br><span class="line"><span class="attr">  codes:</span></span><br><span class="line"><span class="attr">    external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    family:</span></span><br><span class="line"><span class="attr">    size:</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><p>把false改为true，并修改了size的数值，单位是像素。如有需要可自行改变字体。</p><p>另外提供一种方法，供会前端的小伙伴参考：<br>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，修改里面的字体大小</p><h3 id="3-主题选择"><a href="#3-主题选择" class="headerlink" title="3. 主题选择"></a>3. 主题选择</h3><p>在主题配置文件中，查找<code>scheme</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主题中的主题</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="comment"># scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>选择你喜欢的，去掉前面的<code>#</code>号，其他加上<code>#</code>号。即注释掉的意思。</p><h3 id="4-背景的设置"><a href="#4-背景的设置" class="headerlink" title="4. 背景的设置"></a>4. 背景的设置</h3><p>在主题配置文件中，查找<code>canvas</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># Only fit scheme Pisces</span></span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>开启相应的背景，只要把对应的<code>false</code>设置为<code>true</code>，记得把其他都改为<code>false</code></p><h3 id="5-修改内容区域宽度"><a href="#5-修改内容区域宽度" class="headerlink" title="5. 修改内容区域宽度"></a>5. 修改内容区域宽度</h3><p>Next 对内容的宽度的设定如下：</p><ul><li>700px，当屏幕宽度 &lt; 1600px</li><li>900px，当屏幕宽度 &gt;= 1600px</li><li>移动设备下，宽度自适应</li></ul><p>在主题目录下的 <code>source\css_variables\custom.styl</code> 文件，新增变量：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改成你期望的宽度</span></span><br><span class="line">$content-desktop = 700px</span><br><span class="line"><span class="comment">// 当视窗超过 1600px 后的宽度</span></span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure><p>此方法不适用于 <code>Pisces Scheme</code>， <code>Pisces Scheme</code> 编辑<code>themes\next\source\css\_schemes\Picses\_layout.styl</code>文件，更改以下 css 选项定义值：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;<span class="attribute">width</span>: <span class="number">1150px</span>;&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;<span class="attribute">width</span>: <span class="number">1150px</span>;&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;<span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px);&#125;</span><br></pre></td></tr></table></figure><h2 id="三、文章模块的美化"><a href="#三、文章模块的美化" class="headerlink" title="三、文章模块的美化"></a>三、文章模块的美化</h2><h3 id="1-文章中添加居中模块"><a href="#1-文章中添加居中模块" class="headerlink" title="1. 文章中添加居中模块"></a>1. 文章中添加居中模块</h3><p>文章的Markdown文件中写上：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span></span><br><span class="line">&#123;% fullimage /image-url, alt, title %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line">&#123;% fi /image-url, alt, title %&#125;</span><br></pre></td></tr></table></figure><h3 id="2-文章内链接样式美化"><a href="#2-文章内链接样式美化" class="headerlink" title="2. 文章内链接样式美化"></a>2. 文章内链接样式美化</h3><p>在主题目录下，将<code>source/css/_custom/custom.styl</code>文件修改如下：<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章内链接文本样式</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-文章内代码美化"><a href="#3-文章内代码美化" class="headerlink" title="3. 文章内代码美化"></a>3. 文章内代码美化</h3><ul><li><p>行内代码<br>在主题目录下，将<code>source/css/_custom/custom.styl</code>文件修改如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//行内代码样式</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#c7254e</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#f9f2f4</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">1px</span> <span class="number">4px</span>;</span><br><span class="line"><span class="attribute">word-break</span>: break-all;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>区块代码<br>在主题目录下，修改<code>config.yml</code>文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   样式可选： normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-文章结束语"><a href="#4-文章结束语" class="headerlink" title="4. 文章结束语"></a>4. 文章结束语</h3><ul><li><strong>添加模板文件</strong></li></ul><p>在主题目录下<code>\layout\_macro</code>中新建 <code>passage-end-tag.swig</code>文件,并添加以下内容：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span></span><br><span class="line">              -------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>导入模板文件</strong></li></ul><p>在<code>\layout\_macro\post.swig</code>文件中，找到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### END POST BODY ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br></pre></td></tr></table></figure><p>在上面代码之前添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">          &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>配置</strong></li></ul><p>在主题配置文件中添加：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>上述步骤是主题编写的基本步骤，值得参考。</p><h3 id="5-增强文章底部版权信息"><a href="#5-增强文章底部版权信息" class="headerlink" title="5. 增强文章底部版权信息"></a>5. 增强文章底部版权信息</h3><ul><li>增加文章md文件的头部信息中添加<code>copyright: true</code>时，添加版权声明</li><li>增加文章标题、发布时间、更新时间等信息</li></ul><p>在目录<code>next/layout/_macro/</code>下找到<code>post-copyright.swig</code>，进行部分修改：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;ul class=&quot;post-copyright&quot;&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">  &lt;strong&gt;本文标题:&lt;/strong&gt;</span><br><span class="line">  &lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.author&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">    &#123;&#123; config.author &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">    &lt;strong&gt;发布时间:&lt;/strong&gt;</span><br><span class="line">    &#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-author&quot;&gt;</span><br><span class="line">    &lt;strong&gt;最后更新:&lt;/strong&gt;</span><br><span class="line">    &#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-link&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.link&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; post.permalink &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;&#123;&#123; post.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li class=&quot;post-copyright-license&quot;&gt;</span><br><span class="line">    &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.license_title&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125; &lt;/strong&gt;</span><br><span class="line">    &#123;&#123; __(&apos;post.copyright.license_content&apos;, theme.post_copyright.license_url, theme.post_copyright.license) &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="6-自定义文章的默认头部信息"><a href="#6-自定义文章的默认头部信息" class="headerlink" title="6. 自定义文章的默认头部信息"></a>6. 自定义文章的默认头部信息</h3><p>在根目录的<code>/scaffolds/post.md</code>文件中添加：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span>             <span class="comment">#标签</span></span><br><span class="line"><span class="attr">categories:</span>       <span class="comment">#分类</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span>   <span class="comment">#版权声明</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="number">01</span>     <span class="comment">#文章链接，有默认值</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">0</span>            <span class="comment">#置顶优先级</span></span><br><span class="line"><span class="attr">password:</span>         <span class="comment">#密码保护</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="7-文章加密访问（没有太大意义）"><a href="#7-文章加密访问（没有太大意义）" class="headerlink" title="7. 文章加密访问（没有太大意义）"></a>7. 文章加密访问（没有太大意义）</h3><p>打开主题目录下<code>layout/_partials/head.swig</code>文件,在<code>meta</code>标签后面插入这样一段代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后文章头部信息中添加password：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">password:</span> <span class="string">你设置的密码</span></span><br></pre></td></tr></table></figure><p>如果password后面为空，则表示不用密码。</p><h3 id="8-博文置顶"><a href="#8-博文置顶" class="headerlink" title="8. 博文置顶"></a>8. 博文置顶</h3><ul><li><strong>安装<code>hexo-generator-index</code>插件</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br></pre></td></tr></table></figure><ul><li><strong>替换代码</strong></li></ul><p>把<code>node_modules/hexo-generator-index/lib/generator.js</code>内的代码替换为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>设置top值</strong></li></ul><p>在文章头部信息中添加<code>top</code> 值，数值越大文章越靠前:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">100</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="9-增强文章底部标签"><a href="#9-增强文章底部标签" class="headerlink" title="9. 增强文章底部标签"></a>9. 增强文章底部标签</h3><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=”tag”&gt;#</code>，将 <code>#</code>换成</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-修改打赏"><a href="#10-修改打赏" class="headerlink" title="10. 修改打赏"></a>10. 修改打赏</h3><ul><li><strong>修改文字与图片</strong></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打赏设置</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">坚持原创技术分享，您的支持将鼓励我继续创作！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/assets/img/weixin.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/assets/img/alipay.jpg</span></span><br><span class="line"><span class="comment"># bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure><p>文字、图片位置可自行修改</p><ul><li><strong>字体不闪动设置</strong></li></ul><p>修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数<code>wechat:hover</code>和<code>alipay:hover</code>，如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注释文字闪动函数</span></span><br><span class="line"><span class="comment">#wechat:hover p&#123;</span></span><br><span class="line"><span class="comment">animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">-webkit-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">-moz-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">#alipay:hover p&#123;</span></span><br><span class="line"><span class="comment">animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">-webkit-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">-moz-animation: roll 0.1s infinite linear;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="四、区块美化"><a href="#四、区块美化" class="headerlink" title="四、区块美化"></a>四、区块美化</h2><h3 id="1-添加顶部加载条"><a href="#1-添加顶部加载条" class="headerlink" title="1. 添加顶部加载条"></a>1. 添加顶部加载条</h3><p>在主题配置文件<code>_config.yml</code>中，找到<code>pace</code>并修改：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">pace_theme:</span> <span class="string">pace-theme-minimal</span></span><br></pre></td></tr></table></figure><p>加载条样式有许多，在你找到的位置中可自行更换</p><h3 id="2-主页文章添加阴影效果"><a href="#2-主页文章添加阴影效果" class="headerlink" title="2. 主页文章添加阴影效果"></a>2. 主页文章添加阴影效果</h3><p>打开<code>/themes/next/source/css/_custom/custom.styl</code>,添加：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 203, .5);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(202, 203, 204, .5);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-鼠标点击小红心的设置"><a href="#3-鼠标点击小红心的设置" class="headerlink" title="3. 鼠标点击小红心的设置"></a>3. 鼠标点击小红心的设置</h3><p>将 <a href="https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a>文件添加到主题目录的<code>\source\js\src</code> 下。找到 <code>\layout\_layout.swing</code>文件， 在文件的后面， <code>body</code>标签之前 添加以下代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-搜索功能"><a href="#4-搜索功能" class="headerlink" title="4. 搜索功能"></a>4. 搜索功能</h3><ul><li><strong>安装</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ul><li><strong>配置</strong></li></ul><p>在主题配置文件下，查找<code>local_search</code>:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>enable</code>修改为<code>true</code></p><p>在根目录配置文件中，添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><h3 id="5-页脚美化"><a href="#5-页脚美化" class="headerlink" title="5. 页脚美化"></a>5. 页脚美化</h3><ul><li><strong>隐藏网页底部powered By Hexo / 强力驱动</strong></li></ul><p>在主题配置文件<code>_config.yml</code>中修改：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>添加文字或者链接</strong></li></ul><p>在主题目录下的<code>layout/_partials/footer</code>，查找<code>powered-by</code>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.copyright %&#125;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上面代码之前添加你的文字，或者增加链接：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>best for best!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="comment">&lt;!--文字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   <span class="comment">&lt;!--链接--&gt;</span></span><br></pre></td></tr></table></figure><p>至于样式，这里不多介绍。需要了解html、css知识。<br>还可以设置访问量等信息，在文末参考文章中有介绍。</p><h3 id="6-侧边栏添加访问量等信息"><a href="#6-侧边栏添加访问量等信息" class="headerlink" title="6. 侧边栏添加访问量等信息"></a>6. 侧边栏添加访问量等信息</h3><ul><li><strong>获取不蒜子代码</strong></li></ul><p>在<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>上获取代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>添加js文件</strong></li></ul><p>在主题目录下，找到<code>\layout\_layout.swing</code>文件， 在文件的后面， <code>&lt;/body&gt;</code>标签之前，添加上面代码。</p><ul><li><strong>安装wordcount</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><ul><li><strong>修改布局</strong></li></ul><p>在主题目录下，找到<code>\layout\_macro\sidebar.swing</code>文件，查找<code>/nav</code>，在<code>&lt;/nav&gt;</code>标签之前，添加下面代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span> <span class="attr">style</span>=<span class="string">"border-left:none;"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>浏览量<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>访客量<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-state-item site-state-posts"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-count"</span>&gt;</span>&#123;&#123;totalcount(site)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-state-item-name"</span>&gt;</span>总字数<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-文章标签显示设置"><a href="#7-文章标签显示设置" class="headerlink" title="7. 文章标签显示设置"></a>7. 文章标签显示设置</h3><p>在主题配置文件中，查找<code>post_meta</code>：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章标签显示设置</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span>  <span class="comment"># 发表时间</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">false</span>  <span class="comment"># 更新时间</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span>  <span class="comment"># 分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章字数显示设置（需要wordcount，前面已经下载）</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span>  <span class="comment"># 显示字数</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">false</span>   <span class="comment"># 所需时间</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">false</span>  <span class="comment"># 总字数</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span> <span class="comment"># 分割符</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>文章阅读量</strong></li></ul><p>注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud统计</a>账号，按照next官方推荐文档 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a>，<br>获取<code>AppID</code>以及<code>AppKey</code>并在主题的<code>_config.yml</code>文件中填写：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="string">joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="string">E9UJsJpw1omCHuS22PdSpKoh</span></span><br></pre></td></tr></table></figure><h3 id="8-添加友言评论"><a href="#8-添加友言评论" class="headerlink" title="8. 添加友言评论"></a>8. 添加友言评论</h3><p>在<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言评论</a>中注册，并进入管理来获取你的id。<br>修改主题配置文件的友言id：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># youyan 评论</span></span><br><span class="line"><span class="attr">youyan_uid:</span> <span class="string">"2144889"</span></span><br></pre></td></tr></table></figure></p><h3 id="9-添加jiathis分享按钮"><a href="#9-添加jiathis分享按钮" class="headerlink" title="9. 添加jiathis分享按钮"></a>9. 添加jiathis分享按钮</h3><p>将你的友言Id添加进去：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jiathis分享按钮</span></span><br><span class="line"><span class="attr">jiathis:</span></span><br><span class="line"><span class="attr">  uid:</span> <span class="string">'2144889'</span></span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">next官网：第三方服务集成</a><br><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a><br><a href="https://neveryu.github.io/categories/Hexo/" target="_blank" rel="noopener">Hexo-NexT搭建个人博客</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;配置完yilia后，发现缺少一些东西，百度之下，找到了特别喜欢的主题——next。跟大家分享配置经验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，本文是根据我自己的博客配置而写的，并不全面，其他美化配置在文末提供了相应的参考链接。欢迎浏览我的博客：&lt;a href=&quot;http://destinytaoer.cn&quot;&gt;destiny’Note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;其次，本文中有部分自己的改进方案，并非全部摘自他文，所以转载请注明版权&lt;/li&gt;
&lt;li&gt;最后，有不懂的或者有其他方案，欢迎联系本人&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客建站" scheme="http://destinytaoer.cn/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://destinytaoer.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://destinytaoer.cn/tags/github/"/>
    
      <category term="next" scheme="http://destinytaoer.cn/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + yilia主题 + githubpages博客添加友言评论功能</title>
    <link href="http://destinytaoer.cn//posts/d04b2bbb/"/>
    <id>http://destinytaoer.cn//posts/d04b2bbb/</id>
    <published>2017-09-19T04:48:41.000Z</published>
    <updated>2018-08-02T00:46:17.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo博客的Yilia主题中评论系统只提供了畅言、网易云跟帖、多说和Disqus。<br>由于多说评论、网易云跟帖已经关闭系统，畅言需要域名备案，而github是国外的，没有备案，所以尝试了其他第三方评论系统————<strong>友言</strong>。</p><p>友言使用极其简单，本地成功实现，但是<strong>上传上github后发现无法出现评论</strong>。</p><p>在多次查找与尝试下，终于成功，下面与大家分享我的方法。</p><blockquote><p>注意：本文是在前面都配置好的情况下进行的，如果最初并没有配置好，请查看：<br><a href="http://destinytaoer.cn/2017/09/githubpages-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">hexo+gitHubPages 快速搭建个人博客</a></p></blockquote><a id="more"></a><h2 id="一、注册友言id"><a href="#一、注册友言id" class="headerlink" title="一、注册友言id"></a>一、注册友言id</h2><h3 id="1-注册"><a href="#1-注册" class="headerlink" title="1. 注册"></a>1. 注册</h3><p>在<a href="http://www.uyan.cc/" target="_blank" rel="noopener">友言官网</a>上直接使用qq登录，注册成功直接出来代码<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-37980e74302972eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="2-获取你的id"><a href="#2-获取你的id" class="headerlink" title="2. 获取你的id"></a>2. 获取你的id</h3><p>进入后台管理，你会看到：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-e5dd6750141f186e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>获取到你的id</p><h2 id="二、博客文件配置"><a href="#二、博客文件配置" class="headerlink" title="二、博客文件配置"></a>二、博客文件配置</h2><h3 id="1-创建uyan-ejs文件"><a href="#1-创建uyan-ejs文件" class="headerlink" title="1. 创建uyan.ejs文件"></a>1. 创建uyan.ejs文件</h3><p>在<code>hexo\themes\yilia\layout_partial\post\</code>下新建一个<code>uyan.ejs</code>的文件<br>将上述代码copy到该文件中。</p><h3 id="2-修改article-ejs文件"><a href="#2-修改article-ejs文件" class="headerlink" title="2. 修改article.ejs文件"></a>2. 修改article.ejs文件</h3><p>修改<code>hexo\themes\yilia\layout\_partial\article.ejs</code>,找到<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br></pre></td></tr></table></figure></p><p>在此下方添加下列代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.uyan)&#123; %&gt;</span><br><span class="line"> &lt;%- partial(&apos;post/uyan&apos;, &#123;</span><br><span class="line"> key: post.slug,</span><br><span class="line"> title: post.title,</span><br><span class="line"> url: config.url+url_for(post.path)</span><br><span class="line"> &#125;) %&gt;</span><br><span class="line"> &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-修改yilia主题配置文件-config-yml"><a href="#3-修改yilia主题配置文件-config-yml" class="headerlink" title="3. 修改yilia主题配置文件_config.yml"></a>3. 修改yilia主题配置文件_config.yml</h3><p>修改<code>hexo\themes\yilia</code>下的<code>_config.yml</code>,在空白处,添加如下配置:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uyan: &apos;你的友言id&apos;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：<br>要用<strong>引号</strong>包含你的id<br>uyan: 后面必须添加一个<strong>空格</strong>，这是Hexo博客的配置要求</p></blockquote><p>这样友言已经配置好了,重新编译，运行:<br>hexo clean<br>hexo g<br>hexo s<br>访问： <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br><strong>本地实现评论系统成功！</strong></p><h2 id="三、解决Github发生错误"><a href="#三、解决Github发生错误" class="headerlink" title="三、解决Github发生错误"></a>三、解决Github发生错误</h2><p>上传到github上后，打开你的github页面，发现评论并没有出现。按F12，发现报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The page at &apos;https...&apos; was loaded over HTTPS,</span><br><span class="line"> but requested an insecure stylesheet &apos;http://..../css/1_6/background.css&apos;. </span><br><span class="line">This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure></p><p>原因：<strong>https下的http加载会被阻塞</strong>，也就是无法加载友言的那个js文件</p><p>查明之后，发现友言并不支持https，但是仍然有人实现了，并没有详细的解说。而我注意到域名的更改，如果改了域名，那么就不是https下了。实践证明，是可行的。</p><h3 id="1-域名注册"><a href="#1-域名注册" class="headerlink" title="1. 域名注册"></a>1. 域名注册</h3><p>这里不详细说明，没有域名可自行百度：腾讯云、阿里云、万网等注册。<br>域名不贵，基本就几块、十几块一年，毫无问题</p><h3 id="2-Github绑定域名"><a href="#2-Github绑定域名" class="headerlink" title="2. Github绑定域名"></a>2. Github绑定域名</h3><h4 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h4><blockquote><p>注意，<code>CNAME</code>文件必须放进博客目录<code>source</code>文件夹下，不然会被<code>hexo clean</code>命令清除</p></blockquote><p>在文件内写入你的域名，<strong>不加www</strong></p><h3 id="3-域名解析"><a href="#3-域名解析" class="headerlink" title="3. 域名解析"></a>3. 域名解析</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-bad38ddb5a3b23c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>按下图添加记录：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-9caf93d06edab157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>现在基本已经成功，你可以访问你的域名来查看你的博客</p><h2 id="四、修改配置文件"><a href="#四、修改配置文件" class="headerlink" title="四、修改配置文件"></a>四、修改配置文件</h2><p>查看你的博客后，你会发现，头像无法显示，链接发生错误的情况。</p><blockquote><p>原因：<br><strong>根链接发生错误</strong>，在不添加域名的时候，你的<code>root</code>会添加<code>/仓库名/</code>,各种链接都会自动添加这个根，而在添加域名后，域名直接指向你的仓库，此时链接仍然会自行添加根而发生链接错误。</p></blockquote><h3 id="博客目录下的-config-yml文件"><a href="#博客目录下的-config-yml文件" class="headerlink" title="博客目录下的_config.yml文件"></a>博客目录下的_config.yml文件</h3><p>修改根为’/‘<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root: /</span><br></pre></td></tr></table></figure></p><h3 id="主题目录下的-config-yml文件"><a href="#主题目录下的-config-yml文件" class="headerlink" title="主题目录下的_config.yml文件"></a>主题目录下的_config.yml文件</h3><p>修改根同上，并去掉头像等链接的仓库名</p><p><strong>此时就大功告成了！</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://www.jianshu.com/p/4729e92fddbe" target="_blank" rel="noopener">为next添加友言评论支持</a><br><a href="http://jingyan.baidu.com/article/4b52d702c8eb8dfc5d774b71.html" target="_blank" rel="noopener">hexo yilia 添加友言评论支持</a><br><a href="https://help.github.com/articles/using-a-custom-domain-with-github-pages/" target="_blank" rel="noopener">使用GitHub页面的自定义域</a><br><a href="https://www.zhihu.com/question/31377141" target="_blank" rel="noopener">github怎么绑定自己的域名？</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Hexo博客的Yilia主题中评论系统只提供了畅言、网易云跟帖、多说和Disqus。&lt;br&gt;由于多说评论、网易云跟帖已经关闭系统，畅言需要域名备案，而github是国外的，没有备案，所以尝试了其他第三方评论系统————&lt;strong&gt;友言&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;友言使用极其简单，本地成功实现，但是&lt;strong&gt;上传上github后发现无法出现评论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在多次查找与尝试下，终于成功，下面与大家分享我的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：本文是在前面都配置好的情况下进行的，如果最初并没有配置好，请查看：&lt;br&gt;&lt;a href=&quot;http://destinytaoer.cn/2017/09/githubpages-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/&quot;&gt;hexo+gitHubPages 快速搭建个人博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客建站" scheme="http://destinytaoer.cn/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://destinytaoer.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://destinytaoer.cn/tags/github/"/>
    
      <category term="yilia" scheme="http://destinytaoer.cn/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>githubpages + hexo 搭建个人博客</title>
    <link href="http://destinytaoer.cn//posts/ff1c724b/"/>
    <id>http://destinytaoer.cn//posts/ff1c724b/</id>
    <published>2017-09-18T13:15:58.000Z</published>
    <updated>2018-08-02T00:46:17.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文仅仅是使用hexo以及gitHubPages 快速搭建个人博客，后续还会分享详细的内容</p><blockquote><p>官方中文文档：<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/index.html</a></p></blockquote><a id="more"></a><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p><a href="https://nodejs.org/en" target="_blank" rel="noopener">Node.js</a><br>作用：node.js用来创建hexo博客框架<br><a href="http://git-scm.com/download" target="_blank" rel="noopener">Git客户端</a><br>作用：把本地的hexo内容提交到github上去</p><h2 id="二、Hexo"><a href="#二、Hexo" class="headerlink" title="二、Hexo"></a>二、Hexo</h2><p>打开下载好的<strong>Git Bash</strong>或者<strong>Git Shell</strong>，作用相当于命令行。</p><blockquote><p>过程中使用的是cnpm，下载node会自带npm，下面使用的是<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像cnpm</a></p></blockquote><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo</span><br></pre></td></tr></table></figure><p>-g为全局安装</p><h3 id="2-创建博客根文件夹"><a href="#2-创建博客根文件夹" class="headerlink" title="2. 创建博客根文件夹"></a>2. 创建博客根文件夹</h3><p>进入要创建博客的文件夹下（如E:\Hexo），执行以下指令，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init  &quot;文件夹名&quot;</span><br></pre></td></tr></table></figure><p>文件夹名称可以不写，那样就会把所有文件放在你先前进入的文件夹</p><h3 id="3-安装依赖包"><a href="#3-安装依赖包" class="headerlink" title="3. 安装依赖包"></a>3. 安装依赖包</h3><p>进入到你的博客文件夹下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><p>把package.json文件所定义的所有依赖项全部安装</p><h3 id="4-运行"><a href="#4-运行" class="headerlink" title="4. 运行"></a>4. 运行</h3><p>常用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g #完整命令为hexo generate,用于生成静态文件</span><br><span class="line">hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览</span><br><span class="line">hexo d #完整命令为hexo deploy,用于将本地文件发布到github上</span><br><span class="line">hexo n #完整命令为hexo new,用于新建一篇文章</span><br><span class="line">hexo g -d #两个命令的合成，一般在修改或者添加博文后直接使用这个命令</span><br></pre></td></tr></table></figure><p>运行下面代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:4000，" target="_blank" rel="noopener">http://localhost:4000，</a> 此时，你就能看到了一个漂亮的博客。<br>默认主题为：landscape</p><h2 id="三、注册Github帐号"><a href="#三、注册Github帐号" class="headerlink" title="三、注册Github帐号"></a>三、注册Github帐号</h2><p>已经有Github帐号跳过此步</p><ol><li><p>首先进入<a href="https://github.com/" target="_blank" rel="noopener">Github</a>进行注册</p></li><li><p>然后，创建repository</p></li></ol><p>repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入<a href="https://github.com/" target="_blank" rel="noopener">Github</a>，并进入个人页面<br>然后New一个repository</p><p><img src="http://upload-images.jianshu.io/upload_images/7295449-fcf3135671c31605.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>]</p><p>点进仓库，点击settings设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-3865d17ea4339e95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>下拉到GitHub Pages设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-e6dc1a9a35e0ffa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>source选中 master bransh ，然后save，就会出现一个网址。</p><h2 id="四、部署本地文件到github"><a href="#四、部署本地文件到github" class="headerlink" title="四、部署本地文件到github"></a>四、部署本地文件到github</h2><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="2-编辑配置文件"><a href="#2-编辑配置文件" class="headerlink" title="2. 编辑配置文件"></a>2. 编辑配置文件</h3><p>编辑博客文件夹下的_config.yml文件。</p><p>在_config.yml最下方，添加如下配置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy: </span><br><span class="line">    type: git</span><br><span class="line">    repo: https://github.com/用户名/仓库名/</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></p><h3 id="3-配置SSH"><a href="#3-配置SSH" class="headerlink" title="3. 配置SSH"></a>3. 配置SSH</h3><p>输入一下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>你应该会看到有警告，但是会有选项（yes/no），输入“yes”就好</p><h3 id="4-运行-1"><a href="#4-运行-1" class="headerlink" title="4. 运行"></a>4. 运行</h3><p>在命令行中运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p><p>完成后，打开原先的仓库网址，就能看到你的博客。</p><h2 id="五、写博文"><a href="#五、写博文" class="headerlink" title="五、写博文"></a>五、写博文</h2><h3 id="1-新建博文"><a href="#1-新建博文" class="headerlink" title="1.  新建博文"></a>1.  新建博文</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;my new post&quot;</span><br></pre></td></tr></table></figure><h3 id="2-编辑博文"><a href="#2-编辑博文" class="headerlink" title="2. 编辑博文"></a>2. 编辑博文</h3><blockquote><p>博文使用的是markdown语言，如果有不会使用的，请参考我的博文：<br><a href="http://destinytaoer.cn/2017/07/markdown%E8%AF%AD%E6%B3%95/">mardown学习总结</a></p></blockquote><p>在博客目录下\source_post中打开my-new-post.md，进行编辑</p><h3 id="3-Front-matter"><a href="#3-Front-matter" class="headerlink" title="3. Front-matter"></a>3. Front-matter</h3><blockquote><p>博文的头部，官方文档介绍：<a href="https://github.com/hexojs/site/edit/master/source/zh-cn/docs/front-matter.md" target="_blank" rel="noopener">Front-matter</a></p></blockquote><p>Front-matter 是文件最上方以 —分隔的区域，用于指定个别文件的变量，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World   #博文标题名</span><br><span class="line">date: 2013/7/13 20:46:25  #发布时间</span><br><span class="line">update:              #更新时间</span><br><span class="line">categories: blog     #文章文类</span><br><span class="line">tags: [life，travel]  #文章标签 只有一个标签时：tags: travel</span><br><span class="line">comments: true       #是否能够评论</span><br><span class="line">---</span><br><span class="line">#这里是正文，用markdown写</span><br><span class="line">#你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;</span><br><span class="line">#在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span><br></pre></td></tr></table></figure></p><p>写完文章后，你可以直接运行hexo g -d 上传到github。</p><h2 id="六、创建页面"><a href="#六、创建页面" class="headerlink" title="六、创建页面"></a>六、创建页面</h2><p>使用命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;pagename&quot;</span><br></pre></td></tr></table></figure></p><h3 id="1-归档页面"><a href="#1-归档页面" class="headerlink" title="1. 归档页面"></a>1. 归档页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;archives&quot;</span><br></pre></td></tr></table></figure><p>进入博客目录的<code>source/archives/index.md</code>，添加<code>type</code>值：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">archives</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><h3 id="2-分类页面"><a href="#2-分类页面" class="headerlink" title="2. 分类页面"></a>2. 分类页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>进入博客目录的<code>source/categories/index.md</code>，添加<code>type</code>值：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">categories</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><h3 id="3-标签页面"><a href="#3-标签页面" class="headerlink" title="3. 标签页面"></a>3. 标签页面</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>进入博客目录的<code>source/tags/index.md</code>，添加<code>type</code>值：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：上述页面都有对应插件生成，只需更改<code>type</code>值</p></blockquote><h3 id="4-自定义页面"><a href="#4-自定义页面" class="headerlink" title="4. 自定义页面"></a>4. 自定义页面</h3><p>以上述同样的方法创建页面</p><ol><li>需要模板，自行修改对应的<code>index.md</code>文件内容</li><li>不需要模板，完全自定义<ul><li>首先，在博客目录下的<code>_config.yml</code>文件中，在<code>skip_render</code>后面添加页面路径</li><li>修改<code>index.md</code>文件，或者将<code>index.md</code>修改成<code>index.html</code>文件，自行添加样式等</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>胖逆的嘟嘟的博文：<br><a href="http://www.cnblogs.com/tengj/category/809716.html" target="_blank" rel="noopener">hexo 的八篇干货</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文仅仅是使用hexo以及gitHubPages 快速搭建个人博客，后续还会分享详细的内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方中文文档：&lt;br&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/zh-cn/docs/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客建站" scheme="http://destinytaoer.cn/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="hexo" scheme="http://destinytaoer.cn/tags/hexo/"/>
    
      <category term="github" scheme="http://destinytaoer.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World！</title>
    <link href="http://destinytaoer.cn//posts/481/"/>
    <id>http://destinytaoer.cn//posts/481/</id>
    <published>2017-09-18T03:05:15.000Z</published>
    <updated>2018-08-03T13:32:31.551Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=8120f1aa4d4a20a425133495f13bf347/3b87e950352ac65cd20ecfcbf9f2b21193138a7b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>老师告诉我，让我写下第一个程序：Hello World！<br>当时很疑惑，问老师，为什么是“Hello World”？<br>老师说，因为这意味着你写的程序被赋予了生命，新生命的诞生总该向世界问好。</p></blockquote><p>很喜欢这样一句话，同样，今天，我赋予我的博客以生命。这是它对世界打的第一声招呼。</p><a id="more"></a><h1 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h1><ul><li>博客名：destiny’Note</li><li>博主：<a href="http://destinytaoer.cn/about/">destiny</a></li><li>博客描述：分享前端技术学习过程中的笔记、一些优质资源以及个人随笔</li><li>博客目录：<ul><li>博客建站</li><li>前端技术</li><li>资源分享</li><li>个人随笔</li><li>前端视角</li></ul></li><li>博客配置<ul><li>githubpage</li><li>hexo</li><li>主题next——Mist</li><li>百度统计分析</li><li>不蒜子访问量统计</li><li>友言评论</li><li>leanclound 阅读量统计</li><li>jiathis 分享</li><li>localsearch 搜索</li><li>wordcount 字数统计</li></ul></li></ul><p>hello，大家好。创建之初，希望大家能够从我这里学到知识，获得需要的资源，也希望大家可以给点意见或者建议，我将不胜荣幸。</p><hr><h2 id="第一次博客改版（2018-08）"><a href="#第一次博客改版（2018-08）" class="headerlink" title="第一次博客改版（2018.08）"></a>第一次博客改版（2018.08）</h2><ul><li>主题：tomotoes</li><li>abbrlink：用于生成页面的唯一码，有利于 SEO 优化</li><li>valine 评论</li><li>jsonContent 搜索</li><li>不蒜子访问量统计</li><li>leanclound 阅读量统计</li><li>wordcount 字数统计</li><li>站点地图</li></ul><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike150%2C5%2C5%2C150%2C50/sign=8120f1aa4d4a20a425133495f13bf347/3b87e950352ac65cd20ecfcbf9f2b21193138a7b.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;老师告诉我，让我写下第一个程序：Hello World！&lt;br&gt;当时很疑惑，问老师，为什么是“Hello World”？&lt;br&gt;老师说，因为这意味着你写的程序被赋予了生命，新生命的诞生总该向世界问好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很喜欢这样一句话，同样，今天，我赋予我的博客以生命。这是它对世界打的第一声招呼。&lt;/p&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://destinytaoer.cn/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="博文前言" scheme="http://destinytaoer.cn/tags/%E5%8D%9A%E6%96%87%E5%89%8D%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript 面向对象编程</title>
    <link href="http://destinytaoer.cn//posts/3af08ee9/"/>
    <id>http://destinytaoer.cn//posts/3af08ee9/</id>
    <published>2017-09-14T10:53:43.000Z</published>
    <updated>2018-08-02T00:46:17.891Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引自：阮一峰的博客<br><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html" target="_blank" rel="noopener">Javascript面向对象编程（一）：封装</a><br><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="noopener">Javascript面向对象编程（二）：构造函数的继承</a><br><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="noopener">Javascript面向对象编程（三）：非构造函数的继承</a></p></blockquote><p>本篇博文是摘自上面的博客，进行了一定的精简，直接呈现最理想的实现方法。</p><a id="more"></a><h2 id="JavaScript-对象封装"><a href="#JavaScript-对象封装" class="headerlink" title="JavaScript 对象封装"></a>JavaScript 对象封装</h2><h3 id="一、构造函数"><a href="#一、构造函数" class="headerlink" title="一、构造函数"></a>一、构造函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个实例特有的属性与方法放在构造函数内,在创建实例时同时创建</p><h4 id="1-constructor属性"><a href="#1-constructor属性" class="headerlink" title="1.  constructor属性"></a>1.  constructor属性</h4><p>指向它们的构造函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　alert(cat1.constructor == Cat); <span class="comment">//true</span></span><br><span class="line">　　alert(cat2.constructor == Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="2-instanceof运算符"><a href="#2-instanceof运算符" class="headerlink" title="2.  instanceof运算符"></a>2.  instanceof运算符</h4><p>验证原型对象与实例对象之间的关系。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　alert(cat1 <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br><span class="line">　　alert(cat2 <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="二、prototype"><a href="#二、prototype" class="headerlink" title="二、prototype"></a>二、prototype</h3><p>实例所共有的属性和方法都指向同一内存地址：prototype对象，节省内存，提高效率</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Cat.prototype.type = <span class="string">" 猫科"</span>;</span><br><span class="line">Cat.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">'吃老鼠'</span>);</span><br></pre></td></tr></table></figure><p>Prototype模式的验证方法</p><h4 id="1-isPrototypeOf"><a href="#1-isPrototypeOf" class="headerlink" title="1. isPrototypeOf()"></a>1. isPrototypeOf()</h4><p>用来判断，某个proptotype对象和某个实例之间的关系。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　alert(Cat.prototype.isPrototypeOf(cat1)); <span class="comment">//true</span></span><br><span class="line">　　alert(Cat.prototype.isPrototypeOf(cat2)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="2-hasOwnProperty"><a href="#2-hasOwnProperty" class="headerlink" title="2. hasOwnProperty()"></a>2. hasOwnProperty()</h4><p>用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　alert(cat1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// true</span></span><br><span class="line">　　alert(cat1.hasOwnProperty(<span class="string">"type"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="3-in运算符"><a href="#3-in运算符" class="headerlink" title="3. in运算符"></a>3. in运算符</h4><p>可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　alert(<span class="string">"name"</span> <span class="keyword">in</span> cat1); <span class="comment">// true</span></span><br><span class="line">　　alert(<span class="string">"type"</span> <span class="keyword">in</span> cat1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>还可以用来遍历某个对象的所有属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> cat1) &#123; alert(<span class="string">"cat1["</span>+prop+<span class="string">"]="</span>+cat1[prop]); &#125;</span><br></pre></td></tr></table></figure><h3 id="三、创建实例"><a href="#三、创建实例" class="headerlink" title="三、创建实例"></a>三、创建实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"小白"</span>,<span class="string">"黄色"</span>);</span><br></pre></td></tr></table></figure><h2 id="javascript-对象构造函数的继承"><a href="#javascript-对象构造函数的继承" class="headerlink" title="javascript 对象构造函数的继承"></a>javascript 对象构造函数的继承</h2><h3 id="一、-构造函数绑定"><a href="#一、-构造函数绑定" class="headerlink" title="一、 构造函数绑定"></a>一、 构造函数绑定</h3><p>第一种方法也是最简单的方法，使用<code>call</code>或<code>apply</code>方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name,color</span>)</span>&#123;</span><br><span class="line">　　　　Animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">　　　　<span class="keyword">this</span>.name = name;</span><br><span class="line">　　　　<span class="keyword">this</span>.color = color;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><h3 id="二、-prototype模式"><a href="#二、-prototype模式" class="headerlink" title="二、 prototype模式"></a>二、 prototype模式</h3><p> 直接继承父类的prototype对象，但是，直接将子类prototype指向父类的prototype对象，会导致父类prototype对象的constructor属性被改掉，所以利用空对象作为中介</p><p>由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。<br>现在，我们先将Animal对象改写：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line">　　Animal.prototype.species = <span class="string">"动物"</span>;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">　　F.prototype = Animal.prototype;</span><br><span class="line">　　Cat.prototype = <span class="keyword">new</span> F();</span><br><span class="line">　　Cat.prototype.constructor = Cat;</span><br></pre></td></tr></table></figure><p>F是空对象，所以几乎不占内存。</p><p>封装成一个函数，便于使用。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">　　　　F.prototype = Parent.prototype;</span><br><span class="line">　　　　Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">　　　　Child.prototype.constructor = Child;</span><br><span class="line">　　　　Child.uber = Parent.prototype;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，方法如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　extend(Cat,Animal);</span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><p>函数体最后一行</p><pre><code>　　Child.uber = Parent.prototype;</code></pre><p>意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。</p><h3 id="三、-拷贝继承"><a href="#三、-拷贝继承" class="headerlink" title="三、 拷贝继承"></a>三、 拷贝继承</h3><p>应当分为浅拷贝和深拷贝</p><p>纯粹采用”拷贝”方法实现继承。把父对象的所有属性和方法，拷贝进子对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extend2</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> p = Parent.prototype;</span><br><span class="line">　　　　<span class="keyword">var</span> c = Child.prototype;</span><br><span class="line">　　　　<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">　　　　　　c[i] = p[i];</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　c.uber = p;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，这样写：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　extend2(Cat, Animal);</span><br><span class="line">　　<span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">"大毛"</span>,<span class="string">"黄色"</span>);</span><br><span class="line">　　alert(cat1.species); <span class="comment">// 动物</span></span><br></pre></td></tr></table></figure><h2 id="javascript-对象非构造函数的继承"><a href="#javascript-对象非构造函数的继承" class="headerlink" title="javascript 对象非构造函数的继承"></a>javascript 对象非构造函数的继承</h2><h3 id="一、object-方法"><a href="#一、object-方法" class="headerlink" title="一、object()方法"></a>一、object()方法</h3><p>json格式的发明人Douglas Crockford，提出了一个object()函数，可以做到这一点。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">　　　　F.prototype = o;</span><br><span class="line">　　　　<span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。</p><p>使用的时候，第一步先在父对象的基础上，生成子对象：</p><pre><code>　　var Doctor = object(Chinese);</code></pre><p>然后，再加上子对象本身的属性：</p><pre><code>　　Doctor.career = &apos;医生&apos;;</code></pre><p>这时，子对象已经继承了父对象的属性了。</p><h3 id="二、浅拷贝"><a href="#二、浅拷贝" class="headerlink" title="二、浅拷贝"></a>二、浅拷贝</h3><p>把父对象的属性，全部拷贝给子对象，也能实现继承。<br>下面这个函数，就是在做拷贝：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">extendCopy</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line">　　　　<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123; </span><br><span class="line">　　　　　　c[i] = p[i];</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　c.uber = p;</span><br><span class="line">　　　　<span class="keyword">return</span> c;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，这样写：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="keyword">var</span> Doctor = extendCopy(Chinese);</span><br><span class="line">　　Doctor.career = <span class="string">'医生'</span>;</span><br><span class="line">　　alert(Doctor.nation); <span class="comment">// 中国</span></span><br></pre></td></tr></table></figure><p>但是，这样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。</p><p>所以，<strong>extendCopy()只是拷贝基本类型的数据</strong>，我们把这种拷贝叫做”浅拷贝”。</p><h3 id="三、深拷贝"><a href="#三、深拷贝" class="headerlink" title="三、深拷贝"></a>三、深拷贝</h3><p>所谓”深拷贝”，就是能够<strong>实现真正意义上的数组和对象的拷贝</strong>。它的实现并不难，只要<strong>递归调用</strong>“浅拷贝”就行了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">p, c</span>) </span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> c = c || &#123;&#125;;</span><br><span class="line">　　　　<span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">　　　　　　<span class="keyword">if</span> (<span class="keyword">typeof</span> p[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">　　　　　　　　c[i] = (p[i].constructor === <span class="built_in">Array</span>) ? [] : &#123;&#125;;</span><br><span class="line">　　　　　　　　deepCopy(p[i], c[i]);</span><br><span class="line">　　　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　　　　c[i] = p[i];</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> c;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>使用的时候这样写：</p><pre><code>　　var Doctor = deepCopy(Chinese);</code></pre><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;引自：阮一峰的博客&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Javascript面向对象编程（一）：封装&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Javascript面向对象编程（二）：构造函数的继承&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Javascript面向对象编程（三）：非构造函数的继承&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇博文是摘自上面的博客，进行了一定的精简，直接呈现最理想的实现方法。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://destinytaoer.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器设置不保存缓存</title>
    <link href="http://destinytaoer.cn//posts/55cc9bd8/"/>
    <id>http://destinytaoer.cn//posts/55cc9bd8/</id>
    <published>2017-08-09T15:59:00.000Z</published>
    <updated>2018-08-06T09:37:34.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>浏览器是有默认缓存的，当你在 http 服务下调试代码时，会出现改变 js 或者 css 文件，页面没有更改。因为浏览器会保存这些文件，并在下次打开页面需要这些文件时，仍然调用本地最开始缓存的文件，所以不会更新。导致了调试的困难。</p><a id="more"></a><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>谷歌浏览器的设置： <code>F12</code>打开控制台，点进<code>Network</code>，将下面菜单栏的<code>Disable cache</code>复选框选中<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-91563b487bf8bdfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>那么在页面打开控制台的时候，不会使用缓存的文件，大大方便了开发者的调试</p><p>opera浏览器同样有这个按钮，选中即可</p><p>火狐浏览器和IE浏览器，在我并没有任何改动的情况下，已经能过出效果，并不需要刻意设置</p><h2 id="开发环境下的做法"><a href="#开发环境下的做法" class="headerlink" title="开发环境下的做法"></a>开发环境下的做法</h2><p>在开发环境下，都会使用自动化构建工具，将源码文件打包，除了<code>index.html</code>，更改了的文件会自动添加版本号，并且在文件中修改引用。这样就很好的避免了更新后在用户界面没有呈现效果的情况</p><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;浏览器是有默认缓存的，当你在 http 服务下调试代码时，会出现改变 js 或者 css 文件，页面没有更改。因为浏览器会保存这些文件，并在下次打开页面需要这些文件时，仍然调用本地最开始缓存的文件，所以不会更新。导致了调试的困难。&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://destinytaoer.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>去除inline-block元素间间距的N种方法</title>
    <link href="http://destinytaoer.cn//posts/4f4e1d8e/"/>
    <id>http://destinytaoer.cn//posts/4f4e1d8e/</id>
    <published>2017-08-09T07:54:38.000Z</published>
    <updated>2018-08-02T01:05:20.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、现象描述"><a href="#一、现象描述" class="headerlink" title="一、现象描述"></a>一、现象描述</h2><p>真正意义上的 inline-block 水平呈现的元素间，换行显示或空格分隔的情况下会有间距，很简单的个例子：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>间距就来了~<br>我们使用CSS更改非inline-block水平元素为inline-block水平，也会有该问题：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block; </span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cad5eb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-8ae114fa31419b20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>点击这里看示例：<a href="http://www.zhangxinxu.com/study/201204/inline-block-space-example.html" target="_blank" rel="noopener">inline-block元素间间距demo</a></p></blockquote><p>这种表现是符合规范的应该有的表现。<br>不过，这类间距有时会对我们布局，或是兼容性处理产生影响，需要去掉它，该怎么办呢？以下展示N种方法（欢迎补充）！</p><h2 id="二、方法之移除空格"><a href="#二、方法之移除空格" class="headerlink" title="二、方法之移除空格"></a>二、方法之移除空格</h2><p>元素间留白间距出现的原因就是标签段之间的空格，因此，去掉HTML中的空格，自然间距就木有了。考虑到代码可读性，显然连成一行的写法是不可取的，我们可以：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">    惆怅<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">    淡定<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">    热血<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>或者是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>或者是借助HTML注释：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>等。</p><h2 id="三、使用margin负值"><a href="#三、使用margin负值" class="headerlink" title="三、使用margin负值"></a>三、使用margin负值</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>margin负值的大小与上下文的字体和文字大小相关，其中，间距对应大小值可以参见“<a href="http://www.zhangxinxu.com/wordpress/?p=1194" target="_blank" rel="noopener">基于display:inline-block的列表布局</a>”一文part 6的统计表格：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-31a1fde60a029299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="inline-block元素间间隔大小与字体和文字大小之前的关系表截图" title="">                </div>                <div class="image-caption">inline-block元素间间隔大小与字体和文字大小之前的关系表截图</div>            </figure></p><p>例如，对于12像素大小的上下文，Arial字体的<code>margin</code>负值为<code>-3</code>像素，Tahoma和Verdana就是<code>-4</code>像素，而Geneva为<code>-6</code>像素。<br>由于外部环境的不确定性，以及最后一个元素多出的父margin值等问题，这个方法不适合大规模使用。</p><h2 id="四、让闭合标签吃胶囊"><a href="#四、让闭合标签吃胶囊" class="headerlink" title="四、让闭合标签吃胶囊"></a>四、让闭合标签吃胶囊</h2><p>如下处理：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意，为了向下兼容IE6/IE7等喝蒙牛长大的浏览器，最后一个列表的标签的结束（闭合）标签不能丢。</p><p>在HTML5中，我们直接：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"space"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>惆怅</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>淡定</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>热血</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>好吧，虽然感觉上有点怪怪的，但是，这是OK的。</p><blockquote><p>点击这里查看示例：<a href="http://www.zhangxinxu.com/study/201204/inline-block-space-skip-close-tag.html" target="_blank" rel="noopener">无闭合标签去除inline-block元素间距demo</a></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-cf2cd33ac8a958a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无闭合标签与inline-block水平元素间距的去除" title="">                </div>                <div class="image-caption">无闭合标签与inline-block水平元素间距的去除</div>            </figure><h2 id="五、使用font-size-0"><a href="#五、使用font-size-0" class="headerlink" title="五、使用font-size:0"></a>五、使用font-size:0</h2><p>类似下面的代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法，基本上可以解决大部分浏览器下inline-block元素之间的间距(IE7等浏览器有时候会有1像素的间距)。不过有个浏览器，就是Chrome, 其默认有<strong>最小字体大小限制</strong>，因为，考虑到兼容性，我们还需要添加：类似下面的代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>点击这里查看示例：<a href="http://www.zhangxinxu.com/study/201011/img-font-size-clear-blank.html" target="_blank" rel="noopener">font-size:0清除换行符间隙demo</a></p></blockquote><p><strong>补充：</strong>根据小杜在评论中中的说法，目前Chrome浏览器已经取消了最小字体限制。因此，上面的-webkit-text-size-adjust:none;代码估计时日不多了。</p><h2 id="六、使用letter-spacing"><a href="#六、使用letter-spacing" class="headerlink" title="六、使用letter-spacing"></a>六、使用letter-spacing</h2><p>类似下面的代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根据我去年的测试，该方法可以搞定基本上所有浏览器，包括吃“东鞋”、“西毒(胶囊)”、“南地(沟油)”、“北钙(三鹿)”的IE6/IE7浏览器，不过Opera浏览器下有蛋疼的问题：最小间距1像素，然后，<code>letter-spacing</code>再小就还原了。</p><h2 id="七、使用word-spacing"><a href="#七、使用word-spacing" class="headerlink" title="七、使用word-spacing"></a>七、使用word-spacing</h2><p>类似下面代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.space</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个是字符间距<code>letter-spacing</code>,一个是单词间距<code>word-spacing</code>，大同小异。据我测试，<code>word-spacing</code>的负值只要大到一定程度，其兼容性上的差异就可以被忽略。因为，貌似，word-spacing即使负值很大，也不会发生重叠。</p><blockquote><p>点击这里查看示例：<a href="http://www.zhangxinxu.com/study/201204/inline-block-space-word-spacing.html" target="_blank" rel="noopener">word-spacing与元素间距去除demo</a></p></blockquote><p>您使用Chrome浏览器，可能看到的是间距依旧存在。确实是有该问题，原因我是不清楚，不过我知道，可以添加<code>display: table;</code>或<code>display:inline-table;</code>让Chrome浏览器也变得乖巧。<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-table;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="八、其他成品方法"><a href="#八、其他成品方法" class="headerlink" title="八、其他成品方法"></a>八、其他成品方法</h2><p>下面展示的是<a href="http://yuilibrary.com/yui/docs/cssgrids/" target="_blank" rel="noopener">YUI 3 CSS Grids </a>使用<code>letter-spacing</code>和<code>word-spacing</code>去除格栅单元见间隔方法（注意，其针对的是block水平的元素，因此对IE8-浏览器做了hack处理）：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.yui3-g</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">0.31em</span>;<span class="comment">/* webkit */</span></span><br><span class="line">    *letter-spacing: normal; /* IE &lt; 8 重置 */</span><br><span class="line">    <span class="selector-tag">word-spacing</span>: <span class="selector-tag">-0</span><span class="selector-class">.43em</span>; <span class="comment">/* IE &lt; 8 &amp;&amp; gecko */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.yui3-u</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">    *display: inline; /* IE &lt; 8: 伪造 inline-block */</span><br><span class="line">    <span class="selector-tag">letter-spacing</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">    <span class="selector-tag">word-spacing</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">    <span class="selector-tag">vertical-align</span>: <span class="selector-tag">top</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是一个名叫<a href="http://raym31.home.comcast.net/" target="_blank" rel="noopener">RayM</a>的人提供的方法：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">background</span>: orange;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>:table; <span class="comment">/* 调教webkit*/</span></span><br><span class="line">    <span class="attribute">word-spacing</span>:-<span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    *display:inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是上面一系列CSS方法的组组合合。</p><h1 id="引自"><a href="#引自" class="headerlink" title="引自"></a>引自</h1><blockquote><p>原文转自：<a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener"><a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">张鑫旭-鑫空间-鑫生活</a></a><br>  本文地址：<a href="http://www.zhangxinxu.com/wordpress/?p=2357" target="_blank" rel="noopener">去除inline-block元素间间距的N种方法</a></p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、现象描述&quot;&gt;&lt;a href=&quot;#一、现象描述&quot; class=&quot;headerlink&quot; title=&quot;一、现象描述&quot;&gt;&lt;/a&gt;一、现象描述&lt;/h2&gt;&lt;p&gt;真正意义上的 inline-block 水平呈现的元素间，换行显示或空格分隔的情况下会有间距，很简单的个例子：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://destinytaoer.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>初学者资源推荐</title>
    <link href="http://destinytaoer.cn//posts/eacfc1ff/"/>
    <id>http://destinytaoer.cn//posts/eacfc1ff/</id>
    <published>2017-08-08T13:39:24.000Z</published>
    <updated>2018-08-06T09:37:34.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是在现阶段自学过程用到过的优秀资源的总结，并与大家分享。希望可以对大家，尤其是像我一样的初学者有所帮助，少走弯路。</p><p>主要包括：视频网站、文本网站和书籍</p><a id="more"></a><h2 id="一、视频学习网站"><a href="#一、视频学习网站" class="headerlink" title="一、视频学习网站"></a>一、视频学习网站</h2><p>就自学而言，我感觉还是看视频教学来得轻松些，也容易理解。</p><p><strong><a href="http://www.imooc.com" target="_blank" rel="noopener">慕课网——程序员的梦工厂</a></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/7295449-b57982ecf1aa8fa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我个人极力推荐的一个学习网站，前端的启蒙网站，主要针对互联网的开发。<br>课程有前端开发、后端开发、移动开发、数据库、大数据、运维、UI等，非常适合前端人员。有很多的前端课程，也根据难易程度分为初、中、高三级。还有许多的职业路径、实战教程(大部分实战课程是要付费的)。课程非常的全面。<br>课程里还能查看源码资源、课后小题以及在线的编辑器。<br>总之，这是一个非常棒的国内学习网站。</p><hr><h2 id="二、文本类学习网站"><a href="#二、文本类学习网站" class="headerlink" title="二、文本类学习网站"></a>二、文本类学习网站</h2><ul><li><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">w3chool在线教程</a></li><li><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a><br>涵盖比较全面，且包含用法和示例，容易上手，新手看的话，比较容易入门。</li></ul><p>但是，这两个网站讲解的并不详细，而且没有深度，后期应该放弃</p><hr><h2 id="三、书籍"><a href="#三、书籍" class="headerlink" title="三、书籍"></a>三、书籍</h2><p>《css权威指南》<br>《javascript DOM 编程艺术》<br>《javascript高级程序设计》（这本书较有深度）</p><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文是在现阶段自学过程用到过的优秀资源的总结，并与大家分享。希望可以对大家，尤其是像我一样的初学者有所帮助，少走弯路。&lt;/p&gt;
&lt;p&gt;主要包括：视频网站、文本网站和书籍&lt;/p&gt;
    
    </summary>
    
      <category term="资源分享" scheme="http://destinytaoer.cn/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Markdown学习总结</title>
    <link href="http://destinytaoer.cn//posts/64f3d682/"/>
    <id>http://destinytaoer.cn//posts/64f3d682/</id>
    <published>2017-07-28T10:10:24.000Z</published>
    <updated>2018-08-02T00:46:17.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-markdown简介"><a href="#一、-markdown简介" class="headerlink" title="一、 markdown简介"></a>一、 markdown简介</h2><p>Markdown 是一种用来写作的轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开</li><li>它用简洁的语法代替排版，使我们专心于码字</li><li>格式转换方便，Markdown 的文本你可以轻松转换为 html、PDF等</li><li>Markdown 的标记语法有极好的可读性</li></ol><blockquote><p>对于从事写作、文字编辑以及想写博客的人来说，非常有学习的必要。</p></blockquote><a id="more"></a><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ol><li><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">sublime text</a>(本人从事前端开发最喜欢用的一个编辑器，轻量级，但是非常强大)、Mac的mou、Markdownpad等</li><li>很多网站也支持了 Markdown 的文字录入，如<a href="http://www.jianshu.com" title="http://www.jianshu.com" target="_blank" rel="noopener">简书</a></li><li>在线编辑器，推荐<a href="https://stackedit.io/editor" title="https://stackedit.io/editor" target="_blank" rel="noopener">StackEdit</a></li></ol><h2 id="二、-markdown语法"><a href="#二、-markdown语法" class="headerlink" title="二、 markdown语法"></a>二、 markdown语法</h2><p>这里只是简单介绍markdown经常用到的语法标记，也只是个人觉得最简单实用、能够快速入门，如果您想深入学习、了解更多的markdown功能，请点击下面的文档：</p><blockquote><p><a href="https://github.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" title="https://github.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></p></blockquote><hr><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>在行首插入 1 到 6 个 # ，对应到标题 1 到 6 ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line">## 这是 H2</span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h4><p>加号“+”或减号“-”都可以作为列表标记，注意后面要跟一个空格。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- Red</span><br><span class="line"></span><br><span class="line">- Green</span><br><span class="line"></span><br><span class="line">- Blue</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ Red</span><br><span class="line"></span><br><span class="line">+ Green</span><br><span class="line"></span><br><span class="line">+ Blue</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Red</span><br><span class="line"></span><br><span class="line">* Green</span><br><span class="line"></span><br><span class="line">* Blue</span><br></pre></td></tr></table></figure></p><p>效果都是一样的：</p><ul><li><p>Red</p></li><li><p>Green</p></li><li><p>Blue</p></li></ul><h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h4><p>使用数字、一个英文句号和一个空格即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Red</span><br><span class="line"></span><br><span class="line">2. Green</span><br><span class="line"></span><br><span class="line">3. Blue</span><br></pre></td></tr></table></figure><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>在方括号写下链接文字，圆括号写下网址即可。也可以在右边加上空格，再用引号加上title属性。（这个title属性可能有些人不知道，就是鼠标移动到链接上会显示的文本）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[好中文的样子](http://www.jianshu.com/p/d409bb2b5d6c &quot;http://www.jianshu.com/p/d409bb2b5d6c&quot;)</span><br></pre></td></tr></table></figure><p>效果：</p><p><a href="http://www.jianshu.com/p/d409bb2b5d6c" title="http://www.jianshu.com/p/d409bb2b5d6c" target="_blank" rel="noopener">好中文的样子</a></p><p>还有一种在文章最后参考式的链接，在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure></p><p>你也可以选择性地在两个方括号中间加上一个空格：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is [an example] [] reference-style link.</span><br></pre></td></tr></table></figure></p><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[id]: http://example.com/  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure></p><p>当第二个方括号里面为空格时，定义时应当取第一个方括号<br>同样，可以在定义时，写上title属性</p><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 中可以插入图片，比链接的语法多了一个感叹号。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg &quot;Alt text&quot;)</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/path/to/img.jpg" alt="Alt text" title="Alt">                </div>                <div class="image-caption">Alt</div>            </figure><p>有些 Markdown 编辑器也支持拖拽插入图片，这就简单多了。例如简书 或者 Ulysses 就有这种功能。不过，在不同的环境下显示效果可能会有差异。</p><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>可以使用”&gt;” 标记来引用其他人的言论、书籍或报纸的内容。只需要在段落的第一行最前面加上 &gt; 即可：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; We believe that writing is about content, about what you want to say – not about fancy formatting. </span><br><span class="line">我们坚信写作写的是内容，所思所想，而不是花样格式。</span><br><span class="line">— Ulysses for Mac</span><br></pre></td></tr></table></figure></p><blockquote><p>We believe that writing is about content, about what you want to say – not about fancy formatting.<br>我们坚信写作写的是内容，所思所想，而不是花样格式。<br>— Ulysses for Mac</p></blockquote><p>引用可以嵌套，只要根据层次的不同，加上不同数量的 &gt; 即可：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;  这是第一级引用。</span><br><span class="line">&gt;&gt;  这是第二级引用。</span><br><span class="line">&gt;  现在回到第一级引用。</span><br></pre></td></tr></table></figure></p><blockquote><p> 这是第一级引用。</p><blockquote><p> 这是第二级引用。<br> 现在回到第一级引用。</p></blockquote></blockquote><p>在引用的区域内，也可以使用其他的 Markdown 语法，包括标题、列表等</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>标记一小段行内代码，用反引号`左右把它包起来<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Use the `printf()` function.</span><br></pre></td></tr></table></figure></p><p>效果：Use the <code>printf()</code> function.</p><p>如果要标记代码区段，你可以用多于三个反引号来开启和结束代码区段，注意开始和结束的反引号数量必须一致。<br>\<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There is a literal backtick (`) here.</span><br><span class="line">\</span><br></pre></td></tr></table></figure></p><hr><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>在Markdown中，可以使用 * 和 _ 来表示斜体和加粗。需要注意的是，“_”是下划线</p><ol><li><p>在需要斜体的文本左右各加一个“*”或“_” </p></li><li><p>在需要加粗的文本左右各加两个“*”或“_” </p></li><li><p>在需要加粗并且斜体的文本左右各加三个“*”或“_” </p></li></ol><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|  Tables  |  Are   |  Cool  |</span><br><span class="line">| ---------- |:-------:| --------:|</span><br><span class="line">| col 3 is | right-aligned | $1600 |</span><br><span class="line">| col 2 is | centered | $12 |</span><br><span class="line">| zebra stripes | are neat | $1 |</span><br></pre></td></tr></table></figure><p>显示效果</p><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。</p><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-markdown简介&quot;&gt;&lt;a href=&quot;#一、-markdown简介&quot; class=&quot;headerlink&quot; title=&quot;一、 markdown简介&quot;&gt;&lt;/a&gt;一、 markdown简介&lt;/h2&gt;&lt;p&gt;Markdown 是一种用来写作的轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;纯文本，所以兼容性极强，可以用所有文本编辑器打开&lt;/li&gt;
&lt;li&gt;它用简洁的语法代替排版，使我们专心于码字&lt;/li&gt;
&lt;li&gt;格式转换方便，Markdown 的文本你可以轻松转换为 html、PDF等&lt;/li&gt;
&lt;li&gt;Markdown 的标记语法有极好的可读性&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;对于从事写作、文字编辑以及想写博客的人来说，非常有学习的必要。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="博客建站" scheme="http://destinytaoer.cn/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="markdown" scheme="http://destinytaoer.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>gulp 自动化构建工具</title>
    <link href="http://destinytaoer.cn//posts/429b6dfd/"/>
    <id>http://destinytaoer.cn//posts/429b6dfd/</id>
    <published>2017-07-26T06:59:17.000Z</published>
    <updated>2018-08-02T00:59:15.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="gulp简介"><a href="#gulp简介" class="headerlink" title="gulp简介"></a>gulp简介</h3><p>gulp是一款常用的自动化构建工具，用于压缩、打包你的项目代码与文件。其他的类似的工具有grunt、webpack等。</p><h3 id="gulp的优点"><a href="#gulp的优点" class="headerlink" title="gulp的优点"></a>gulp的优点</h3><ul><li><p><strong>易于使用</strong><br>通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。</p></li><li><p><strong>构建快速</strong><br>利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。</p></li><li><p><strong>插件高质</strong><br>Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</p></li><li><p><strong>易于学习</strong><br>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p></li></ul><blockquote><p>下面只是介绍gulp的基本用法和常用插件。<br>详情查看：<a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">gulp中文网</a></p></blockquote><a id="more"></a><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="1-全局安装-gulp"><a href="#1-全局安装-gulp" class="headerlink" title="1. 全局安装 gulp"></a>1. 全局安装 gulp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --global gulp</span><br></pre></td></tr></table></figure><h3 id="2-开发依赖安装"><a href="#2-开发依赖安装" class="headerlink" title="2. 开发依赖安装"></a>2. 开发依赖安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev gulp</span><br></pre></td></tr></table></figure><h3 id="3-gulpfile-js-文件"><a href="#3-gulpfile-js-文件" class="headerlink" title="3. gulpfile.js 文件"></a>3. gulpfile.js 文件</h3><p>在项目根目录下创建一个名为 <code>gulpfile.js</code> 的文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-运行-gulp"><a href="#4-运行-gulp" class="headerlink" title="4. 运行 gulp"></a>4. 运行 gulp</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure><p>默认的名为 <code>default</code> 的任务（task）将会被执行，一般都把所有需要执行的放进<code>default</code>任务中<br>想要单独执行特定的任务（task），请输入 <code>gulp 任务名</code>,就会运行<code>gulpfile.js</code>文件中指定的任务。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>gulp本身并没有什么作用，需要依赖于插件来完成压缩、打包等功能。<br>插件在gulpfile.js中配置好后，通过<code>gulp 任务名</code>执行</p><h3 id="gulp-rev"><a href="#gulp-rev" class="headerlink" title="gulp-rev"></a>gulp-rev</h3><p>给文件添加版本号，在文件内容修改后，同时修改版本号，使得浏览器识别出来而不是用缓存里的文件，从而使用户看到最新的效果。</p><h3 id="gulp-rev-replace"><a href="#gulp-rev-replace" class="headerlink" title="gulp-rev-replace"></a>gulp-rev-replace</h3><p>在文件名改变后，在index文件里改变替换文件的引用</p><h3 id="gulp-useref"><a href="#gulp-useref" class="headerlink" title="gulp-useref"></a>gulp-useref</h3><p>在<code>html</code>里面可以通过注释的方法，告诉gulp哪些文件要合并，合并后叫什么文件<br>格式：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build:css css/combined.css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/one.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/two.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- build:js scripts/combined.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/one.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"scripts/two.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="gulp-filter"><a href="#gulp-filter" class="headerlink" title="gulp-filter"></a>gulp-filter</h3><p>过滤器，两种操作，筛选、恢复</p><h3 id="gulp-uglify"><a href="#gulp-uglify" class="headerlink" title="gulp-uglify"></a>gulp-uglify</h3><p>压缩js代码</p><h3 id="gulp-csso"><a href="#gulp-csso" class="headerlink" title="gulp-csso"></a>gulp-csso</h3><p>压缩css代码</p><h3 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp-watch"></a>gulp-watch</h3><p>监听文件的改变，自动执行任务，修改了文件之后，自动打包，不用我们手动执行任务</p><h3 id="gulp-postcss"><a href="#gulp-postcss" class="headerlink" title="gulp-postcss"></a>gulp-postcss</h3><p>与autoprefixer插件进行结合，来自动添加前缀</p><h3 id="gulp-concat"><a href="#gulp-concat" class="headerlink" title="gulp-concat"></a>gulp-concat</h3><p>直接把多个文件合并成一个文件</p><h3 id="gulp-responsive"><a href="#gulp-responsive" class="headerlink" title="gulp-responsive"></a>gulp-responsive</h3><p>把大图片按照一定规则生成一系列的响应式图片</p><h2 id="gulpfile-js基本设置"><a href="#gulpfile-js基本设置" class="headerlink" title="gulpfile.js基本设置"></a>gulpfile.js基本设置</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的依赖项</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);</span><br><span class="line"><span class="keyword">var</span> revReplace = <span class="built_in">require</span>(<span class="string">'gulp-rev-replace'</span>);</span><br><span class="line"><span class="keyword">var</span> useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>);</span><br><span class="line"><span class="keyword">var</span> filter = <span class="built_in">require</span>(<span class="string">'gulp-filter'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> csso = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsFilter = filter(<span class="string">'**/*.js'</span>,&#123;<span class="attr">restore</span>:<span class="literal">true</span>&#125;); <span class="comment">//过滤出js文件的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cssFilter = filter(<span class="string">'**/*.css'</span>,&#123;<span class="attr">restore</span>:<span class="literal">true</span>&#125;); <span class="comment">//过滤出css文件的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexHtmlFilter = filter([<span class="string">'**/*'</span>,<span class="string">'!**/index.html'</span>],&#123;<span class="attr">restore</span>:<span class="literal">true</span>&#125;); <span class="comment">//过滤出所有文件的变量，但是防止了改变index的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回到压缩文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">'src/index.html'</span>)<span class="comment">//执行任务的源文件，也就是水流</span></span><br><span class="line">    .pipe(useref())<span class="comment">//找到所有需要合并压缩的文件，并扔到流里</span></span><br><span class="line">    .pipe(jsFilter)<span class="comment">///找出js文件</span></span><br><span class="line">    .pipe(uglify())<span class="comment">//压缩js代码</span></span><br><span class="line">    .pipe(jsFilter.restore)<span class="comment">//把js文件扔回水流里</span></span><br><span class="line">    .pipe(cssFilter)<span class="comment">//找到css文件</span></span><br><span class="line">    .pipe(csso())<span class="comment">//压缩css代码</span></span><br><span class="line">    .pipe(cssFilter.restore)<span class="comment">//把css文件扔回流里</span></span><br><span class="line">    .pipe(indexHtmlFilter)<span class="comment">//找到所有文件</span></span><br><span class="line">    .pipe(rev())<span class="comment">//添加版本号</span></span><br><span class="line">    .pipe(indexHtmlFilter.restore)<span class="comment">//再扔回流里</span></span><br><span class="line"> .pipe(revReplace())<span class="comment">//替换文件引用</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));<span class="comment">//最后把所有文件放到dist文件夹</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，你也可以把不同的操作分开，最终再放入<code>default</code>任务中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: <span class="literal">true</span>,</span><br><span class="line">         minifyJS: <span class="literal">true</span>,</span><br><span class="line">         minifyCSS: <span class="literal">true</span>,</span><br><span class="line">         minifyURLs: <span class="literal">true</span>,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [</span><br><span class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><blockquote><p>注释写成/*! 的形式，就不会被压缩，可以用来写版权声明等信息</p></blockquote><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;gulp简介&quot;&gt;&lt;a href=&quot;#gulp简介&quot; class=&quot;headerlink&quot; title=&quot;gulp简介&quot;&gt;&lt;/a&gt;gulp简介&lt;/h3&gt;&lt;p&gt;gulp是一款常用的自动化构建工具，用于压缩、打包你的项目代码与文件。其他的类似的工具有grunt、webpack等。&lt;/p&gt;
&lt;h3 id=&quot;gulp的优点&quot;&gt;&lt;a href=&quot;#gulp的优点&quot; class=&quot;headerlink&quot; title=&quot;gulp的优点&quot;&gt;&lt;/a&gt;gulp的优点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;易于使用&lt;/strong&gt;&lt;br&gt;通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;构建快速&lt;/strong&gt;&lt;br&gt;利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;插件高质&lt;/strong&gt;&lt;br&gt;Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;易于学习&lt;/strong&gt;&lt;br&gt;通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;下面只是介绍gulp的基本用法和常用插件。&lt;br&gt;详情查看：&lt;a href=&quot;http://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gulp中文网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="gulp" scheme="http://destinytaoer.cn/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>html语义化</title>
    <link href="http://destinytaoer.cn//posts/d98c97bb/"/>
    <id>http://destinytaoer.cn//posts/d98c97bb/</id>
    <published>2016-12-12T00:39:24.000Z</published>
    <updated>2018-08-02T00:46:17.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HTML是超文本标记（Hyper Text Markup Language）的缩写，在网页设计中又把它称为网页的结构层。它的学习很简单，只要多利用业余时间去记忆、练习，一到两天时间就能掌握，并写出一个简单页面。</p><blockquote><p>这里推荐一个快速入门的网址：<a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a> </p></blockquote><a id="more"></a><h2 id="一、对于html的学习"><a href="#一、对于html的学习" class="headerlink" title="一、对于html的学习"></a>一、对于html的学习</h2><ol><li><p>首先是对html的整体结构的认识，即&lt;!DOCTYPE html&gt;的声明、html标签、head标签、body标签；</p></li><li><p>其次是对head里面的标签的认识和使用，如meta、link、title、script、style等，在网页的优化上特别重要；</p></li><li><p>最后是对body里面的标签的认识和使用，这也是网页上面呈现的内容，学html大部分时间都要花在这上面。要对常用标签的含义、用法、性质以及自带的属性都要熟练掌握，不常用标签能知道含义以及用法。</p><p>要掌握的精髓就在于在什么样的情况下运用哪个标签才能达到最好的效果。</p></li></ol><h2 id="二、标签语义化"><a href="#二、标签语义化" class="headerlink" title="二、标签语义化"></a>二、标签语义化</h2><p>其重要作用在于：</p><ol><li><p>网页结构合理 ；</p></li><li><p>利于开发调试和后期维护（让自己和别人能够比较容易看懂代码）；</p></li><li><p>利于搜索引擎SEO优化。搜索引擎不能识别内容，只能识别标签语义从而知道这部分是什么内容（让搜索引擎能看懂）。有了良好的结构和语义你的网页内容自然容易被搜索引擎抓取；</p></li><li><p>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）。</p><p>但是，必须认识到，并不是说我们只能使用有语义的标签，而应当是在需要有语义，需要被SEO识别的情况下才必须使用有语义标签（如自己网页的主题以及重要内容等）。在不需要的情况下，也根据情况使用无语义标签。如div加CSS的页面布局、span添加一些只为实现效果的块或者描述，不需要有语义，不然也容易造成语义混乱。这是因为由标签传达的含义比浏览器显示文本的方式更为重要</p></li></ol><h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><ol><li><p>在有一段文字显示的情况下，必须使p标签来包含。里面可含有无语义标签div/span以及其他有语义的标签。      如：<br>blockquote块引用，长引用（要添加cite属性引用地址）、<br>q短的行内引用cite定义引用。可使用该标签对参考文献的引用进行定义，比如书籍或杂志的标题著作的标题、<br>address文档作者或拥有者的联系信息、<br>code代码abbr缩写（要添加title标签说明原文）、<br>time时间、mark标注、ruby注释、<br>strong强调 （特别注意，这个标签权重很高，用于特别强调的文本。搜索引擎对其有很高的识别。）、<br>details可展开样式（details里面使用添加标题，后面接展开内容)<br>等等……</p></li><li><p>标题使用h1,h2,h3,h4标签,其中h5,h6权重太小一般不使用。其中的样式，即字体大小、颜色等都可以用CSS定义重新定义；</p></li><li><p>标签中应该使用的是有含义的。基于内容的样式标签会告诉浏览器它所包含的文本具有特定的含义、上下文或者用法。是浏览器和搜索引擎所能识别的。不应该使用纯粹为了设定样式而存在的标签。设定样式应当由样式表（CSS）完成。</p></li></ol><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ol><li><p>如果图片作为HTML的一部分，需要被搜索引擎识别，则用img，不需要，则可以使用背景来显示图片；</p></li><li><p>img标签中的alt和title属性。其中，alt属性用于图片描述，是给搜索引擎看的，图片无法显示时，显示alt中的文字。title属性也用于图片描述，是给用户看的，鼠标移动到图片时显示title中的文字。对于img标签，两个属性都尽量添加。（对于title值，在很多元素中都可以使用，比如在布局中无法完全显示的一条新闻或者消息等，在鼠标移动到上面时显示完全的内容是很好的一种用户体验）；</p></li><li><p>figure元素和figcaption元素。figure元素用于包含图片和图注，figurecaption元素用于表示图注文字。在有图片和图注的情况下，使用这两个元素会使页面语义更好。</p></li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>  表格中有table、tr、td、th、caption、thead、tbody、tfoot。语义上，th为表头单元格，caption为表格标题，thead、tbody、tfoot把表格分为三部分。这三样在效果上并不需要用到，但在良好的语义上，尽量使用</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ol><li><p>lable绑定控件。lable使用于关联控件，解释控件的意义以及有一定点击效果；</p></li><li><p>placeholder占位符值和value值。表单中文本框的默认值，类似提示文本。在需要用户输入文字的控件中尽量使用；</p></li><li><p>fieldset表单控件分组。（只在有需要的时候使用，多数表单不分组），legend标签为 fieldset 元素定义标题。</p></li></ol><h3 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a>新增标签</h3><p>在HTML5中添加了很多结构标签，增强了页面布局结构的语义，下面举例：</p><ol><li><p>header头部、标题 </p></li><li><p>nav导航 </p></li><li><p>section内容块区</p></li><li><p>article 文章</p></li><li><p>aside辅助信息</p></li><li><p>hgroup标题组合 </p></li><li><p>footer页脚 </p></li><li><p>figure独立的流内容</p></li></ol><blockquote class="blockquote-center">生命的意义不仅是活着，而是我们给别人的生命带来了何种不同。</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;HTML是超文本标记（Hyper Text Markup Language）的缩写，在网页设计中又把它称为网页的结构层。它的学习很简单，只要多利用业余时间去记忆、练习，一到两天时间就能掌握，并写出一个简单页面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里推荐一个快速入门的网址：&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.w3school.com.cn/&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端技术" scheme="http://destinytaoer.cn/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web前端" scheme="http://destinytaoer.cn/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="html" scheme="http://destinytaoer.cn/tags/html/"/>
    
  </entry>
  
</feed>
